[{"name":"Intl","documentation":"","type":"typeof Intl","entryType":"module","classes":[]},{"name":"BABYLON","documentation":"","type":"typeof BABYLON","entryType":"module","classes":[{"name":"InstancingAttributeInfo","documentation":"","type":"typeof InstancingAttributeInfo","constructors":[{"parameters":[],"returnType":"InstancingAttributeInfo","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"index","documentation":"Index/offset of the attribute in the vertex shader","type":"number","entryType":"property"},{"name":"attributeSize","documentation":"size of the attribute, 1, 2, 3 or 4","type":"number","entryType":"property"},{"name":"attribyteType","documentation":"type of the attribute, gl.BYTE, gl.UNSIGNED_BYTE, gl.SHORT, gl.UNSIGNED_SHORT, gl.FIXED, gl.FLOAT.\ndefault is FLOAT","type":"number","entryType":"property"},{"name":"normalized","documentation":"normalization of fixed-point data. behavior unclear, use FALSE, default is FALSE","type":"boolean","entryType":"property"},{"name":"offset","documentation":"Offset of the data in the Vertex Buffer acting as the instancing buffer","type":"number","entryType":"property"},{"name":"attributeName","documentation":"Name of the GLSL attribute, for debugging purpose only","type":"string","entryType":"property"}]},{"name":"EngineCapabilities","documentation":"","type":"typeof EngineCapabilities","constructors":[{"parameters":[],"returnType":"EngineCapabilities","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"maxTexturesImageUnits","documentation":"","type":"number","entryType":"property"},{"name":"maxTextureSize","documentation":"","type":"number","entryType":"property"},{"name":"maxCubemapTextureSize","documentation":"","type":"number","entryType":"property"},{"name":"maxRenderTextureSize","documentation":"","type":"number","entryType":"property"},{"name":"maxVertexAttribs","documentation":"","type":"number","entryType":"property"},{"name":"standardDerivatives","documentation":"","type":"boolean","entryType":"property"},{"name":"s3tc","documentation":"","type":"WEBGL_compressed_texture_s3tc","entryType":"property"},{"name":"textureFloat","documentation":"","type":"boolean","entryType":"property"},{"name":"textureAnisotropicFilterExtension","documentation":"","type":"EXT_texture_filter_anisotropic","entryType":"property"},{"name":"maxAnisotropy","documentation":"","type":"number","entryType":"property"},{"name":"instancedArrays","documentation":"","type":"ANGLE_instanced_arrays","entryType":"property"},{"name":"uintIndices","documentation":"","type":"boolean","entryType":"property"},{"name":"highPrecisionShaderSupported","documentation":"","type":"boolean","entryType":"property"},{"name":"fragmentDepthSupported","documentation":"","type":"boolean","entryType":"property"},{"name":"textureFloatLinearFiltering","documentation":"","type":"boolean","entryType":"property"},{"name":"textureFloatRender","documentation":"","type":"boolean","entryType":"property"},{"name":"textureHalfFloat","documentation":"","type":"boolean","entryType":"property"},{"name":"textureHalfFloatLinearFiltering","documentation":"","type":"boolean","entryType":"property"},{"name":"textureHalfFloatRender","documentation":"","type":"boolean","entryType":"property"},{"name":"textureLOD","documentation":"","type":"boolean","entryType":"property"},{"name":"drawBuffersExtension","documentation":"","type":"any","entryType":"property"}]},{"name":"Engine","documentation":"The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio.","type":"typeof Engine","constructors":[{"parameters":[{"name":"canvas","documentation":"- the canvas to be used for rendering","type":"HTMLCanvasElement"},{"name":"antialias","documentation":"","type":"boolean"},{"name":"options","documentation":"- further options to be sent to the getContext function","type":"EngineOptions"},{"name":"adaptToDeviceRatio","documentation":"","type":"boolean"}],"returnType":"Engine","documentation":"@constructor"}],"entryType":"class","functions":[{"name":"_prepareWorkingCanvas","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"resetTextureCache","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getGlInfo","documentation":"","type":"() => { vendor: string; renderer: string; version: string; }","functionBody":[{"parameters":[],"returnType":"{ vendor: string; renderer: string; version: string; }","documentation":""}],"entryType":"function"},{"name":"getAspectRatio","documentation":"","type":"(camera: Camera, useScreen?: boolean) => number","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"Camera"},{"name":"useScreen","documentation":"","type":"boolean"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getRenderWidth","documentation":"","type":"(useScreen?: boolean) => number","functionBody":[{"parameters":[{"name":"useScreen","documentation":"","type":"boolean"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getRenderHeight","documentation":"","type":"(useScreen?: boolean) => number","functionBody":[{"parameters":[{"name":"useScreen","documentation":"","type":"boolean"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getRenderingCanvas","documentation":"","type":"() => HTMLCanvasElement","functionBody":[{"parameters":[],"returnType":"HTMLCanvasElement","documentation":""}],"entryType":"function"},{"name":"getRenderingCanvasClientRect","documentation":"","type":"() => ClientRect","functionBody":[{"parameters":[],"returnType":"ClientRect","documentation":""}],"entryType":"function"},{"name":"setHardwareScalingLevel","documentation":"","type":"(level: number) => void","functionBody":[{"parameters":[{"name":"level","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getHardwareScalingLevel","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getLoadedTexturesCache","documentation":"","type":"() => WebGLTexture[]","functionBody":[{"parameters":[],"returnType":"WebGLTexture[]","documentation":""}],"entryType":"function"},{"name":"getCaps","documentation":"","type":"() => EngineCapabilities","functionBody":[{"parameters":[],"returnType":"EngineCapabilities","documentation":""}],"entryType":"function"},{"name":"getDepthFunction","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"setDepthFunction","documentation":"","type":"(depthFunc: number) => void","functionBody":[{"parameters":[{"name":"depthFunc","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setDepthFunctionToGreater","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setDepthFunctionToGreaterOrEqual","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setDepthFunctionToLess","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setDepthFunctionToLessOrEqual","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getStencilBuffer","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"setStencilBuffer","documentation":"","type":"(enable: boolean) => void","functionBody":[{"parameters":[{"name":"enable","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getStencilMask","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"setStencilMask","documentation":"","type":"(mask: number) => void","functionBody":[{"parameters":[{"name":"mask","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getStencilFunction","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getStencilFunctionReference","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getStencilFunctionMask","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"setStencilFunction","documentation":"","type":"(stencilFunc: number) => void","functionBody":[{"parameters":[{"name":"stencilFunc","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setStencilFunctionReference","documentation":"","type":"(reference: number) => void","functionBody":[{"parameters":[{"name":"reference","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setStencilFunctionMask","documentation":"","type":"(mask: number) => void","functionBody":[{"parameters":[{"name":"mask","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getStencilOperationFail","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getStencilOperationDepthFail","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getStencilOperationPass","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"setStencilOperationFail","documentation":"","type":"(operation: number) => void","functionBody":[{"parameters":[{"name":"operation","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setStencilOperationDepthFail","documentation":"","type":"(operation: number) => void","functionBody":[{"parameters":[{"name":"operation","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setStencilOperationPass","documentation":"","type":"(operation: number) => void","functionBody":[{"parameters":[{"name":"operation","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"stopRenderLoop","documentation":"stop executing a render loop function and remove it from the execution array","type":"(renderFunction?: () => void) => void","functionBody":[{"parameters":[{"name":"renderFunction","documentation":"","type":"() => void"}],"returnType":"void","documentation":"stop executing a render loop function and remove it from the execution array"}],"entryType":"function"},{"name":"_renderLoop","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"runRenderLoop","documentation":"Register and execute a render loop. The engine can have more than one render function.\n@example\nengine.runRenderLoop(function () {\n     scene.render()\n})","type":"(renderFunction: () => void) => void","functionBody":[{"parameters":[{"name":"renderFunction","documentation":"- the function to continuously execute starting the next render loop.","type":"() => void"}],"returnType":"void","documentation":"Register and execute a render loop. The engine can have more than one render function.\n@example\nengine.runRenderLoop(function () {\n     scene.render()\n})"}],"entryType":"function"},{"name":"switchFullscreen","documentation":"Toggle full screen mode.","type":"(requestPointerLock: boolean) => void","functionBody":[{"parameters":[{"name":"requestPointerLock","documentation":"- should a pointer lock be requested from the user","type":"boolean"}],"returnType":"void","documentation":"Toggle full screen mode."}],"entryType":"function"},{"name":"clear","documentation":"","type":"(color: any, backBuffer: boolean, depth: boolean, stencil?: boolean) => void","functionBody":[{"parameters":[{"name":"color","documentation":"","type":"any"},{"name":"backBuffer","documentation":"","type":"boolean"},{"name":"depth","documentation":"","type":"boolean"},{"name":"stencil","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"scissorClear","documentation":"","type":"(x: number, y: number, width: number, height: number, clearColor: Color4) => void","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"clearColor","documentation":"","type":"Color4"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setViewport","documentation":"Set the WebGL's viewport","type":"(viewport: Viewport, requiredWidth?: number, requiredHeight?: number) => void","functionBody":[{"parameters":[{"name":"viewport","documentation":"- the viewport element to be used.","type":"Viewport"},{"name":"requiredWidth","documentation":"","type":"number"},{"name":"requiredHeight","documentation":"","type":"number"}],"returnType":"void","documentation":"Set the WebGL's viewport"}],"entryType":"function"},{"name":"setDirectViewport","documentation":"Directly set the WebGL Viewport\nThe x, y, width & height are directly passed to the WebGL call\n@return the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state.","type":"(x: number, y: number, width: number, height: number) => Viewport","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"}],"returnType":"Viewport","documentation":"Directly set the WebGL Viewport\nThe x, y, width & height are directly passed to the WebGL call\n@return the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state."}],"entryType":"function"},{"name":"beginFrame","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"endFrame","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"resize","documentation":"resize the view according to the canvas' size.\n@example\n  window.addEventListener(\"resize\", function () {\n     engine.resize();\n  });","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"resize the view according to the canvas' size.\n@example\n  window.addEventListener(\"resize\", function () {\n     engine.resize();\n  });"}],"entryType":"function"},{"name":"setSize","documentation":"force a specific size of the canvas","type":"(width: number, height: number) => void","functionBody":[{"parameters":[{"name":"width","documentation":"- the new canvas' width","type":"number"},{"name":"height","documentation":"- the new canvas' height","type":"number"}],"returnType":"void","documentation":"force a specific size of the canvas"}],"entryType":"function"},{"name":"initWebVR","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"enableVR","documentation":"","type":"(vrDevice: any) => void","functionBody":[{"parameters":[{"name":"vrDevice","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"disableVR","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getVRDisplays","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"bindFramebuffer","documentation":"","type":"(texture: WebGLTexture, faceIndex?: number, requiredWidth?: number, requiredHeight?: number) => v...","functionBody":[{"parameters":[{"name":"texture","documentation":"","type":"WebGLTexture"},{"name":"faceIndex","documentation":"","type":"number"},{"name":"requiredWidth","documentation":"","type":"number"},{"name":"requiredHeight","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"bindUnboundFramebuffer","documentation":"","type":"(framebuffer: any) => any","functionBody":[{"parameters":[{"name":"framebuffer","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"unBindFramebuffer","documentation":"","type":"(texture: WebGLTexture, disableGenerateMipMaps?: boolean) => void","functionBody":[{"parameters":[{"name":"texture","documentation":"","type":"WebGLTexture"},{"name":"disableGenerateMipMaps","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"generateMipMapsForCubemap","documentation":"","type":"(texture: WebGLTexture) => void","functionBody":[{"parameters":[{"name":"texture","documentation":"","type":"WebGLTexture"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"flushFramebuffer","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"restoreDefaultFramebuffer","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_resetVertexBufferBinding","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"createVertexBuffer","documentation":"","type":"(vertices: number[] | Float32Array) => WebGLBuffer","functionBody":[{"parameters":[{"name":"vertices","documentation":"","type":"number[] | Float32Array"}],"returnType":"WebGLBuffer","documentation":""}],"entryType":"function"},{"name":"createDynamicVertexBuffer","documentation":"","type":"(vertices: number[] | Float32Array) => WebGLBuffer","functionBody":[{"parameters":[{"name":"vertices","documentation":"","type":"number[] | Float32Array"}],"returnType":"WebGLBuffer","documentation":""}],"entryType":"function"},{"name":"updateDynamicVertexBuffer","documentation":"","type":"(vertexBuffer: WebGLBuffer, vertices: number[] | Float32Array, offset?: number, count?: number) =...","functionBody":[{"parameters":[{"name":"vertexBuffer","documentation":"","type":"WebGLBuffer"},{"name":"vertices","documentation":"","type":"number[] | Float32Array"},{"name":"offset","documentation":"","type":"number"},{"name":"count","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_resetIndexBufferBinding","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"createIndexBuffer","documentation":"","type":"(indices: number[] | Int32Array) => WebGLBuffer","functionBody":[{"parameters":[{"name":"indices","documentation":"","type":"number[] | Int32Array"}],"returnType":"WebGLBuffer","documentation":""}],"entryType":"function"},{"name":"bindArrayBuffer","documentation":"","type":"(buffer: WebGLBuffer) => void","functionBody":[{"parameters":[{"name":"buffer","documentation":"","type":"WebGLBuffer"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"bindIndexBuffer","documentation":"","type":"(buffer: any) => any","functionBody":[{"parameters":[{"name":"buffer","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"bindBuffer","documentation":"","type":"(buffer: any, target: any) => any","functionBody":[{"parameters":[{"name":"buffer","documentation":"","type":"any"},{"name":"target","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"updateArrayBuffer","documentation":"","type":"(data: Float32Array) => void","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"Float32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"vertexAttribPointer","documentation":"","type":"(buffer: any, indx: any, size: any, type: any, normalized: any, stride: any, offset: any) => any","functionBody":[{"parameters":[{"name":"buffer","documentation":"","type":"any"},{"name":"indx","documentation":"","type":"any"},{"name":"size","documentation":"","type":"any"},{"name":"type","documentation":"","type":"any"},{"name":"normalized","documentation":"","type":"any"},{"name":"stride","documentation":"","type":"any"},{"name":"offset","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"bindBuffersDirectly","documentation":"","type":"(vertexBuffer: WebGLBuffer, indexBuffer: WebGLBuffer, vertexDeclaration: number[], vertexStrideSi...","functionBody":[{"parameters":[{"name":"vertexBuffer","documentation":"","type":"WebGLBuffer"},{"name":"indexBuffer","documentation":"","type":"WebGLBuffer"},{"name":"vertexDeclaration","documentation":"","type":"number[]"},{"name":"vertexStrideSize","documentation":"","type":"number"},{"name":"effect","documentation":"","type":"Effect"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"bindBuffers","documentation":"","type":"(vertexBuffers: { [key: string]: VertexBuffer; }, indexBuffer: WebGLBuffer, effect: Effect) => void","functionBody":[{"parameters":[{"name":"vertexBuffers","documentation":"","type":"{ [key: string]: VertexBuffer; }"},{"name":"indexBuffer","documentation":"","type":"WebGLBuffer"},{"name":"effect","documentation":"","type":"Effect"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"unbindInstanceAttributes","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_releaseBuffer","documentation":"","type":"(buffer: WebGLBuffer) => boolean","functionBody":[{"parameters":[{"name":"buffer","documentation":"","type":"WebGLBuffer"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"createInstancesBuffer","documentation":"","type":"(capacity: number) => WebGLBuffer","functionBody":[{"parameters":[{"name":"capacity","documentation":"","type":"number"}],"returnType":"WebGLBuffer","documentation":""}],"entryType":"function"},{"name":"deleteInstancesBuffer","documentation":"","type":"(buffer: WebGLBuffer) => void","functionBody":[{"parameters":[{"name":"buffer","documentation":"","type":"WebGLBuffer"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateAndBindInstancesBuffer","documentation":"","type":"(instancesBuffer: WebGLBuffer, data: Float32Array, offsetLocations: number[] | InstancingAttribut...","functionBody":[{"parameters":[{"name":"instancesBuffer","documentation":"","type":"WebGLBuffer"},{"name":"data","documentation":"","type":"Float32Array"},{"name":"offsetLocations","documentation":"","type":"number[] | InstancingAttributeInfo[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"applyStates","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"draw","documentation":"","type":"(useTriangles: boolean, indexStart: number, indexCount: number, instancesCount?: number) => void","functionBody":[{"parameters":[{"name":"useTriangles","documentation":"","type":"boolean"},{"name":"indexStart","documentation":"","type":"number"},{"name":"indexCount","documentation":"","type":"number"},{"name":"instancesCount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"drawPointClouds","documentation":"","type":"(verticesStart: number, verticesCount: number, instancesCount?: number) => void","functionBody":[{"parameters":[{"name":"verticesStart","documentation":"","type":"number"},{"name":"verticesCount","documentation":"","type":"number"},{"name":"instancesCount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"drawUnIndexed","documentation":"","type":"(useTriangles: boolean, verticesStart: number, verticesCount: number, instancesCount?: number) =>...","functionBody":[{"parameters":[{"name":"useTriangles","documentation":"","type":"boolean"},{"name":"verticesStart","documentation":"","type":"number"},{"name":"verticesCount","documentation":"","type":"number"},{"name":"instancesCount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_releaseEffect","documentation":"","type":"(effect: Effect) => void","functionBody":[{"parameters":[{"name":"effect","documentation":"","type":"Effect"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createEffect","documentation":"","type":"(baseName: any, attributesNames: string[], uniformsNames: string[], samplers: string[], defines: ...","functionBody":[{"parameters":[{"name":"baseName","documentation":"","type":"any"},{"name":"attributesNames","documentation":"","type":"string[]"},{"name":"uniformsNames","documentation":"","type":"string[]"},{"name":"samplers","documentation":"","type":"string[]"},{"name":"defines","documentation":"","type":"string"},{"name":"fallbacks","documentation":"","type":"EffectFallbacks"},{"name":"onCompiled","documentation":"","type":"(effect: Effect) => void"},{"name":"onError","documentation":"","type":"(effect: Effect, errors: string) => void"},{"name":"indexParameters","documentation":"","type":"any"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"createEffectForParticles","documentation":"","type":"(fragmentName: string, uniformsNames?: string[], samplers?: string[], defines?: string, fallbacks...","functionBody":[{"parameters":[{"name":"fragmentName","documentation":"","type":"string"},{"name":"uniformsNames","documentation":"","type":"string[]"},{"name":"samplers","documentation":"","type":"string[]"},{"name":"defines","documentation":"","type":"string"},{"name":"fallbacks","documentation":"","type":"EffectFallbacks"},{"name":"onCompiled","documentation":"","type":"(effect: Effect) => void"},{"name":"onError","documentation":"","type":"(effect: Effect, errors: string) => void"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"createShaderProgram","documentation":"","type":"(vertexCode: string, fragmentCode: string, defines: string, context?: WebGLRenderingContext) => W...","functionBody":[{"parameters":[{"name":"vertexCode","documentation":"","type":"string"},{"name":"fragmentCode","documentation":"","type":"string"},{"name":"defines","documentation":"","type":"string"},{"name":"context","documentation":"","type":"WebGLRenderingContext"}],"returnType":"WebGLProgram","documentation":""}],"entryType":"function"},{"name":"getUniforms","documentation":"","type":"(shaderProgram: WebGLProgram, uniformsNames: string[]) => WebGLUniformLocation[]","functionBody":[{"parameters":[{"name":"shaderProgram","documentation":"","type":"WebGLProgram"},{"name":"uniformsNames","documentation":"","type":"string[]"}],"returnType":"WebGLUniformLocation[]","documentation":""}],"entryType":"function"},{"name":"getAttributes","documentation":"","type":"(shaderProgram: WebGLProgram, attributesNames: string[]) => number[]","functionBody":[{"parameters":[{"name":"shaderProgram","documentation":"","type":"WebGLProgram"},{"name":"attributesNames","documentation":"","type":"string[]"}],"returnType":"number[]","documentation":""}],"entryType":"function"},{"name":"enableEffect","documentation":"","type":"(effect: Effect) => void","functionBody":[{"parameters":[{"name":"effect","documentation":"","type":"Effect"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setIntArray","documentation":"","type":"(uniform: WebGLUniformLocation, array: Int32Array) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"array","documentation":"","type":"Int32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setIntArray2","documentation":"","type":"(uniform: WebGLUniformLocation, array: Int32Array) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"array","documentation":"","type":"Int32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setIntArray3","documentation":"","type":"(uniform: WebGLUniformLocation, array: Int32Array) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"array","documentation":"","type":"Int32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setIntArray4","documentation":"","type":"(uniform: WebGLUniformLocation, array: Int32Array) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"array","documentation":"","type":"Int32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setFloatArray","documentation":"","type":"(uniform: WebGLUniformLocation, array: Float32Array) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"array","documentation":"","type":"Float32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setFloatArray2","documentation":"","type":"(uniform: WebGLUniformLocation, array: Float32Array) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"array","documentation":"","type":"Float32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setFloatArray3","documentation":"","type":"(uniform: WebGLUniformLocation, array: Float32Array) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"array","documentation":"","type":"Float32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setFloatArray4","documentation":"","type":"(uniform: WebGLUniformLocation, array: Float32Array) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"array","documentation":"","type":"Float32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setArray","documentation":"","type":"(uniform: WebGLUniformLocation, array: number[]) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"array","documentation":"","type":"number[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setArray2","documentation":"","type":"(uniform: WebGLUniformLocation, array: number[]) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"array","documentation":"","type":"number[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setArray3","documentation":"","type":"(uniform: WebGLUniformLocation, array: number[]) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"array","documentation":"","type":"number[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setArray4","documentation":"","type":"(uniform: WebGLUniformLocation, array: number[]) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"array","documentation":"","type":"number[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setMatrices","documentation":"","type":"(uniform: WebGLUniformLocation, matrices: Float32Array) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"matrices","documentation":"","type":"Float32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setMatrix","documentation":"","type":"(uniform: WebGLUniformLocation, matrix: Matrix) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setMatrix3x3","documentation":"","type":"(uniform: WebGLUniformLocation, matrix: Float32Array) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"matrix","documentation":"","type":"Float32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setMatrix2x2","documentation":"","type":"(uniform: WebGLUniformLocation, matrix: Float32Array) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"matrix","documentation":"","type":"Float32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setFloat","documentation":"","type":"(uniform: WebGLUniformLocation, value: number) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"value","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setFloat2","documentation":"","type":"(uniform: WebGLUniformLocation, x: number, y: number) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setFloat3","documentation":"","type":"(uniform: WebGLUniformLocation, x: number, y: number, z: number) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setBool","documentation":"","type":"(uniform: WebGLUniformLocation, bool: number) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"bool","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setFloat4","documentation":"","type":"(uniform: WebGLUniformLocation, x: number, y: number, z: number, w: number) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"w","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setColor3","documentation":"","type":"(uniform: WebGLUniformLocation, color3: Color3) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"color3","documentation":"","type":"Color3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setColor4","documentation":"","type":"(uniform: WebGLUniformLocation, color3: Color3, alpha: number) => void","functionBody":[{"parameters":[{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"color3","documentation":"","type":"Color3"},{"name":"alpha","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setState","documentation":"","type":"(culling: boolean, zOffset?: number, force?: boolean, reverseSide?: boolean) => void","functionBody":[{"parameters":[{"name":"culling","documentation":"","type":"boolean"},{"name":"zOffset","documentation":"","type":"number"},{"name":"force","documentation":"","type":"boolean"},{"name":"reverseSide","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setDepthBuffer","documentation":"","type":"(enable: boolean) => void","functionBody":[{"parameters":[{"name":"enable","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getDepthWrite","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"setDepthWrite","documentation":"","type":"(enable: boolean) => void","functionBody":[{"parameters":[{"name":"enable","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setColorWrite","documentation":"","type":"(enable: boolean) => void","functionBody":[{"parameters":[{"name":"enable","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setAlphaMode","documentation":"","type":"(mode: number, noDepthWriteChange?: boolean) => void","functionBody":[{"parameters":[{"name":"mode","documentation":"","type":"number"},{"name":"noDepthWriteChange","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getAlphaMode","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"setAlphaTesting","documentation":"","type":"(enable: boolean) => void","functionBody":[{"parameters":[{"name":"enable","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getAlphaTesting","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"wipeCaches","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setSamplingMode","documentation":"","type":"(texture: WebGLTexture, samplingMode: number) => void","functionBody":[{"parameters":[{"name":"texture","documentation":"","type":"WebGLTexture"},{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createTexture","documentation":"","type":"(url: string, noMipmap: boolean, invertY: boolean, scene: Scene, samplingMode?: number, onLoad?: ...","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"string"},{"name":"noMipmap","documentation":"","type":"boolean"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"scene","documentation":"","type":"Scene"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"onLoad","documentation":"","type":"() => void"},{"name":"onError","documentation":"","type":"() => void"},{"name":"buffer","documentation":"","type":"any"}],"returnType":"WebGLTexture","documentation":""}],"entryType":"function"},{"name":"_getInternalFormat","documentation":"","type":"(format: any) => any","functionBody":[{"parameters":[{"name":"format","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"updateRawTexture","documentation":"","type":"(texture: WebGLTexture, data: ArrayBufferView, format: number, invertY: boolean, compression?: st...","functionBody":[{"parameters":[{"name":"texture","documentation":"","type":"WebGLTexture"},{"name":"data","documentation":"","type":"ArrayBufferView"},{"name":"format","documentation":"","type":"number"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"compression","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createRawTexture","documentation":"","type":"(data: ArrayBufferView, width: number, height: number, format: number, generateMipMaps: boolean, ...","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"ArrayBufferView"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"format","documentation":"","type":"number"},{"name":"generateMipMaps","documentation":"","type":"boolean"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"compression","documentation":"","type":"string"}],"returnType":"WebGLTexture","documentation":""}],"entryType":"function"},{"name":"createDynamicTexture","documentation":"","type":"(width: number, height: number, generateMipMaps: boolean, samplingMode: number) => WebGLTexture","functionBody":[{"parameters":[{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"generateMipMaps","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"WebGLTexture","documentation":""}],"entryType":"function"},{"name":"updateTextureSamplingMode","documentation":"","type":"(samplingMode: number, texture: WebGLTexture) => void","functionBody":[{"parameters":[{"name":"samplingMode","documentation":"","type":"number"},{"name":"texture","documentation":"","type":"WebGLTexture"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateDynamicTexture","documentation":"","type":"(texture: WebGLTexture, canvas: HTMLCanvasElement, invertY: boolean, premulAlpha?: boolean) => void","functionBody":[{"parameters":[{"name":"texture","documentation":"","type":"WebGLTexture"},{"name":"canvas","documentation":"","type":"HTMLCanvasElement"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"premulAlpha","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateVideoTexture","documentation":"","type":"(texture: WebGLTexture, video: HTMLVideoElement, invertY: boolean) => void","functionBody":[{"parameters":[{"name":"texture","documentation":"","type":"WebGLTexture"},{"name":"video","documentation":"","type":"HTMLVideoElement"},{"name":"invertY","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createRenderTargetTexture","documentation":"","type":"(size: any, options: any) => WebGLTexture","functionBody":[{"parameters":[{"name":"size","documentation":"","type":"any"},{"name":"options","documentation":"","type":"any"}],"returnType":"WebGLTexture","documentation":""}],"entryType":"function"},{"name":"createRenderTargetCubeTexture","documentation":"","type":"(size: number, options?: any) => WebGLTexture","functionBody":[{"parameters":[{"name":"size","documentation":"","type":"number"},{"name":"options","documentation":"","type":"any"}],"returnType":"WebGLTexture","documentation":""}],"entryType":"function"},{"name":"createCubeTexture","documentation":"","type":"(rootUrl: string, scene: Scene, files: string[], noMipmap?: boolean) => WebGLTexture","functionBody":[{"parameters":[{"name":"rootUrl","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"files","documentation":"","type":"string[]"},{"name":"noMipmap","documentation":"","type":"boolean"}],"returnType":"WebGLTexture","documentation":""}],"entryType":"function"},{"name":"updateTextureSize","documentation":"","type":"(texture: WebGLTexture, width: number, height: number) => void","functionBody":[{"parameters":[{"name":"texture","documentation":"","type":"WebGLTexture"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createRawCubeTexture","documentation":"","type":"(url: string, scene: Scene, size: number, format: number, type: number, noMipmap: boolean, callba...","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"size","documentation":"","type":"number"},{"name":"format","documentation":"","type":"number"},{"name":"type","documentation":"","type":"number"},{"name":"noMipmap","documentation":"","type":"boolean"},{"name":"callback","documentation":"","type":"(ArrayBuffer: any) => ArrayBufferView[]"},{"name":"mipmmapGenerator","documentation":"","type":"(faces: ArrayBufferView[]) => ArrayBufferView[][]"}],"returnType":"WebGLTexture","documentation":""}],"entryType":"function"},{"name":"_releaseTexture","documentation":"","type":"(texture: WebGLTexture) => void","functionBody":[{"parameters":[{"name":"texture","documentation":"","type":"WebGLTexture"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setProgram","documentation":"","type":"(program: any) => any","functionBody":[{"parameters":[{"name":"program","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"bindSamplers","documentation":"","type":"(effect: Effect) => void","functionBody":[{"parameters":[{"name":"effect","documentation":"","type":"Effect"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"activateTexture","documentation":"","type":"(texture: any) => any","functionBody":[{"parameters":[{"name":"texture","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_bindTextureDirectly","documentation":"","type":"(target: number, texture: WebGLTexture) => void","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"number"},{"name":"texture","documentation":"","type":"WebGLTexture"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_bindTexture","documentation":"","type":"(channel: number, texture: WebGLTexture) => void","functionBody":[{"parameters":[{"name":"channel","documentation":"","type":"number"},{"name":"texture","documentation":"","type":"WebGLTexture"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setTextureFromPostProcess","documentation":"","type":"(channel: number, postProcess: PostProcess) => void","functionBody":[{"parameters":[{"name":"channel","documentation":"","type":"number"},{"name":"postProcess","documentation":"","type":"PostProcess"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"unbindAllTextures","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setTexture","documentation":"","type":"(channel: number, uniform: WebGLUniformLocation, texture: BaseTexture) => void","functionBody":[{"parameters":[{"name":"channel","documentation":"","type":"number"},{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"texture","documentation":"","type":"BaseTexture"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_setTexture","documentation":"","type":"(channel: any, texture: any) => any","functionBody":[{"parameters":[{"name":"channel","documentation":"","type":"any"},{"name":"texture","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setTextureArray","documentation":"","type":"(channel: number, uniform: WebGLUniformLocation, textures: BaseTexture[]) => void","functionBody":[{"parameters":[{"name":"channel","documentation":"","type":"number"},{"name":"uniform","documentation":"","type":"WebGLUniformLocation"},{"name":"textures","documentation":"","type":"BaseTexture[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_setAnisotropicLevel","documentation":"","type":"(key: number, texture: BaseTexture) => void","functionBody":[{"parameters":[{"name":"key","documentation":"","type":"number"},{"name":"texture","documentation":"","type":"BaseTexture"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"readPixels","documentation":"","type":"(x: number, y: number, width: number, height: number) => Uint8Array","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"}],"returnType":"Uint8Array","documentation":""}],"entryType":"function"},{"name":"addExternalData","documentation":"Add an externaly attached data from its key.\nThis method call will fail and return false, if such key already exists.\nIf you don't care and just want to get the data no matter what, use the more convenient getOrAddExternalDataWithFactory() method.\n@return true if no such key were already present and the data was added successfully, false otherwise","type":"<T>(key: string, data: T) => boolean","functionBody":[{"parameters":[{"name":"key","documentation":"the unique key that identifies the data","type":"string"},{"name":"data","documentation":"the data object to associate to the key for this Engine instance","type":"T"}],"returnType":"boolean","documentation":"Add an externaly attached data from its key.\nThis method call will fail and return false, if such key already exists.\nIf you don't care and just want to get the data no matter what, use the more convenient getOrAddExternalDataWithFactory() method.\n@return true if no such key were already present and the data was added successfully, false otherwise"}],"entryType":"function"},{"name":"getExternalData","documentation":"Get an externaly attached data from its key\n@return the associated data, if present (can be null), or undefined if not present","type":"<T>(key: string) => T","functionBody":[{"parameters":[{"name":"key","documentation":"the unique key that identifies the data","type":"string"}],"returnType":"T","documentation":"Get an externaly attached data from its key\n@return the associated data, if present (can be null), or undefined if not present"}],"entryType":"function"},{"name":"getOrAddExternalDataWithFactory","documentation":"Get an externaly attached data from its key, create it using a factory if it's not already present\n@return the associated data, can be null if the factory returned null.","type":"<T>(key: string, factory: (k: string) => T) => T","functionBody":[{"parameters":[{"name":"key","documentation":"the unique key that identifies the data","type":"string"},{"name":"factory","documentation":"the factory that will be called to create the instance if and only if it doesn't exists","type":"(k: string) => T"}],"returnType":"T","documentation":"Get an externaly attached data from its key, create it using a factory if it's not already present\n@return the associated data, can be null if the factory returned null."}],"entryType":"function"},{"name":"removeExternalData","documentation":"Remove an externaly attached data from the Engine instance\n@return true if the data was successfully removed, false if it doesn't exist","type":"(key: any) => boolean","functionBody":[{"parameters":[{"name":"key","documentation":"the unique key that identifies the data","type":"any"}],"returnType":"boolean","documentation":"Remove an externaly attached data from the Engine instance\n@return true if the data was successfully removed, false if it doesn't exist"}],"entryType":"function"},{"name":"releaseInternalTexture","documentation":"","type":"(texture: WebGLTexture) => void","functionBody":[{"parameters":[{"name":"texture","documentation":"","type":"WebGLTexture"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"displayLoadingUI","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"hideLoadingUI","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"attachContextLostEvent","documentation":"","type":"(callback: (event: WebGLContextEvent) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(event: WebGLContextEvent) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"attachContextRestoredEvent","documentation":"","type":"(callback: (event: WebGLContextEvent) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(event: WebGLContextEvent) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getFps","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getDeltaTime","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"_measureFps","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_canRenderToFloatTexture","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_canRenderToHalfFloatTexture","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_canRenderToTextureOfType","documentation":"","type":"(format: any, extension: any) => any","functionBody":[{"parameters":[{"name":"format","documentation":"","type":"any"},{"name":"extension","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"isSupported","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"_ALPHA_DISABLE","documentation":"","type":"any","entryType":"property"},{"name":"_ALPHA_ADD","documentation":"","type":"any","entryType":"property"},{"name":"_ALPHA_COMBINE","documentation":"","type":"any","entryType":"property"},{"name":"_ALPHA_SUBTRACT","documentation":"","type":"any","entryType":"property"},{"name":"_ALPHA_MULTIPLY","documentation":"","type":"any","entryType":"property"},{"name":"_ALPHA_MAXIMIZED","documentation":"","type":"any","entryType":"property"},{"name":"_ALPHA_ONEONE","documentation":"","type":"any","entryType":"property"},{"name":"_DELAYLOADSTATE_NONE","documentation":"","type":"any","entryType":"property"},{"name":"_DELAYLOADSTATE_LOADED","documentation":"","type":"any","entryType":"property"},{"name":"_DELAYLOADSTATE_LOADING","documentation":"","type":"any","entryType":"property"},{"name":"_DELAYLOADSTATE_NOTLOADED","documentation":"","type":"any","entryType":"property"},{"name":"_TEXTUREFORMAT_ALPHA","documentation":"","type":"any","entryType":"property"},{"name":"_TEXTUREFORMAT_LUMINANCE","documentation":"","type":"any","entryType":"property"},{"name":"_TEXTUREFORMAT_LUMINANCE_ALPHA","documentation":"","type":"any","entryType":"property"},{"name":"_TEXTUREFORMAT_RGB","documentation":"","type":"any","entryType":"property"},{"name":"_TEXTUREFORMAT_RGBA","documentation":"","type":"any","entryType":"property"},{"name":"_TEXTURETYPE_UNSIGNED_INT","documentation":"","type":"any","entryType":"property"},{"name":"_TEXTURETYPE_FLOAT","documentation":"","type":"any","entryType":"property"},{"name":"_TEXTURETYPE_HALF_FLOAT","documentation":"","type":"any","entryType":"property"},{"name":"_NEVER","documentation":"","type":"any","entryType":"property"},{"name":"_ALWAYS","documentation":"","type":"any","entryType":"property"},{"name":"_LESS","documentation":"","type":"any","entryType":"property"},{"name":"_EQUAL","documentation":"","type":"any","entryType":"property"},{"name":"_LEQUAL","documentation":"","type":"any","entryType":"property"},{"name":"_GREATER","documentation":"","type":"any","entryType":"property"},{"name":"_GEQUAL","documentation":"","type":"any","entryType":"property"},{"name":"_NOTEQUAL","documentation":"","type":"any","entryType":"property"},{"name":"NEVER","documentation":"","type":"number","entryType":"property"},{"name":"ALWAYS","documentation":"","type":"number","entryType":"property"},{"name":"LESS","documentation":"","type":"number","entryType":"property"},{"name":"EQUAL","documentation":"","type":"number","entryType":"property"},{"name":"LEQUAL","documentation":"","type":"number","entryType":"property"},{"name":"GREATER","documentation":"","type":"number","entryType":"property"},{"name":"GEQUAL","documentation":"","type":"number","entryType":"property"},{"name":"NOTEQUAL","documentation":"","type":"number","entryType":"property"},{"name":"_KEEP","documentation":"","type":"any","entryType":"property"},{"name":"_REPLACE","documentation":"","type":"any","entryType":"property"},{"name":"_INCR","documentation":"","type":"any","entryType":"property"},{"name":"_DECR","documentation":"","type":"any","entryType":"property"},{"name":"_INVERT","documentation":"","type":"any","entryType":"property"},{"name":"_INCR_WRAP","documentation":"","type":"any","entryType":"property"},{"name":"_DECR_WRAP","documentation":"","type":"any","entryType":"property"},{"name":"KEEP","documentation":"","type":"number","entryType":"property"},{"name":"REPLACE","documentation":"","type":"number","entryType":"property"},{"name":"INCR","documentation":"","type":"number","entryType":"property"},{"name":"DECR","documentation":"","type":"number","entryType":"property"},{"name":"INVERT","documentation":"","type":"number","entryType":"property"},{"name":"INCR_WRAP","documentation":"","type":"number","entryType":"property"},{"name":"DECR_WRAP","documentation":"","type":"number","entryType":"property"},{"name":"ALPHA_DISABLE","documentation":"","type":"number","entryType":"property"},{"name":"ALPHA_ONEONE","documentation":"","type":"number","entryType":"property"},{"name":"ALPHA_ADD","documentation":"","type":"number","entryType":"property"},{"name":"ALPHA_COMBINE","documentation":"","type":"number","entryType":"property"},{"name":"ALPHA_SUBTRACT","documentation":"","type":"number","entryType":"property"},{"name":"ALPHA_MULTIPLY","documentation":"","type":"number","entryType":"property"},{"name":"ALPHA_MAXIMIZED","documentation":"","type":"number","entryType":"property"},{"name":"DELAYLOADSTATE_NONE","documentation":"","type":"number","entryType":"property"},{"name":"DELAYLOADSTATE_LOADED","documentation":"","type":"number","entryType":"property"},{"name":"DELAYLOADSTATE_LOADING","documentation":"","type":"number","entryType":"property"},{"name":"DELAYLOADSTATE_NOTLOADED","documentation":"","type":"number","entryType":"property"},{"name":"TEXTUREFORMAT_ALPHA","documentation":"","type":"number","entryType":"property"},{"name":"TEXTUREFORMAT_LUMINANCE","documentation":"","type":"number","entryType":"property"},{"name":"TEXTUREFORMAT_LUMINANCE_ALPHA","documentation":"","type":"number","entryType":"property"},{"name":"TEXTUREFORMAT_RGB","documentation":"","type":"number","entryType":"property"},{"name":"TEXTUREFORMAT_RGBA","documentation":"","type":"number","entryType":"property"},{"name":"TEXTURETYPE_UNSIGNED_INT","documentation":"","type":"number","entryType":"property"},{"name":"TEXTURETYPE_FLOAT","documentation":"","type":"number","entryType":"property"},{"name":"TEXTURETYPE_HALF_FLOAT","documentation":"","type":"number","entryType":"property"},{"name":"Version","documentation":"","type":"string","entryType":"property"},{"name":"CollisionsEpsilon","documentation":"","type":"number","entryType":"property"},{"name":"CodeRepository","documentation":"","type":"string","entryType":"property"},{"name":"ShadersRepository","documentation":"","type":"string","entryType":"property"},{"name":"isFullscreen","documentation":"","type":"boolean","entryType":"property"},{"name":"isPointerLock","documentation":"","type":"boolean","entryType":"property"},{"name":"cullBackFaces","documentation":"","type":"boolean","entryType":"property"},{"name":"renderEvenInBackground","documentation":"","type":"boolean","entryType":"property"},{"name":"enableOfflineSupport","documentation":"","type":"boolean","entryType":"property"},{"name":"scenes","documentation":"","type":"Scene[]","entryType":"property"},{"name":"vrDisplaysPromise","documentation":"","type":"any","entryType":"property"},{"name":"_vrDisplays","documentation":"","type":"any","entryType":"property"},{"name":"_vrDisplayEnabled","documentation":"","type":"any","entryType":"property"},{"name":"_oldSize","documentation":"","type":"any","entryType":"property"},{"name":"_oldHardwareScaleFactor","documentation":"","type":"any","entryType":"property"},{"name":"_vrAnimationFrameHandler","documentation":"","type":"any","entryType":"property"},{"name":"_gl","documentation":"","type":"WebGLRenderingContext","entryType":"property"},{"name":"_renderingCanvas","documentation":"","type":"any","entryType":"property"},{"name":"_windowIsBackground","documentation":"","type":"any","entryType":"property"},{"name":"_webGLVersion","documentation":"","type":"any","entryType":"property"},{"name":"audioEngine","documentation":"","type":"AudioEngine","entryType":"property"},{"name":"_onBlur","documentation":"","type":"any","entryType":"property"},{"name":"_onFocus","documentation":"","type":"any","entryType":"property"},{"name":"_onFullscreenChange","documentation":"","type":"any","entryType":"property"},{"name":"_onPointerLockChange","documentation":"","type":"any","entryType":"property"},{"name":"_hardwareScalingLevel","documentation":"","type":"any","entryType":"property"},{"name":"_caps","documentation":"","type":"any","entryType":"property"},{"name":"_pointerLockRequested","documentation":"","type":"any","entryType":"property"},{"name":"_alphaTest","documentation":"","type":"any","entryType":"property"},{"name":"_isStencilEnable","documentation":"","type":"any","entryType":"property"},{"name":"_loadingScreen","documentation":"","type":"any","entryType":"property"},{"name":"_drawCalls","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"_glVersion","documentation":"","type":"any","entryType":"property"},{"name":"_glRenderer","documentation":"","type":"any","entryType":"property"},{"name":"_glVendor","documentation":"","type":"any","entryType":"property"},{"name":"_videoTextureSupported","documentation":"","type":"any","entryType":"property"},{"name":"_renderingQueueLaunched","documentation":"","type":"any","entryType":"property"},{"name":"_activeRenderLoops","documentation":"","type":"any","entryType":"property"},{"name":"fpsRange","documentation":"","type":"any","entryType":"property"},{"name":"previousFramesDuration","documentation":"","type":"any","entryType":"property"},{"name":"fps","documentation":"","type":"any","entryType":"property"},{"name":"deltaTime","documentation":"","type":"any","entryType":"property"},{"name":"_depthCullingState","documentation":"","type":"any","entryType":"property"},{"name":"_stencilState","documentation":"","type":"any","entryType":"property"},{"name":"_alphaState","documentation":"","type":"any","entryType":"property"},{"name":"_alphaMode","documentation":"","type":"any","entryType":"property"},{"name":"_loadedTexturesCache","documentation":"","type":"any","entryType":"property"},{"name":"_maxTextureChannels","documentation":"","type":"any","entryType":"property"},{"name":"_activeTexture","documentation":"","type":"any","entryType":"property"},{"name":"_activeTexturesCache","documentation":"","type":"any","entryType":"property"},{"name":"_currentEffect","documentation":"","type":"any","entryType":"property"},{"name":"_currentProgram","documentation":"","type":"any","entryType":"property"},{"name":"_compiledEffects","documentation":"","type":"any","entryType":"property"},{"name":"_vertexAttribArraysEnabled","documentation":"","type":"any","entryType":"property"},{"name":"_cachedViewport","documentation":"","type":"any","entryType":"property"},{"name":"_cachedVertexBuffers","documentation":"","type":"any","entryType":"property"},{"name":"_cachedIndexBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_cachedEffectForVertexBuffers","documentation":"","type":"any","entryType":"property"},{"name":"_currentRenderTarget","documentation":"","type":"any","entryType":"property"},{"name":"_uintIndicesCurrentlySet","documentation":"","type":"any","entryType":"property"},{"name":"_currentBoundBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_currentFramebuffer","documentation":"","type":"any","entryType":"property"},{"name":"_currentBufferPointers","documentation":"","type":"any","entryType":"property"},{"name":"_currentInstanceLocations","documentation":"","type":"any","entryType":"property"},{"name":"_currentInstanceBuffers","documentation":"","type":"any","entryType":"property"},{"name":"_textureUnits","documentation":"","type":"any","entryType":"property"},{"name":"_workingCanvas","documentation":"","type":"any","entryType":"property"},{"name":"_workingContext","documentation":"","type":"any","entryType":"property"},{"name":"_externalData","documentation":"","type":"any","entryType":"property"},{"name":"_bindedRenderFunction","documentation":"","type":"any","entryType":"property"},{"name":"webGLVersion","documentation":"","type":"string","entryType":"property"},{"name":"isStencilEnable","documentation":"Returns true if the stencil buffer has been enabled through the creation option of the context.","type":"boolean","entryType":"property"},{"name":"drawCalls","documentation":"","type":"number","entryType":"property"},{"name":"drawCallsPerfCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"_onVRFullScreenTriggered","documentation":"","type":"any","entryType":"property"},{"name":"loadingScreen","documentation":"","type":"ILoadingScreen","entryType":"property"},{"name":"loadingUIText","documentation":"","type":"string","entryType":"property"},{"name":"loadingUIBackgroundColor","documentation":"","type":"string","entryType":"property"}]},{"name":"Node","documentation":"Node is the basic class for all scene objects (Mesh, Light Camera).","type":"typeof Node","constructors":[{"parameters":[{"name":"name","documentation":"- the name and id to be given to this node","type":"string"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Node","documentation":"@constructor"}],"entryType":"class","functions":[{"name":"getScene","documentation":"","type":"() => Scene","functionBody":[{"parameters":[],"returnType":"Scene","documentation":""}],"entryType":"function"},{"name":"getEngine","documentation":"","type":"() => Engine","functionBody":[{"parameters":[],"returnType":"Engine","documentation":""}],"entryType":"function"},{"name":"getWorldMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"_initCache","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateCache","documentation":"","type":"(force?: boolean) => void","functionBody":[{"parameters":[{"name":"force","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateCache","documentation":"","type":"(ignoreParentClass?: boolean) => void","functionBody":[{"parameters":[{"name":"ignoreParentClass","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_isSynchronized","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_markSyncedWithParent","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isSynchronizedWithParent","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"isSynchronized","documentation":"","type":"(updateCache?: boolean) => boolean","functionBody":[{"parameters":[{"name":"updateCache","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"hasNewParent","documentation":"","type":"(update?: boolean) => boolean","functionBody":[{"parameters":[{"name":"update","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"Is this node ready to be used/rendered\n@return {boolean} is it ready","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Is this node ready to be used/rendered\n@return {boolean} is it ready"}],"entryType":"function"},{"name":"isEnabled","documentation":"Is this node enabled.\nIf the node has a parent and is enabled, the parent will be inspected as well.\n@return {boolean} whether this node (and its parent) is enabled.\n@see setEnabled","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Is this node enabled.\nIf the node has a parent and is enabled, the parent will be inspected as well.\n@return {boolean} whether this node (and its parent) is enabled.\n@see setEnabled"}],"entryType":"function"},{"name":"setEnabled","documentation":"Set the enabled state of this node.\n@see isEnabled","type":"(value: boolean) => void","functionBody":[{"parameters":[{"name":"value","documentation":"- the new enabled state","type":"boolean"}],"returnType":"void","documentation":"Set the enabled state of this node.\n@see isEnabled"}],"entryType":"function"},{"name":"isDescendantOf","documentation":"Is this node a descendant of the given node.\nThe function will iterate up the hierarchy until the ancestor was found or no more parents defined.\n@see parent","type":"(ancestor: Node) => boolean","functionBody":[{"parameters":[{"name":"ancestor","documentation":"- The parent node to inspect","type":"Node"}],"returnType":"boolean","documentation":"Is this node a descendant of the given node.\nThe function will iterate up the hierarchy until the ancestor was found or no more parents defined.\n@see parent"}],"entryType":"function"},{"name":"_getDescendants","documentation":"Evaluate the list of children and determine if they should be considered as descendants considering the given criterias","type":"(results: Node[], directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean) => void","functionBody":[{"parameters":[{"name":"results","documentation":"the result array containing the nodes matching the given criterias","type":"Node[]"},{"name":"directDescendantsOnly","documentation":"if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered.","type":"boolean"},{"name":"predicate","documentation":"","type":"(node: Node) => boolean"}],"returnType":"void","documentation":"Evaluate the list of children and determine if they should be considered as descendants considering the given criterias"}],"entryType":"function"},{"name":"getDescendants","documentation":"Will return all nodes that have this node as ascendant.\n@return {BABYLON.Node[]} all children nodes of all types.","type":"(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean) => Node[]","functionBody":[{"parameters":[{"name":"directDescendantsOnly","documentation":"if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered.","type":"boolean"},{"name":"predicate","documentation":"","type":"(node: Node) => boolean"}],"returnType":"Node[]","documentation":"Will return all nodes that have this node as ascendant.\n@return {BABYLON.Node[]} all children nodes of all types."}],"entryType":"function"},{"name":"getChildren","documentation":"@Deprecated, legacy support.\nuse getDecendants instead.","type":"(predicate?: (node: Node) => boolean) => Node[]","functionBody":[{"parameters":[{"name":"predicate","documentation":"","type":"(node: Node) => boolean"}],"returnType":"Node[]","documentation":"@Deprecated, legacy support.\nuse getDecendants instead."}],"entryType":"function"},{"name":"getChildMeshes","documentation":"Get all child-meshes of this node.","type":"(directDecendantsOnly?: boolean, predicate?: (node: Node) => boolean) => AbstractMesh[]","functionBody":[{"parameters":[{"name":"directDecendantsOnly","documentation":"","type":"boolean"},{"name":"predicate","documentation":"","type":"(node: Node) => boolean"}],"returnType":"AbstractMesh[]","documentation":"Get all child-meshes of this node."}],"entryType":"function"},{"name":"_setReady","documentation":"","type":"(state: boolean) => void","functionBody":[{"parameters":[{"name":"state","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getAnimationByName","documentation":"","type":"(name: string) => Animation","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"Animation","documentation":""}],"entryType":"function"},{"name":"createAnimationRange","documentation":"","type":"(name: string, from: number, to: number) => void","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"from","documentation":"","type":"number"},{"name":"to","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"deleteAnimationRange","documentation":"","type":"(name: string, deleteFrames?: boolean) => void","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"deleteFrames","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getAnimationRange","documentation":"","type":"(name: string) => AnimationRange","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"AnimationRange","documentation":""}],"entryType":"function"},{"name":"beginAnimation","documentation":"","type":"(name: string, loop?: boolean, speedRatio?: number, onAnimationEnd?: () => void) => void","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"loop","documentation":"","type":"boolean"},{"name":"speedRatio","documentation":"","type":"number"},{"name":"onAnimationEnd","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serializeAnimationRanges","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"ParseAnimationRanges","documentation":"","type":"(node: Node, parsedNode: any, scene: Scene) => void","functionBody":[{"parameters":[{"name":"node","documentation":"","type":"Node"},{"name":"parsedNode","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"id","documentation":"","type":"string","entryType":"property"},{"name":"uniqueId","documentation":"","type":"number","entryType":"property"},{"name":"state","documentation":"","type":"string","entryType":"property"},{"name":"animations","documentation":"","type":"Animation[]","entryType":"property"},{"name":"_ranges","documentation":"","type":"any","entryType":"property"},{"name":"onReady","documentation":"","type":"(node: Node) => void","entryType":"property"},{"name":"_childrenFlag","documentation":"","type":"any","entryType":"property"},{"name":"_isEnabled","documentation":"","type":"any","entryType":"property"},{"name":"_isReady","documentation":"","type":"any","entryType":"property"},{"name":"_currentRenderId","documentation":"","type":"number","entryType":"property"},{"name":"_parentRenderId","documentation":"","type":"any","entryType":"property"},{"name":"_waitingParentId","documentation":"","type":"string","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_cache","documentation":"","type":"any","entryType":"property"},{"name":"_parentNode","documentation":"","type":"any","entryType":"property"},{"name":"_children","documentation":"","type":"any","entryType":"property"},{"name":"parent","documentation":"","type":"Node","entryType":"property"}]},{"name":"PointerEventTypes","documentation":"","type":"typeof PointerEventTypes","constructors":[{"parameters":[],"returnType":"PointerEventTypes","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"_POINTERDOWN","documentation":"","type":"number","entryType":"property"},{"name":"_POINTERUP","documentation":"","type":"number","entryType":"property"},{"name":"_POINTERMOVE","documentation":"","type":"number","entryType":"property"},{"name":"_POINTERWHEEL","documentation":"","type":"number","entryType":"property"},{"name":"_POINTERPICK","documentation":"","type":"number","entryType":"property"},{"name":"POINTERDOWN","documentation":"","type":"number","entryType":"property"},{"name":"POINTERUP","documentation":"","type":"number","entryType":"property"},{"name":"POINTERMOVE","documentation":"","type":"number","entryType":"property"},{"name":"POINTERWHEEL","documentation":"","type":"number","entryType":"property"},{"name":"POINTERPICK","documentation":"","type":"number","entryType":"property"}]},{"name":"PointerInfoBase","documentation":"","type":"typeof PointerInfoBase","constructors":[{"parameters":[{"name":"type","documentation":"","type":"number"},{"name":"event","documentation":"","type":"PointerEvent | MouseWheelEvent"}],"returnType":"PointerInfoBase","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"type","documentation":"","type":"number","entryType":"property"},{"name":"event","documentation":"","type":"PointerEvent | MouseWheelEvent","entryType":"property"}]},{"name":"PointerInfoPre","documentation":"This class is used to store pointer related info for the onPrePointerObservable event.\nSet the skipOnPointerObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onPointerObservable","type":"typeof PointerInfoPre","constructors":[{"parameters":[{"name":"type","documentation":"","type":"number"},{"name":"event","documentation":"","type":"PointerEvent | MouseWheelEvent"},{"name":"localX","documentation":"","type":"any"},{"name":"localY","documentation":"","type":"any"}],"returnType":"PointerInfoPre","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"localPosition","documentation":"","type":"Vector2","entryType":"property"},{"name":"skipOnPointerObservable","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.PointerInfoBase"]},{"name":"PointerInfo","documentation":"This type contains all the data related to a pointer event in Babylon.js.\nThe event member is an instance of PointerEvent for all types except PointerWheel and is of type MouseWheelEvent when type equals PointerWheel. The different event types can be found in the PointerEventTypes class.","type":"typeof PointerInfo","constructors":[{"parameters":[{"name":"type","documentation":"","type":"number"},{"name":"event","documentation":"","type":"PointerEvent | MouseWheelEvent"},{"name":"pickInfo","documentation":"","type":"PickingInfo"}],"returnType":"PointerInfo","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"pickInfo","documentation":"","type":"PickingInfo","entryType":"property"}],"heritageClauses":["BABYLON.PointerInfoBase"]},{"name":"Scene","documentation":"Represents a scene to be rendered by the engine.\n@see http://doc.babylonjs.com/page.php?p=21911","type":"typeof Scene","constructors":[{"parameters":[{"name":"engine","documentation":"- the engine to be used to render this scene.","type":"Engine"}],"returnType":"Scene","documentation":"@constructor"}],"entryType":"class","functions":[{"name":"getCachedMaterial","documentation":"","type":"() => Material","functionBody":[{"parameters":[],"returnType":"Material","documentation":""}],"entryType":"function"},{"name":"getBoundingBoxRenderer","documentation":"","type":"() => BoundingBoxRenderer","functionBody":[{"parameters":[],"returnType":"BoundingBoxRenderer","documentation":""}],"entryType":"function"},{"name":"getOutlineRenderer","documentation":"","type":"() => OutlineRenderer","functionBody":[{"parameters":[],"returnType":"OutlineRenderer","documentation":""}],"entryType":"function"},{"name":"getEngine","documentation":"","type":"() => Engine","functionBody":[{"parameters":[],"returnType":"Engine","documentation":""}],"entryType":"function"},{"name":"getTotalVertices","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getActiveIndices","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getActiveParticles","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getActiveBones","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getLastFrameDuration","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getEvaluateActiveMeshesDuration","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getActiveMeshes","documentation":"","type":"() => SmartArray<Mesh>","functionBody":[{"parameters":[],"returnType":"SmartArray<Mesh>","documentation":""}],"entryType":"function"},{"name":"getRenderTargetsDuration","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getRenderDuration","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getParticlesDuration","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getSpritesDuration","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getAnimationRatio","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getRenderId","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"incrementRenderId","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updatePointerPosition","documentation":"","type":"(evt: any) => any","functionBody":[{"parameters":[{"name":"evt","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"attachControl","documentation":"Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp","type":"(attachUp?: boolean, attachDown?: boolean, attachMove?: boolean) => void","functionBody":[{"parameters":[{"name":"attachUp","documentation":"defines if you want to attach events to pointerup","type":"boolean"},{"name":"attachDown","documentation":"defines if you want to attach events to pointerdown","type":"boolean"},{"name":"attachMove","documentation":"defines if you want to attach events to pointermove","type":"boolean"}],"returnType":"void","documentation":"Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp"}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"resetCachedMaterial","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"registerBeforeRender","documentation":"","type":"(func: () => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"unregisterBeforeRender","documentation":"","type":"(func: () => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"registerAfterRender","documentation":"","type":"(func: () => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"unregisterAfterRender","documentation":"","type":"(func: () => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_addPendingData","documentation":"","type":"(data: any) => void","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_removePendingData","documentation":"","type":"(data: any) => void","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getWaitingItemsCount","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"executeWhenReady","documentation":"Registers a function to be executed when the scene is ready.","type":"(func: () => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"- the function to be executed.","type":"() => void"}],"returnType":"void","documentation":"Registers a function to be executed when the scene is ready."}],"entryType":"function"},{"name":"_checkIsReady","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"beginAnimation","documentation":"Will start the animation sequence of a given target\n@return {BABYLON.Animatable} the animatable object created for this animation\n@see BABYLON.Animatable\n@see http://doc.babylonjs.com/page.php?p=22081","type":"(target: any, from: number, to: number, loop?: boolean, speedRatio?: number, onAnimationEnd?: () ...","functionBody":[{"parameters":[{"name":"target","documentation":"- the target","type":"any"},{"name":"from","documentation":"- from which frame should animation start","type":"number"},{"name":"to","documentation":"- till which frame should animation run.","type":"number"},{"name":"loop","documentation":"","type":"boolean"},{"name":"speedRatio","documentation":"","type":"number"},{"name":"onAnimationEnd","documentation":"","type":"() => void"},{"name":"animatable","documentation":"","type":"Animatable"}],"returnType":"Animatable","documentation":"Will start the animation sequence of a given target\n@return {BABYLON.Animatable} the animatable object created for this animation\n@see BABYLON.Animatable\n@see http://doc.babylonjs.com/page.php?p=22081"}],"entryType":"function"},{"name":"beginDirectAnimation","documentation":"","type":"(target: any, animations: Animation[], from: number, to: number, loop?: boolean, speedRatio?: num...","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"any"},{"name":"animations","documentation":"","type":"Animation[]"},{"name":"from","documentation":"","type":"number"},{"name":"to","documentation":"","type":"number"},{"name":"loop","documentation":"","type":"boolean"},{"name":"speedRatio","documentation":"","type":"number"},{"name":"onAnimationEnd","documentation":"","type":"() => void"}],"returnType":"Animatable","documentation":""}],"entryType":"function"},{"name":"getAnimatableByTarget","documentation":"","type":"(target: any) => Animatable","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"any"}],"returnType":"Animatable","documentation":""}],"entryType":"function"},{"name":"stopAnimation","documentation":"Will stop the animation of the given target\n@see beginAnimation","type":"(target: any) => void","functionBody":[{"parameters":[{"name":"target","documentation":"- the target","type":"any"}],"returnType":"void","documentation":"Will stop the animation of the given target\n@see beginAnimation"}],"entryType":"function"},{"name":"_animate","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getViewMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getProjectionMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getTransformMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"setTransformMatrix","documentation":"","type":"(view: Matrix, projection: Matrix) => void","functionBody":[{"parameters":[{"name":"view","documentation":"","type":"Matrix"},{"name":"projection","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addMesh","documentation":"","type":"(newMesh: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"newMesh","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"removeMesh","documentation":"","type":"(toRemove: AbstractMesh) => number","functionBody":[{"parameters":[{"name":"toRemove","documentation":"","type":"AbstractMesh"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"removeSkeleton","documentation":"","type":"(toRemove: Skeleton) => number","functionBody":[{"parameters":[{"name":"toRemove","documentation":"","type":"Skeleton"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"removeLight","documentation":"","type":"(toRemove: Light) => number","functionBody":[{"parameters":[{"name":"toRemove","documentation":"","type":"Light"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"removeCamera","documentation":"","type":"(toRemove: Camera) => number","functionBody":[{"parameters":[{"name":"toRemove","documentation":"","type":"Camera"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"addLight","documentation":"","type":"(newLight: Light) => void","functionBody":[{"parameters":[{"name":"newLight","documentation":"","type":"Light"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addCamera","documentation":"","type":"(newCamera: Camera) => void","functionBody":[{"parameters":[{"name":"newCamera","documentation":"","type":"Camera"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"switchActiveCamera","documentation":"Switch active camera","type":"(newCamera: Camera, attachControl?: boolean) => void","functionBody":[{"parameters":[{"name":"newCamera","documentation":"- new active camera","type":"Camera"},{"name":"attachControl","documentation":"- call attachControl for the new active camera (default: true)","type":"boolean"}],"returnType":"void","documentation":"Switch active camera"}],"entryType":"function"},{"name":"setActiveCameraByID","documentation":"sets the active camera of the scene using its ID\n@return {BABYLON.Camera|null} the new active camera or null if none found.\n@see activeCamera","type":"(id: string) => Camera","functionBody":[{"parameters":[{"name":"id","documentation":"- the camera's ID","type":"string"}],"returnType":"Camera","documentation":"sets the active camera of the scene using its ID\n@return {BABYLON.Camera|null} the new active camera or null if none found.\n@see activeCamera"}],"entryType":"function"},{"name":"setActiveCameraByName","documentation":"sets the active camera of the scene using its name\n@return {BABYLON.Camera|null} the new active camera or null if none found.\n@see activeCamera","type":"(name: string) => Camera","functionBody":[{"parameters":[{"name":"name","documentation":"- the camera's name","type":"string"}],"returnType":"Camera","documentation":"sets the active camera of the scene using its name\n@return {BABYLON.Camera|null} the new active camera or null if none found.\n@see activeCamera"}],"entryType":"function"},{"name":"getMaterialByID","documentation":"get a material using its id\n@return {BABYLON.Material|null} the material or null if none found.","type":"(id: string) => Material","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Material","documentation":"get a material using its id\n@return {BABYLON.Material|null} the material or null if none found."}],"entryType":"function"},{"name":"getMaterialByName","documentation":"get a material using its name\n@return {BABYLON.Material|null} the material or null if none found.","type":"(name: string) => Material","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"Material","documentation":"get a material using its name\n@return {BABYLON.Material|null} the material or null if none found."}],"entryType":"function"},{"name":"getLensFlareSystemByName","documentation":"","type":"(name: string) => LensFlareSystem","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"LensFlareSystem","documentation":""}],"entryType":"function"},{"name":"getLensFlareSystemByID","documentation":"","type":"(id: string) => LensFlareSystem","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"LensFlareSystem","documentation":""}],"entryType":"function"},{"name":"getCameraByID","documentation":"","type":"(id: string) => Camera","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Camera","documentation":""}],"entryType":"function"},{"name":"getCameraByUniqueID","documentation":"","type":"(uniqueId: number) => Camera","functionBody":[{"parameters":[{"name":"uniqueId","documentation":"","type":"number"}],"returnType":"Camera","documentation":""}],"entryType":"function"},{"name":"getCameraByName","documentation":"get a camera using its name\n@return {BABYLON.Camera|null} the camera or null if none found.","type":"(name: string) => Camera","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"Camera","documentation":"get a camera using its name\n@return {BABYLON.Camera|null} the camera or null if none found."}],"entryType":"function"},{"name":"getBoneByID","documentation":"get a bone using its id\n@return {BABYLON.Bone|null} the bone or null if not found","type":"(id: string) => Bone","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Bone","documentation":"get a bone using its id\n@return {BABYLON.Bone|null} the bone or null if not found"}],"entryType":"function"},{"name":"getBoneByName","documentation":"get a bone using its id\n@return {BABYLON.Bone|null} the bone or null if not found","type":"(name: string) => Bone","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"Bone","documentation":"get a bone using its id\n@return {BABYLON.Bone|null} the bone or null if not found"}],"entryType":"function"},{"name":"getLightByName","documentation":"get a light node using its name\n@return {BABYLON.Light|null} the light or null if none found.","type":"(name: string) => Light","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"Light","documentation":"get a light node using its name\n@return {BABYLON.Light|null} the light or null if none found."}],"entryType":"function"},{"name":"getLightByID","documentation":"get a light node using its ID\n@return {BABYLON.Light|null} the light or null if none found.","type":"(id: string) => Light","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Light","documentation":"get a light node using its ID\n@return {BABYLON.Light|null} the light or null if none found."}],"entryType":"function"},{"name":"getLightByUniqueID","documentation":"get a light node using its scene-generated unique ID\n@return {BABYLON.Light|null} the light or null if none found.","type":"(uniqueId: number) => Light","functionBody":[{"parameters":[{"name":"uniqueId","documentation":"","type":"number"}],"returnType":"Light","documentation":"get a light node using its scene-generated unique ID\n@return {BABYLON.Light|null} the light or null if none found."}],"entryType":"function"},{"name":"getParticleSystemByID","documentation":"get a particle system by id\n@return {BABYLON.ParticleSystem|null} the corresponding system or null if none found.","type":"(id: string) => ParticleSystem","functionBody":[{"parameters":[{"name":"id","documentation":"{number} the particle system id","type":"string"}],"returnType":"ParticleSystem","documentation":"get a particle system by id\n@return {BABYLON.ParticleSystem|null} the corresponding system or null if none found."}],"entryType":"function"},{"name":"getGeometryByID","documentation":"get a geometry using its ID\n@return {BABYLON.Geometry|null} the geometry or null if none found.","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":"get a geometry using its ID\n@return {BABYLON.Geometry|null} the geometry or null if none found."}],"entryType":"function"},{"name":"pushGeometry","documentation":"add a new geometry to this scene.\n@return {boolean} was the geometry added or not","type":"(geometry: Geometry, force?: boolean) => boolean","functionBody":[{"parameters":[{"name":"geometry","documentation":"- the geometry to be added to the scene.","type":"Geometry"},{"name":"force","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":"add a new geometry to this scene.\n@return {boolean} was the geometry added or not"}],"entryType":"function"},{"name":"removeGeometry","documentation":"Removes an existing geometry\n@return {boolean} was the geometry removed or not","type":"(geometry: Geometry) => boolean","functionBody":[{"parameters":[{"name":"geometry","documentation":"- the geometry to be removed from the scene.","type":"Geometry"}],"returnType":"boolean","documentation":"Removes an existing geometry\n@return {boolean} was the geometry removed or not"}],"entryType":"function"},{"name":"getGeometries","documentation":"","type":"() => Geometry[]","functionBody":[{"parameters":[],"returnType":"Geometry[]","documentation":""}],"entryType":"function"},{"name":"getMeshByID","documentation":"Get the first added mesh found of a given ID\n@return {BABYLON.AbstractMesh|null} the mesh found or null if not found at all.","type":"(id: string) => AbstractMesh","functionBody":[{"parameters":[{"name":"id","documentation":"- the id to search for","type":"string"}],"returnType":"AbstractMesh","documentation":"Get the first added mesh found of a given ID\n@return {BABYLON.AbstractMesh|null} the mesh found or null if not found at all."}],"entryType":"function"},{"name":"getMeshesByID","documentation":"","type":"(id: string) => AbstractMesh[]","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"AbstractMesh[]","documentation":""}],"entryType":"function"},{"name":"getMeshByUniqueID","documentation":"Get a mesh with its auto-generated unique id\n@return {BABYLON.AbstractMesh|null} the mesh found or null if not found at all.","type":"(uniqueId: number) => AbstractMesh","functionBody":[{"parameters":[{"name":"uniqueId","documentation":"- the unique id to search for","type":"number"}],"returnType":"AbstractMesh","documentation":"Get a mesh with its auto-generated unique id\n@return {BABYLON.AbstractMesh|null} the mesh found or null if not found at all."}],"entryType":"function"},{"name":"getLastMeshByID","documentation":"Get a the last added mesh found of a given ID\n@return {BABYLON.AbstractMesh|null} the mesh found or null if not found at all.","type":"(id: string) => AbstractMesh","functionBody":[{"parameters":[{"name":"id","documentation":"- the id to search for","type":"string"}],"returnType":"AbstractMesh","documentation":"Get a the last added mesh found of a given ID\n@return {BABYLON.AbstractMesh|null} the mesh found or null if not found at all."}],"entryType":"function"},{"name":"getLastEntryByID","documentation":"Get a the last added node (Mesh, Camera, Light) found of a given ID\n@return {BABYLON.Node|null} the node found or null if not found at all.","type":"(id: string) => Node","functionBody":[{"parameters":[{"name":"id","documentation":"- the id to search for","type":"string"}],"returnType":"Node","documentation":"Get a the last added node (Mesh, Camera, Light) found of a given ID\n@return {BABYLON.Node|null} the node found or null if not found at all."}],"entryType":"function"},{"name":"getNodeByID","documentation":"","type":"(id: string) => Node","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Node","documentation":""}],"entryType":"function"},{"name":"getNodeByName","documentation":"","type":"(name: string) => Node","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"Node","documentation":""}],"entryType":"function"},{"name":"getMeshByName","documentation":"","type":"(name: string) => AbstractMesh","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"AbstractMesh","documentation":""}],"entryType":"function"},{"name":"getSoundByName","documentation":"","type":"(name: string) => Sound","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"Sound","documentation":""}],"entryType":"function"},{"name":"getLastSkeletonByID","documentation":"","type":"(id: string) => Skeleton","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Skeleton","documentation":""}],"entryType":"function"},{"name":"getSkeletonById","documentation":"","type":"(id: string) => Skeleton","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Skeleton","documentation":""}],"entryType":"function"},{"name":"getSkeletonByName","documentation":"","type":"(name: string) => Skeleton","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"Skeleton","documentation":""}],"entryType":"function"},{"name":"isActiveMesh","documentation":"","type":"(mesh: Mesh) => boolean","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_evaluateSubMesh","documentation":"","type":"(subMesh: any, mesh: any) => any","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"any"},{"name":"mesh","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_isInIntermediateRendering","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_evaluateActiveMeshes","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_activeMesh","documentation":"","type":"(sourceMesh: any, mesh: any) => any","functionBody":[{"parameters":[{"name":"sourceMesh","documentation":"","type":"any"},{"name":"mesh","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"updateTransformMatrix","documentation":"","type":"(force?: boolean) => void","functionBody":[{"parameters":[{"name":"force","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_renderForCamera","documentation":"","type":"(camera: any) => any","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_processSubCameras","documentation":"","type":"(camera: any) => any","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_checkIntersections","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"render","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateAudioParameters","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_disableAudio","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_enableAudio","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_switchAudioModeForHeadphones","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_switchAudioModeForNormalSpeakers","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"enableDepthRenderer","documentation":"","type":"() => DepthRenderer","functionBody":[{"parameters":[],"returnType":"DepthRenderer","documentation":""}],"entryType":"function"},{"name":"disableDepthRenderer","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"freezeMaterials","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"unfreezeMaterials","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"disposeSounds","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getWorldExtends","documentation":"","type":"() => { min: Vector3; max: Vector3; }","functionBody":[{"parameters":[],"returnType":"{ min: Vector3; max: Vector3; }","documentation":""}],"entryType":"function"},{"name":"createOrUpdateSelectionOctree","documentation":"","type":"(maxCapacity?: number, maxDepth?: number) => Octree<AbstractMesh>","functionBody":[{"parameters":[{"name":"maxCapacity","documentation":"","type":"number"},{"name":"maxDepth","documentation":"","type":"number"}],"returnType":"Octree<AbstractMesh>","documentation":""}],"entryType":"function"},{"name":"createPickingRay","documentation":"","type":"(x: number, y: number, world: Matrix, camera: Camera, cameraViewSpace?: boolean) => Ray","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"world","documentation":"","type":"Matrix"},{"name":"camera","documentation":"","type":"Camera"},{"name":"cameraViewSpace","documentation":"","type":"boolean"}],"returnType":"Ray","documentation":""}],"entryType":"function"},{"name":"createPickingRayInCameraSpace","documentation":"","type":"(x: number, y: number, camera: Camera) => Ray","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"camera","documentation":"","type":"Camera"}],"returnType":"Ray","documentation":""}],"entryType":"function"},{"name":"_internalPick","documentation":"","type":"(rayFunction: any, predicate: any, fastCheck?: any) => any","functionBody":[{"parameters":[{"name":"rayFunction","documentation":"","type":"any"},{"name":"predicate","documentation":"","type":"any"},{"name":"fastCheck","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_internalPickSprites","documentation":"","type":"(ray: any, predicate?: any, fastCheck?: any, camera?: any) => any","functionBody":[{"parameters":[{"name":"ray","documentation":"","type":"any"},{"name":"predicate","documentation":"","type":"any"},{"name":"fastCheck","documentation":"","type":"any"},{"name":"camera","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"pick","documentation":"","type":"(x: number, y: number, predicate?: (mesh: AbstractMesh) => boolean, fastCheck?: boolean, camera?:...","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"predicate","documentation":"","type":"(mesh: AbstractMesh) => boolean"},{"name":"fastCheck","documentation":"","type":"boolean"},{"name":"camera","documentation":"","type":"Camera"}],"returnType":"PickingInfo","documentation":""}],"entryType":"function"},{"name":"pickSprite","documentation":"","type":"(x: number, y: number, predicate?: (sprite: Sprite) => boolean, fastCheck?: boolean, camera?: Cam...","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"predicate","documentation":"","type":"(sprite: Sprite) => boolean"},{"name":"fastCheck","documentation":"","type":"boolean"},{"name":"camera","documentation":"","type":"Camera"}],"returnType":"PickingInfo","documentation":""}],"entryType":"function"},{"name":"pickWithRay","documentation":"","type":"(ray: Ray, predicate: (mesh: Mesh) => boolean, fastCheck?: boolean) => PickingInfo","functionBody":[{"parameters":[{"name":"ray","documentation":"","type":"Ray"},{"name":"predicate","documentation":"","type":"(mesh: Mesh) => boolean"},{"name":"fastCheck","documentation":"","type":"boolean"}],"returnType":"PickingInfo","documentation":""}],"entryType":"function"},{"name":"setPointerOverMesh","documentation":"","type":"(mesh: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getPointerOverMesh","documentation":"","type":"() => AbstractMesh","functionBody":[{"parameters":[],"returnType":"AbstractMesh","documentation":""}],"entryType":"function"},{"name":"setPointerOverSprite","documentation":"","type":"(sprite: Sprite) => void","functionBody":[{"parameters":[{"name":"sprite","documentation":"","type":"Sprite"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getPointerOverSprite","documentation":"","type":"() => Sprite","functionBody":[{"parameters":[],"returnType":"Sprite","documentation":""}],"entryType":"function"},{"name":"getPhysicsEngine","documentation":"","type":"() => PhysicsEngine","functionBody":[{"parameters":[],"returnType":"PhysicsEngine","documentation":""}],"entryType":"function"},{"name":"enablePhysics","documentation":"Enables physics to the current scene\n@return {boolean} was the physics engine initialized","type":"(gravity?: Vector3, plugin?: IPhysicsEnginePlugin) => boolean","functionBody":[{"parameters":[{"name":"gravity","documentation":"","type":"Vector3"},{"name":"plugin","documentation":"","type":"IPhysicsEnginePlugin"}],"returnType":"boolean","documentation":"Enables physics to the current scene\n@return {boolean} was the physics engine initialized"}],"entryType":"function"},{"name":"disablePhysicsEngine","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isPhysicsEnabled","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"setGravity","documentation":"Sets the gravity of the physics engine (and NOT of the scene)","type":"(gravity: Vector3) => void","functionBody":[{"parameters":[{"name":"gravity","documentation":"","type":"Vector3"}],"returnType":"void","documentation":"Sets the gravity of the physics engine (and NOT of the scene)"}],"entryType":"function"},{"name":"createCompoundImpostor","documentation":"Legacy support, using the new API\n@Deprecated","type":"(parts: any, options: PhysicsImpostorParameters) => any","functionBody":[{"parameters":[{"name":"parts","documentation":"","type":"any"},{"name":"options","documentation":"","type":"PhysicsImpostorParameters"}],"returnType":"any","documentation":"Legacy support, using the new API\n@Deprecated"}],"entryType":"function"},{"name":"deleteCompoundImpostor","documentation":"","type":"(compound: any) => void","functionBody":[{"parameters":[{"name":"compound","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createDefaultCameraOrLight","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getByTags","documentation":"","type":"(list: any, tagsQuery: any, forEach?: any) => any","functionBody":[{"parameters":[{"name":"list","documentation":"","type":"any"},{"name":"tagsQuery","documentation":"","type":"any"},{"name":"forEach","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getMeshesByTags","documentation":"","type":"(tagsQuery: string, forEach?: (mesh: AbstractMesh) => void) => Mesh[]","functionBody":[{"parameters":[{"name":"tagsQuery","documentation":"","type":"string"},{"name":"forEach","documentation":"","type":"(mesh: AbstractMesh) => void"}],"returnType":"Mesh[]","documentation":""}],"entryType":"function"},{"name":"getCamerasByTags","documentation":"","type":"(tagsQuery: string, forEach?: (camera: Camera) => void) => Camera[]","functionBody":[{"parameters":[{"name":"tagsQuery","documentation":"","type":"string"},{"name":"forEach","documentation":"","type":"(camera: Camera) => void"}],"returnType":"Camera[]","documentation":""}],"entryType":"function"},{"name":"getLightsByTags","documentation":"","type":"(tagsQuery: string, forEach?: (light: Light) => void) => Light[]","functionBody":[{"parameters":[{"name":"tagsQuery","documentation":"","type":"string"},{"name":"forEach","documentation":"","type":"(light: Light) => void"}],"returnType":"Light[]","documentation":""}],"entryType":"function"},{"name":"getMaterialByTags","documentation":"","type":"(tagsQuery: string, forEach?: (material: Material) => void) => Material[]","functionBody":[{"parameters":[{"name":"tagsQuery","documentation":"","type":"string"},{"name":"forEach","documentation":"","type":"(material: Material) => void"}],"returnType":"Material[]","documentation":""}],"entryType":"function"},{"name":"setRenderingOrder","documentation":"Overrides the default sort function applied in the renderging group to prepare the meshes.\nThis allowed control for front to back rendering or reversly depending of the special needs.","type":"(renderingGroupId: number, opaqueSortCompareFn?: (a: SubMesh, b: SubMesh) => number, alphaTestSor...","functionBody":[{"parameters":[{"name":"renderingGroupId","documentation":"The rendering group id corresponding to its index","type":"number"},{"name":"opaqueSortCompareFn","documentation":"The opaque queue comparison function use to sort.","type":"(a: SubMesh, b: SubMesh) => number"},{"name":"alphaTestSortCompareFn","documentation":"The alpha test queue comparison function use to sort.","type":"(a: SubMesh, b: SubMesh) => number"},{"name":"transparentSortCompareFn","documentation":"The transparent queue comparison function use to sort.","type":"(a: SubMesh, b: SubMesh) => number"}],"returnType":"void","documentation":"Overrides the default sort function applied in the renderging group to prepare the meshes.\nThis allowed control for front to back rendering or reversly depending of the special needs."}],"entryType":"function"},{"name":"setRenderingAutoClearDepthStencil","documentation":"Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.","type":"(renderingGroupId: number, autoClearDepthStencil: boolean) => void","functionBody":[{"parameters":[{"name":"renderingGroupId","documentation":"The rendering group id corresponding to its index","type":"number"},{"name":"autoClearDepthStencil","documentation":"Automatically clears depth and stencil between groups if true.","type":"boolean"}],"returnType":"void","documentation":"Specifies whether or not the stencil and depth buffer are cleared between two rendering groups."}],"entryType":"function"}],"properties":[{"name":"_FOGMODE_NONE","documentation":"","type":"any","entryType":"property"},{"name":"_FOGMODE_EXP","documentation":"","type":"any","entryType":"property"},{"name":"_FOGMODE_EXP2","documentation":"","type":"any","entryType":"property"},{"name":"_FOGMODE_LINEAR","documentation":"","type":"any","entryType":"property"},{"name":"MinDeltaTime","documentation":"","type":"number","entryType":"property"},{"name":"MaxDeltaTime","documentation":"","type":"number","entryType":"property"},{"name":"FOGMODE_NONE","documentation":"","type":"number","entryType":"property"},{"name":"FOGMODE_EXP","documentation":"","type":"number","entryType":"property"},{"name":"FOGMODE_EXP2","documentation":"","type":"number","entryType":"property"},{"name":"FOGMODE_LINEAR","documentation":"","type":"number","entryType":"property"},{"name":"autoClear","documentation":"","type":"boolean","entryType":"property"},{"name":"clearColor","documentation":"","type":"any","entryType":"property"},{"name":"ambientColor","documentation":"","type":"Color3","entryType":"property"},{"name":"forceWireframe","documentation":"","type":"boolean","entryType":"property"},{"name":"forcePointsCloud","documentation":"","type":"boolean","entryType":"property"},{"name":"forceShowBoundingBoxes","documentation":"","type":"boolean","entryType":"property"},{"name":"clipPlane","documentation":"","type":"Plane","entryType":"property"},{"name":"animationsEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"constantlyUpdateMeshUnderPointer","documentation":"","type":"boolean","entryType":"property"},{"name":"useRightHandedSystem","documentation":"","type":"boolean","entryType":"property"},{"name":"hoverCursor","documentation":"","type":"string","entryType":"property"},{"name":"onDisposeObservable","documentation":"An event triggered when the scene is disposed.\n@type {BABYLON.Observable}","type":"Observable<Scene>","entryType":"property"},{"name":"_onDisposeObserver","documentation":"","type":"any","entryType":"property"},{"name":"onDispose","documentation":"","type":"() => void","entryType":"property"},{"name":"onBeforeRenderObservable","documentation":"An event triggered before rendering the scene\n@type {BABYLON.Observable}","type":"Observable<Scene>","entryType":"property"},{"name":"_onBeforeRenderObserver","documentation":"","type":"any","entryType":"property"},{"name":"beforeRender","documentation":"","type":"() => void","entryType":"property"},{"name":"onAfterRenderObservable","documentation":"An event triggered after rendering the scene\n@type {BABYLON.Observable}","type":"Observable<Scene>","entryType":"property"},{"name":"_onAfterRenderObserver","documentation":"","type":"any","entryType":"property"},{"name":"afterRender","documentation":"","type":"() => void","entryType":"property"},{"name":"onReadyObservable","documentation":"An event triggered when the scene is ready\n@type {BABYLON.Observable}","type":"Observable<Scene>","entryType":"property"},{"name":"onBeforeCameraRenderObservable","documentation":"An event triggered before rendering a camera\n@type {BABYLON.Observable}","type":"Observable<Camera>","entryType":"property"},{"name":"_onBeforeCameraRenderObserver","documentation":"","type":"any","entryType":"property"},{"name":"beforeCameraRender","documentation":"","type":"() => void","entryType":"property"},{"name":"onAfterCameraRenderObservable","documentation":"An event triggered after rendering a camera\n@type {BABYLON.Observable}","type":"Observable<Camera>","entryType":"property"},{"name":"_onAfterCameraRenderObserver","documentation":"","type":"any","entryType":"property"},{"name":"afterCameraRender","documentation":"","type":"() => void","entryType":"property"},{"name":"onNewCameraAddedObservable","documentation":"An event triggered when a camera is created\n@type {BABYLON.Observable}","type":"Observable<Camera>","entryType":"property"},{"name":"onCameraRemovedObservable","documentation":"An event triggered when a camera is removed\n@type {BABYLON.Observable}","type":"Observable<Camera>","entryType":"property"},{"name":"onNewLightAddedObservable","documentation":"An event triggered when a light is created\n@type {BABYLON.Observable}","type":"Observable<Light>","entryType":"property"},{"name":"onLightRemovedObservable","documentation":"An event triggered when a light is removed\n@type {BABYLON.Observable}","type":"Observable<Light>","entryType":"property"},{"name":"onNewGeometryAddedObservable","documentation":"An event triggered when a geometry is created\n@type {BABYLON.Observable}","type":"Observable<Geometry>","entryType":"property"},{"name":"onGeometryRemovedObservable","documentation":"An event triggered when a geometry is removed\n@type {BABYLON.Observable}","type":"Observable<Geometry>","entryType":"property"},{"name":"onNewMeshAddedObservable","documentation":"An event triggered when a mesh is created\n@type {BABYLON.Observable}","type":"Observable<AbstractMesh>","entryType":"property"},{"name":"onMeshRemovedObservable","documentation":"An event triggered when a mesh is removed\n@type {BABYLON.Observable}","type":"Observable<AbstractMesh>","entryType":"property"},{"name":"animations","documentation":"","type":"Animation[]","entryType":"property"},{"name":"pointerDownPredicate","documentation":"","type":"(Mesh: AbstractMesh) => boolean","entryType":"property"},{"name":"pointerUpPredicate","documentation":"","type":"(Mesh: AbstractMesh) => boolean","entryType":"property"},{"name":"pointerMovePredicate","documentation":"","type":"(Mesh: AbstractMesh) => boolean","entryType":"property"},{"name":"_onPointerMove","documentation":"","type":"any","entryType":"property"},{"name":"_onPointerDown","documentation":"","type":"any","entryType":"property"},{"name":"_onPointerUp","documentation":"","type":"any","entryType":"property"},{"name":"onPointerMove","documentation":"@deprecated Use onPointerObservable instead","type":"(evt: PointerEvent, pickInfo: PickingInfo) => void","entryType":"property"},{"name":"onPointerDown","documentation":"@deprecated Use onPointerObservable instead","type":"(evt: PointerEvent, pickInfo: PickingInfo) => void","entryType":"property"},{"name":"onPointerUp","documentation":"@deprecated Use onPointerObservable instead","type":"(evt: PointerEvent, pickInfo: PickingInfo) => void","entryType":"property"},{"name":"onPointerPick","documentation":"@deprecated Use onPointerObservable instead","type":"(evt: PointerEvent, pickInfo: PickingInfo) => void","entryType":"property"},{"name":"onPrePointerObservable","documentation":"This observable event is triggered when any mouse event registered during Scene.attach() is called BEFORE the 3D engine to process anything (mesh/sprite picking for instance).\nYou have the possibility to skip the 3D Engine process and the call to onPointerObservable by setting PointerInfoBase.skipOnPointerObservable to true","type":"Observable<PointerInfoPre>","entryType":"property"},{"name":"onPointerObservable","documentation":"Observable event triggered each time an input event is received from the rendering canvas","type":"Observable<PointerInfo>","entryType":"property"},{"name":"unTranslatedPointer","documentation":"","type":"Vector2","entryType":"property"},{"name":"cameraToUseForPointers","documentation":"","type":"Camera","entryType":"property"},{"name":"_pointerX","documentation":"","type":"any","entryType":"property"},{"name":"_pointerY","documentation":"","type":"any","entryType":"property"},{"name":"_unTranslatedPointerX","documentation":"","type":"any","entryType":"property"},{"name":"_unTranslatedPointerY","documentation":"","type":"any","entryType":"property"},{"name":"_startingPointerPosition","documentation":"","type":"any","entryType":"property"},{"name":"_startingPointerTime","documentation":"","type":"any","entryType":"property"},{"name":"_mirroredCameraPosition","documentation":"","type":"Vector3","entryType":"property"},{"name":"_onKeyDown","documentation":"","type":"any","entryType":"property"},{"name":"_onKeyUp","documentation":"","type":"any","entryType":"property"},{"name":"fogEnabled","documentation":"is fog enabled on this scene.\n@type {boolean}","type":"boolean","entryType":"property"},{"name":"fogMode","documentation":"","type":"number","entryType":"property"},{"name":"fogColor","documentation":"","type":"Color3","entryType":"property"},{"name":"fogDensity","documentation":"","type":"number","entryType":"property"},{"name":"fogStart","documentation":"","type":"number","entryType":"property"},{"name":"fogEnd","documentation":"","type":"number","entryType":"property"},{"name":"shadowsEnabled","documentation":"is shadow enabled on this scene.\n@type {boolean}","type":"boolean","entryType":"property"},{"name":"lightsEnabled","documentation":"is light enabled on this scene.\n@type {boolean}","type":"boolean","entryType":"property"},{"name":"lights","documentation":"All of the lights added to this scene.\n@see BABYLON.Light\n@type {BABYLON.Light[]}","type":"Light[]","entryType":"property"},{"name":"cameras","documentation":"All of the cameras added to this scene.\n@see BABYLON.Camera\n@type {BABYLON.Camera[]}","type":"Camera[]","entryType":"property"},{"name":"activeCameras","documentation":"","type":"Camera[]","entryType":"property"},{"name":"activeCamera","documentation":"","type":"Camera","entryType":"property"},{"name":"meshes","documentation":"All of the (abstract) meshes added to this scene.\n@see BABYLON.AbstractMesh\n@type {BABYLON.AbstractMesh[]}","type":"AbstractMesh[]","entryType":"property"},{"name":"_geometries","documentation":"","type":"any","entryType":"property"},{"name":"materials","documentation":"","type":"Material[]","entryType":"property"},{"name":"multiMaterials","documentation":"","type":"MultiMaterial[]","entryType":"property"},{"name":"defaultMaterial","documentation":"","type":"StandardMaterial","entryType":"property"},{"name":"texturesEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"textures","documentation":"","type":"BaseTexture[]","entryType":"property"},{"name":"particlesEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"particleSystems","documentation":"","type":"ParticleSystem[]","entryType":"property"},{"name":"spritesEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"spriteManagers","documentation":"","type":"SpriteManager[]","entryType":"property"},{"name":"layers","documentation":"","type":"Layer[]","entryType":"property"},{"name":"highlightLayers","documentation":"","type":"HighlightLayer[]","entryType":"property"},{"name":"skeletonsEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"skeletons","documentation":"","type":"Skeleton[]","entryType":"property"},{"name":"lensFlaresEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"lensFlareSystems","documentation":"","type":"LensFlareSystem[]","entryType":"property"},{"name":"collisionsEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"_workerCollisions","documentation":"","type":"any","entryType":"property"},{"name":"collisionCoordinator","documentation":"","type":"ICollisionCoordinator","entryType":"property"},{"name":"gravity","documentation":"","type":"Vector3","entryType":"property"},{"name":"postProcessesEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"postProcessManager","documentation":"","type":"PostProcessManager","entryType":"property"},{"name":"postProcessRenderPipelineManager","documentation":"","type":"PostProcessRenderPipelineManager","entryType":"property"},{"name":"renderTargetsEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"dumpNextRenderTargets","documentation":"","type":"boolean","entryType":"property"},{"name":"customRenderTargets","documentation":"","type":"RenderTargetTexture[]","entryType":"property"},{"name":"useDelayedTextureLoading","documentation":"","type":"boolean","entryType":"property"},{"name":"importedMeshesFiles","documentation":"","type":"String[]","entryType":"property"},{"name":"probesEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"reflectionProbes","documentation":"","type":"ReflectionProbe[]","entryType":"property"},{"name":"database","documentation":"","type":"any","entryType":"property"},{"name":"actionManager","documentation":"This scene's action manager\n@type {BABYLON.ActionManager}","type":"ActionManager","entryType":"property"},{"name":"_actionManagers","documentation":"","type":"ActionManager[]","entryType":"property"},{"name":"_meshesForIntersections","documentation":"","type":"any","entryType":"property"},{"name":"proceduralTexturesEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"_proceduralTextures","documentation":"","type":"ProceduralTexture[]","entryType":"property"},{"name":"mainSoundTrack","documentation":"","type":"SoundTrack","entryType":"property"},{"name":"soundTracks","documentation":"","type":"SoundTrack[]","entryType":"property"},{"name":"_audioEnabled","documentation":"","type":"any","entryType":"property"},{"name":"_headphone","documentation":"","type":"any","entryType":"property"},{"name":"simplificationQueue","documentation":"","type":"SimplificationQueue","entryType":"property"},{"name":"_engine","documentation":"","type":"any","entryType":"property"},{"name":"_totalMeshesCounter","documentation":"","type":"any","entryType":"property"},{"name":"_totalLightsCounter","documentation":"","type":"any","entryType":"property"},{"name":"_totalMaterialsCounter","documentation":"","type":"any","entryType":"property"},{"name":"_totalTexturesCounter","documentation":"","type":"any","entryType":"property"},{"name":"_totalVertices","documentation":"","type":"any","entryType":"property"},{"name":"_activeIndices","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"_activeParticles","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"_lastFrameDuration","documentation":"","type":"any","entryType":"property"},{"name":"_evaluateActiveMeshesDuration","documentation":"","type":"any","entryType":"property"},{"name":"_renderTargetsDuration","documentation":"","type":"any","entryType":"property"},{"name":"_particlesDuration","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"_renderDuration","documentation":"","type":"any","entryType":"property"},{"name":"_spritesDuration","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"_activeBones","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"_animationRatio","documentation":"","type":"any","entryType":"property"},{"name":"_animationStartDate","documentation":"","type":"any","entryType":"property"},{"name":"_cachedMaterial","documentation":"","type":"Material","entryType":"property"},{"name":"_renderId","documentation":"","type":"any","entryType":"property"},{"name":"_executeWhenReadyTimeoutId","documentation":"","type":"any","entryType":"property"},{"name":"_intermediateRendering","documentation":"","type":"any","entryType":"property"},{"name":"_toBeDisposed","documentation":"","type":"SmartArray<IDisposable>","entryType":"property"},{"name":"_pendingData","documentation":"","type":"any","entryType":"property"},{"name":"_activeMeshes","documentation":"","type":"any","entryType":"property"},{"name":"_processedMaterials","documentation":"","type":"any","entryType":"property"},{"name":"_renderTargets","documentation":"","type":"any","entryType":"property"},{"name":"_activeParticleSystems","documentation":"","type":"SmartArray<ParticleSystem>","entryType":"property"},{"name":"_activeSkeletons","documentation":"","type":"any","entryType":"property"},{"name":"_softwareSkinnedMeshes","documentation":"","type":"any","entryType":"property"},{"name":"_renderingManager","documentation":"","type":"any","entryType":"property"},{"name":"_physicsEngine","documentation":"","type":"any","entryType":"property"},{"name":"_activeAnimatables","documentation":"","type":"Animatable[]","entryType":"property"},{"name":"_transformMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_pickWithRayInverseMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_edgesRenderers","documentation":"","type":"any","entryType":"property"},{"name":"_boundingBoxRenderer","documentation":"","type":"any","entryType":"property"},{"name":"_outlineRenderer","documentation":"","type":"any","entryType":"property"},{"name":"_viewMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_projectionMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_frustumPlanes","documentation":"","type":"any","entryType":"property"},{"name":"_selectionOctree","documentation":"","type":"any","entryType":"property"},{"name":"_pointerOverMesh","documentation":"","type":"any","entryType":"property"},{"name":"_pointerOverSprite","documentation":"","type":"any","entryType":"property"},{"name":"_debugLayer","documentation":"","type":"any","entryType":"property"},{"name":"_depthRenderer","documentation":"","type":"any","entryType":"property"},{"name":"_uniqueIdCounter","documentation":"","type":"any","entryType":"property"},{"name":"_pickedDownMesh","documentation":"","type":"any","entryType":"property"},{"name":"_pickedDownSprite","documentation":"","type":"any","entryType":"property"},{"name":"debugLayer","documentation":"","type":"DebugLayer","entryType":"property"},{"name":"workerCollisions","documentation":"","type":"boolean","entryType":"property"},{"name":"SelectionOctree","documentation":"","type":"Octree<AbstractMesh>","entryType":"property"},{"name":"meshUnderPointer","documentation":"The mesh that is currently under the pointer.\n@return {BABYLON.AbstractMesh} mesh under the pointer/mouse cursor or null if none.","type":"AbstractMesh","entryType":"property"},{"name":"pointerX","documentation":"Current on-screen X position of the pointer\n@return {number} X position of the pointer","type":"number","entryType":"property"},{"name":"pointerY","documentation":"Current on-screen Y position of the pointer\n@return {number} Y position of the pointer","type":"number","entryType":"property"},{"name":"totalVerticesPerfCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"totalActiveIndicesPerfCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"activeParticlesPerfCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"activeBonesPerfCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"lastFramePerfCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"evaluateActiveMeshesDurationPerfCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"renderDurationPerfCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"particlesDurationPerfCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"spriteDuractionPerfCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"Animatables","documentation":"","type":"Animatable[]","entryType":"property"},{"name":"audioEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"headphone","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.IAnimatable"]},{"name":"Action","documentation":"","type":"typeof Action","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"Action","documentation":""}],"entryType":"class","functions":[{"name":"_prepare","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTriggerParameter","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_executeCurrent","documentation":"","type":"(evt: ActionEvent) => void","functionBody":[{"parameters":[{"name":"evt","documentation":"","type":"ActionEvent"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"execute","documentation":"","type":"(evt: ActionEvent) => void","functionBody":[{"parameters":[{"name":"evt","documentation":"","type":"ActionEvent"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"skipToNextActiveAction","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"then","documentation":"","type":"(action: Action) => Action","functionBody":[{"parameters":[{"name":"action","documentation":"","type":"Action"}],"returnType":"Action","documentation":""}],"entryType":"function"},{"name":"_getProperty","documentation":"","type":"(propertyPath: string) => string","functionBody":[{"parameters":[{"name":"propertyPath","documentation":"","type":"string"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"_getEffectiveTarget","documentation":"","type":"(target: any, propertyPath: string) => any","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"any"},{"name":"propertyPath","documentation":"","type":"string"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_serialize","documentation":"","type":"(serializedAction: any, parent?: any) => any","functionBody":[{"parameters":[{"name":"serializedAction","documentation":"","type":"any"},{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"triggerOptions","documentation":"","type":"any","entryType":"property"},{"name":"trigger","documentation":"","type":"number","entryType":"property"},{"name":"_actionManager","documentation":"","type":"ActionManager","entryType":"property"},{"name":"_nextActiveAction","documentation":"","type":"any","entryType":"property"},{"name":"_child","documentation":"","type":"any","entryType":"property"},{"name":"_condition","documentation":"","type":"any","entryType":"property"},{"name":"_triggerParameter","documentation":"","type":"any","entryType":"property"},{"name":"_SerializeValueAsString","documentation":"","type":"(value: any) => string","entryType":"property"},{"name":"_GetTargetProperty","documentation":"","type":"(target: Scene | Node) => { name: string; targetType: string; value: string; }","entryType":"property"}]},{"name":"ActionEvent","documentation":"ActionEvent is the event beint sent when an action is triggered.","type":"typeof ActionEvent","constructors":[{"parameters":[{"name":"source","documentation":"The mesh or sprite that triggered the action.","type":"any"},{"name":"pointerX","documentation":"The X mouse cursor position at the time of the event","type":"number"},{"name":"pointerY","documentation":"The Y mouse cursor position at the time of the event","type":"number"},{"name":"meshUnderPointer","documentation":"The mesh that is currently pointed at (can be null)","type":"AbstractMesh"},{"name":"sourceEvent","documentation":"the original (browser) event that triggered the ActionEvent","type":"any"},{"name":"additionalData","documentation":"","type":"any"}],"returnType":"ActionEvent","documentation":"@constructor"}],"entryType":"class","functions":[{"name":"CreateNew","documentation":"Helper function to auto-create an ActionEvent from a source mesh.","type":"(source: AbstractMesh, evt?: Event, additionalData?: any) => ActionEvent","functionBody":[{"parameters":[{"name":"source","documentation":"The source mesh that triggered the event","type":"AbstractMesh"},{"name":"evt","documentation":"{Event} The original (browser) event","type":"Event"},{"name":"additionalData","documentation":"","type":"any"}],"returnType":"ActionEvent","documentation":"Helper function to auto-create an ActionEvent from a source mesh."}],"entryType":"function"},{"name":"CreateNewFromSprite","documentation":"Helper function to auto-create an ActionEvent from a source mesh.","type":"(source: Sprite, scene: Scene, evt?: Event, additionalData?: any) => ActionEvent","functionBody":[{"parameters":[{"name":"source","documentation":"The source sprite that triggered the event","type":"Sprite"},{"name":"scene","documentation":"Scene associated with the sprite","type":"Scene"},{"name":"evt","documentation":"{Event} The original (browser) event","type":"Event"},{"name":"additionalData","documentation":"","type":"any"}],"returnType":"ActionEvent","documentation":"Helper function to auto-create an ActionEvent from a source mesh."}],"entryType":"function"},{"name":"CreateNewFromScene","documentation":"Helper function to auto-create an ActionEvent from a scene. If triggered by a mesh use ActionEvent.CreateNew","type":"(scene: Scene, evt: Event) => ActionEvent","functionBody":[{"parameters":[{"name":"scene","documentation":"the scene where the event occurred","type":"Scene"},{"name":"evt","documentation":"{Event} The original (browser) event","type":"Event"}],"returnType":"ActionEvent","documentation":"Helper function to auto-create an ActionEvent from a scene. If triggered by a mesh use ActionEvent.CreateNew"}],"entryType":"function"},{"name":"CreateNewFromPrimitive","documentation":"","type":"(prim: any, pointerPos: Vector2, evt?: Event, additionalData?: any) => ActionEvent","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"any"},{"name":"pointerPos","documentation":"","type":"Vector2"},{"name":"evt","documentation":"","type":"Event"},{"name":"additionalData","documentation":"","type":"any"}],"returnType":"ActionEvent","documentation":""}],"entryType":"function"}],"properties":[{"name":"source","documentation":"","type":"any","entryType":"property"},{"name":"pointerX","documentation":"","type":"number","entryType":"property"},{"name":"pointerY","documentation":"","type":"number","entryType":"property"},{"name":"meshUnderPointer","documentation":"","type":"AbstractMesh","entryType":"property"},{"name":"sourceEvent","documentation":"","type":"any","entryType":"property"},{"name":"additionalData","documentation":"","type":"any","entryType":"property"}]},{"name":"ActionManager","documentation":"Action Manager manages all events to be triggered on a given mesh or the global scene.\nA single scene can have many Action Managers to handle predefined actions on specific meshes.","type":"typeof ActionManager","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"}],"returnType":"ActionManager","documentation":""}],"entryType":"class","functions":[{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getScene","documentation":"","type":"() => Scene","functionBody":[{"parameters":[],"returnType":"Scene","documentation":""}],"entryType":"function"},{"name":"hasSpecificTriggers","documentation":"Does this action manager handles actions of any of the given triggers\n@return {boolean} whether one (or more) of the triggers is handeled","type":"(triggers: number[]) => boolean","functionBody":[{"parameters":[{"name":"triggers","documentation":"- the triggers to be tested","type":"number[]"}],"returnType":"boolean","documentation":"Does this action manager handles actions of any of the given triggers\n@return {boolean} whether one (or more) of the triggers is handeled"}],"entryType":"function"},{"name":"hasSpecificTrigger","documentation":"Does this action manager handles actions of a given trigger\n@return {boolean} whether the trigger is handeled","type":"(trigger: number) => boolean","functionBody":[{"parameters":[{"name":"trigger","documentation":"- the trigger to be tested","type":"number"}],"returnType":"boolean","documentation":"Does this action manager handles actions of a given trigger\n@return {boolean} whether the trigger is handeled"}],"entryType":"function"},{"name":"registerAction","documentation":"Registers an action to this action manager\n@return {BABYLON.Action} the action amended (prepared) after registration","type":"(action: Action) => Action","functionBody":[{"parameters":[{"name":"action","documentation":"- the action to be registered","type":"Action"}],"returnType":"Action","documentation":"Registers an action to this action manager\n@return {BABYLON.Action} the action amended (prepared) after registration"}],"entryType":"function"},{"name":"processTrigger","documentation":"Process a specific trigger","type":"(trigger: number, evt: ActionEvent) => void","functionBody":[{"parameters":[{"name":"trigger","documentation":"- the trigger to process","type":"number"},{"name":"evt","documentation":"{BABYLON.ActionEvent} the event details to be processed","type":"ActionEvent"}],"returnType":"void","documentation":"Process a specific trigger"}],"entryType":"function"},{"name":"_getEffectiveTarget","documentation":"","type":"(target: any, propertyPath: string) => any","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"any"},{"name":"propertyPath","documentation":"","type":"string"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getProperty","documentation":"","type":"(propertyPath: string) => string","functionBody":[{"parameters":[{"name":"propertyPath","documentation":"","type":"string"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(name: string) => any","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedActions: any, object: AbstractMesh, scene: Scene) => void","functionBody":[{"parameters":[{"name":"parsedActions","documentation":"","type":"any"},{"name":"object","documentation":"","type":"AbstractMesh"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"GetTriggerName","documentation":"","type":"(trigger: number) => string","functionBody":[{"parameters":[{"name":"trigger","documentation":"","type":"number"}],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"_NothingTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnPickTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnLeftPickTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnRightPickTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnCenterPickTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnPickDownTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnPickUpTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnLongPressTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnPointerOverTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnPointerOutTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnEveryFrameTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnIntersectionEnterTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnIntersectionExitTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnKeyDownTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnKeyUpTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_OnPickOutTrigger","documentation":"","type":"any","entryType":"property"},{"name":"NothingTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnPickTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnLeftPickTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnRightPickTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnCenterPickTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnPickDownTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnPickUpTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnPickOutTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnLongPressTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnPointerOverTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnPointerOutTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnEveryFrameTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnIntersectionEnterTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnIntersectionExitTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnKeyDownTrigger","documentation":"","type":"number","entryType":"property"},{"name":"OnKeyUpTrigger","documentation":"","type":"number","entryType":"property"},{"name":"DragMovementThreshold","documentation":"","type":"number","entryType":"property"},{"name":"LongPressDelay","documentation":"","type":"number","entryType":"property"},{"name":"actions","documentation":"","type":"Action[]","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"hasPointerTriggers","documentation":"Does this action manager has pointer triggers\n@return {boolean} whether or not it has pointer triggers","type":"boolean","entryType":"property"},{"name":"hasPickTriggers","documentation":"Does this action manager has pick triggers\n@return {boolean} whether or not it has pick triggers","type":"boolean","entryType":"property"}]},{"name":"Condition","documentation":"","type":"typeof Condition","constructors":[{"parameters":[{"name":"actionManager","documentation":"","type":"ActionManager"}],"returnType":"Condition","documentation":""}],"entryType":"class","functions":[{"name":"isValid","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_getProperty","documentation":"","type":"(propertyPath: string) => string","functionBody":[{"parameters":[{"name":"propertyPath","documentation":"","type":"string"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"_getEffectiveTarget","documentation":"","type":"(target: any, propertyPath: string) => any","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"any"},{"name":"propertyPath","documentation":"","type":"string"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_serialize","documentation":"","type":"(serializedCondition: any) => any","functionBody":[{"parameters":[{"name":"serializedCondition","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_actionManager","documentation":"","type":"ActionManager","entryType":"property"},{"name":"_evaluationId","documentation":"","type":"number","entryType":"property"},{"name":"_currentResult","documentation":"","type":"boolean","entryType":"property"}]},{"name":"ValueCondition","documentation":"","type":"typeof ValueCondition","constructors":[{"parameters":[{"name":"actionManager","documentation":"","type":"ActionManager"},{"name":"target","documentation":"","type":"any"},{"name":"propertyPath","documentation":"","type":"string"},{"name":"value","documentation":"","type":"any"},{"name":"operator","documentation":"","type":"number"}],"returnType":"ValueCondition","documentation":""}],"entryType":"class","functions":[{"name":"isValid","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"GetOperatorName","documentation":"","type":"(operator: number) => string","functionBody":[{"parameters":[{"name":"operator","documentation":"","type":"number"}],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"propertyPath","documentation":"","type":"string","entryType":"property"},{"name":"value","documentation":"","type":"any","entryType":"property"},{"name":"operator","documentation":"","type":"number","entryType":"property"},{"name":"_IsEqual","documentation":"","type":"any","entryType":"property"},{"name":"_IsDifferent","documentation":"","type":"any","entryType":"property"},{"name":"_IsGreater","documentation":"","type":"any","entryType":"property"},{"name":"_IsLesser","documentation":"","type":"any","entryType":"property"},{"name":"IsEqual","documentation":"","type":"number","entryType":"property"},{"name":"IsDifferent","documentation":"","type":"number","entryType":"property"},{"name":"IsGreater","documentation":"","type":"number","entryType":"property"},{"name":"IsLesser","documentation":"","type":"number","entryType":"property"},{"name":"_actionManager","documentation":"","type":"ActionManager","entryType":"property"},{"name":"_target","documentation":"","type":"any","entryType":"property"},{"name":"_effectiveTarget","documentation":"","type":"any","entryType":"property"},{"name":"_property","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Condition"]},{"name":"PredicateCondition","documentation":"","type":"typeof PredicateCondition","constructors":[{"parameters":[{"name":"actionManager","documentation":"","type":"ActionManager"},{"name":"predicate","documentation":"","type":"() => boolean"}],"returnType":"PredicateCondition","documentation":""}],"entryType":"class","functions":[{"name":"isValid","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"predicate","documentation":"","type":"() => boolean","entryType":"property"},{"name":"_actionManager","documentation":"","type":"ActionManager","entryType":"property"}],"heritageClauses":["BABYLON.Condition"]},{"name":"StateCondition","documentation":"","type":"typeof StateCondition","constructors":[{"parameters":[{"name":"actionManager","documentation":"","type":"ActionManager"},{"name":"target","documentation":"","type":"any"},{"name":"value","documentation":"","type":"string"}],"returnType":"StateCondition","documentation":""}],"entryType":"class","functions":[{"name":"isValid","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"value","documentation":"","type":"string","entryType":"property"},{"name":"_actionManager","documentation":"","type":"ActionManager","entryType":"property"},{"name":"_target","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Condition"]},{"name":"SwitchBooleanAction","documentation":"","type":"typeof SwitchBooleanAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"target","documentation":"","type":"any"},{"name":"propertyPath","documentation":"","type":"string"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"SwitchBooleanAction","documentation":""}],"entryType":"class","functions":[{"name":"_prepare","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"execute","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"propertyPath","documentation":"","type":"string","entryType":"property"},{"name":"_target","documentation":"","type":"any","entryType":"property"},{"name":"_effectiveTarget","documentation":"","type":"any","entryType":"property"},{"name":"_property","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Action"]},{"name":"SetStateAction","documentation":"","type":"typeof SetStateAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"target","documentation":"","type":"any"},{"name":"value","documentation":"","type":"string"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"SetStateAction","documentation":""}],"entryType":"class","functions":[{"name":"execute","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"value","documentation":"","type":"string","entryType":"property"},{"name":"_target","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Action"]},{"name":"SetValueAction","documentation":"","type":"typeof SetValueAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"target","documentation":"","type":"any"},{"name":"propertyPath","documentation":"","type":"string"},{"name":"value","documentation":"","type":"any"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"SetValueAction","documentation":""}],"entryType":"class","functions":[{"name":"_prepare","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"execute","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"propertyPath","documentation":"","type":"string","entryType":"property"},{"name":"value","documentation":"","type":"any","entryType":"property"},{"name":"_target","documentation":"","type":"any","entryType":"property"},{"name":"_effectiveTarget","documentation":"","type":"any","entryType":"property"},{"name":"_property","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Action"]},{"name":"IncrementValueAction","documentation":"","type":"typeof IncrementValueAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"target","documentation":"","type":"any"},{"name":"propertyPath","documentation":"","type":"string"},{"name":"value","documentation":"","type":"any"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"IncrementValueAction","documentation":""}],"entryType":"class","functions":[{"name":"_prepare","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"execute","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"propertyPath","documentation":"","type":"string","entryType":"property"},{"name":"value","documentation":"","type":"any","entryType":"property"},{"name":"_target","documentation":"","type":"any","entryType":"property"},{"name":"_effectiveTarget","documentation":"","type":"any","entryType":"property"},{"name":"_property","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Action"]},{"name":"PlayAnimationAction","documentation":"","type":"typeof PlayAnimationAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"target","documentation":"","type":"any"},{"name":"from","documentation":"","type":"number"},{"name":"to","documentation":"","type":"number"},{"name":"loop","documentation":"","type":"boolean"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"PlayAnimationAction","documentation":""}],"entryType":"class","functions":[{"name":"_prepare","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"execute","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"from","documentation":"","type":"number","entryType":"property"},{"name":"to","documentation":"","type":"number","entryType":"property"},{"name":"loop","documentation":"","type":"boolean","entryType":"property"},{"name":"_target","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Action"]},{"name":"StopAnimationAction","documentation":"","type":"typeof StopAnimationAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"target","documentation":"","type":"any"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"StopAnimationAction","documentation":""}],"entryType":"class","functions":[{"name":"_prepare","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"execute","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_target","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Action"]},{"name":"DoNothingAction","documentation":"","type":"typeof DoNothingAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"DoNothingAction","documentation":""}],"entryType":"class","functions":[{"name":"execute","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.Action"]},{"name":"CombineAction","documentation":"","type":"typeof CombineAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"children","documentation":"","type":"Action[]"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"CombineAction","documentation":""}],"entryType":"class","functions":[{"name":"_prepare","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"execute","documentation":"","type":"(evt: ActionEvent) => void","functionBody":[{"parameters":[{"name":"evt","documentation":"","type":"ActionEvent"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"children","documentation":"","type":"Action[]","entryType":"property"}],"heritageClauses":["BABYLON.Action"]},{"name":"ExecuteCodeAction","documentation":"","type":"typeof ExecuteCodeAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"func","documentation":"","type":"(evt: ActionEvent) => void"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"ExecuteCodeAction","documentation":""}],"entryType":"class","functions":[{"name":"execute","documentation":"","type":"(evt: ActionEvent) => void","functionBody":[{"parameters":[{"name":"evt","documentation":"","type":"ActionEvent"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"func","documentation":"","type":"(evt: ActionEvent) => void","entryType":"property"}],"heritageClauses":["BABYLON.Action"]},{"name":"SetParentAction","documentation":"","type":"typeof SetParentAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"target","documentation":"","type":"any"},{"name":"parent","documentation":"","type":"any"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"SetParentAction","documentation":""}],"entryType":"class","functions":[{"name":"_prepare","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"execute","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_parent","documentation":"","type":"any","entryType":"property"},{"name":"_target","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Action"]},{"name":"PlaySoundAction","documentation":"","type":"typeof PlaySoundAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"sound","documentation":"","type":"Sound"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"PlaySoundAction","documentation":""}],"entryType":"class","functions":[{"name":"_prepare","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"execute","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_sound","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Action"]},{"name":"StopSoundAction","documentation":"","type":"typeof StopSoundAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"sound","documentation":"","type":"Sound"},{"name":"condition","documentation":"","type":"Condition"}],"returnType":"StopSoundAction","documentation":""}],"entryType":"class","functions":[{"name":"_prepare","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"execute","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_sound","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Action"]},{"name":"InterpolateValueAction","documentation":"","type":"typeof InterpolateValueAction","constructors":[{"parameters":[{"name":"triggerOptions","documentation":"","type":"any"},{"name":"target","documentation":"","type":"any"},{"name":"propertyPath","documentation":"","type":"string"},{"name":"value","documentation":"","type":"any"},{"name":"duration","documentation":"","type":"number"},{"name":"condition","documentation":"","type":"Condition"},{"name":"stopOtherAnimations","documentation":"","type":"boolean"},{"name":"onInterpolationDone","documentation":"","type":"() => void"}],"returnType":"InterpolateValueAction","documentation":""}],"entryType":"class","functions":[{"name":"_prepare","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"execute","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(parent: any) => any","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"propertyPath","documentation":"","type":"string","entryType":"property"},{"name":"value","documentation":"","type":"any","entryType":"property"},{"name":"duration","documentation":"","type":"number","entryType":"property"},{"name":"stopOtherAnimations","documentation":"","type":"boolean","entryType":"property"},{"name":"onInterpolationDone","documentation":"","type":"() => void","entryType":"property"},{"name":"_target","documentation":"","type":"any","entryType":"property"},{"name":"_effectiveTarget","documentation":"","type":"any","entryType":"property"},{"name":"_property","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Action"]},{"name":"Animatable","documentation":"","type":"typeof Animatable","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"target","documentation":"","type":"any"},{"name":"fromFrame","documentation":"","type":"number"},{"name":"toFrame","documentation":"","type":"number"},{"name":"loopAnimation","documentation":"","type":"boolean"},{"name":"speedRatio","documentation":"","type":"number"},{"name":"onAnimationEnd","documentation":"","type":"any"},{"name":"animations","documentation":"","type":"any"}],"returnType":"Animatable","documentation":""}],"entryType":"class","functions":[{"name":"getAnimations","documentation":"","type":"() => Animation[]","functionBody":[{"parameters":[],"returnType":"Animation[]","documentation":""}],"entryType":"function"},{"name":"appendAnimations","documentation":"","type":"(target: any, animations: Animation[]) => void","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"any"},{"name":"animations","documentation":"","type":"Animation[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getAnimationByTargetProperty","documentation":"","type":"(property: string) => Animation","functionBody":[{"parameters":[{"name":"property","documentation":"","type":"string"}],"returnType":"Animation","documentation":""}],"entryType":"function"},{"name":"reset","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"enableBlending","documentation":"","type":"(blendingSpeed: number) => void","functionBody":[{"parameters":[{"name":"blendingSpeed","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"disableBlending","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"goToFrame","documentation":"","type":"(frame: number) => void","functionBody":[{"parameters":[{"name":"frame","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"pause","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"restart","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"stop","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_animate","documentation":"","type":"(delay: number) => boolean","functionBody":[{"parameters":[{"name":"delay","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"target","documentation":"","type":"any","entryType":"property"},{"name":"fromFrame","documentation":"","type":"number","entryType":"property"},{"name":"toFrame","documentation":"","type":"number","entryType":"property"},{"name":"loopAnimation","documentation":"","type":"boolean","entryType":"property"},{"name":"speedRatio","documentation":"","type":"number","entryType":"property"},{"name":"onAnimationEnd","documentation":"","type":"any","entryType":"property"},{"name":"_localDelayOffset","documentation":"","type":"any","entryType":"property"},{"name":"_pausedDelay","documentation":"","type":"any","entryType":"property"},{"name":"_animations","documentation":"","type":"any","entryType":"property"},{"name":"_paused","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"animationStarted","documentation":"","type":"boolean","entryType":"property"}]},{"name":"AnimationRange","documentation":"","type":"typeof AnimationRange","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"from","documentation":"","type":"number"},{"name":"to","documentation":"","type":"number"}],"returnType":"AnimationRange","documentation":""}],"entryType":"class","functions":[{"name":"clone","documentation":"","type":"() => AnimationRange","functionBody":[{"parameters":[],"returnType":"AnimationRange","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"from","documentation":"","type":"number","entryType":"property"},{"name":"to","documentation":"","type":"number","entryType":"property"}]},{"name":"AnimationEvent","documentation":"Composed of a frame, and an action function","type":"typeof AnimationEvent","constructors":[{"parameters":[{"name":"frame","documentation":"","type":"number"},{"name":"action","documentation":"","type":"() => void"},{"name":"onlyOnce","documentation":"","type":"boolean"}],"returnType":"AnimationEvent","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"frame","documentation":"","type":"number","entryType":"property"},{"name":"action","documentation":"","type":"() => void","entryType":"property"},{"name":"onlyOnce","documentation":"","type":"boolean","entryType":"property"},{"name":"isDone","documentation":"","type":"boolean","entryType":"property"}]},{"name":"PathCursor","documentation":"","type":"typeof PathCursor","constructors":[{"parameters":[{"name":"path","documentation":"","type":"Path2"}],"returnType":"PathCursor","documentation":""}],"entryType":"class","functions":[{"name":"getPoint","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"moveAhead","documentation":"","type":"(step?: number) => PathCursor","functionBody":[{"parameters":[{"name":"step","documentation":"","type":"number"}],"returnType":"PathCursor","documentation":""}],"entryType":"function"},{"name":"moveBack","documentation":"","type":"(step?: number) => PathCursor","functionBody":[{"parameters":[{"name":"step","documentation":"","type":"number"}],"returnType":"PathCursor","documentation":""}],"entryType":"function"},{"name":"move","documentation":"","type":"(step: number) => PathCursor","functionBody":[{"parameters":[{"name":"step","documentation":"","type":"number"}],"returnType":"PathCursor","documentation":""}],"entryType":"function"},{"name":"ensureLimits","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"markAsDirty","documentation":"","type":"(propertyName: any) => any","functionBody":[{"parameters":[{"name":"propertyName","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"raiseOnChange","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"onchange","documentation":"","type":"(f: (cursor: PathCursor) => void) => PathCursor","functionBody":[{"parameters":[{"name":"f","documentation":"","type":"(cursor: PathCursor) => void"}],"returnType":"PathCursor","documentation":""}],"entryType":"function"}],"properties":[{"name":"path","documentation":"","type":"any","entryType":"property"},{"name":"_onchange","documentation":"","type":"any","entryType":"property"},{"name":"value","documentation":"","type":"number","entryType":"property"},{"name":"animations","documentation":"","type":"Animation[]","entryType":"property"}]},{"name":"Animation","documentation":"","type":"typeof Animation","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"targetProperty","documentation":"","type":"string"},{"name":"framePerSecond","documentation":"","type":"number"},{"name":"dataType","documentation":"","type":"number"},{"name":"loopMode","documentation":"","type":"number"},{"name":"enableBlending","documentation":"","type":"boolean"}],"returnType":"Animation","documentation":""}],"entryType":"class","functions":[{"name":"_PrepareAnimation","documentation":"","type":"(name: string, targetProperty: string, framePerSecond: number, totalFrame: number, from: any, to:...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"targetProperty","documentation":"","type":"string"},{"name":"framePerSecond","documentation":"","type":"number"},{"name":"totalFrame","documentation":"","type":"number"},{"name":"from","documentation":"","type":"any"},{"name":"to","documentation":"","type":"any"},{"name":"loopMode","documentation":"","type":"number"},{"name":"easingFunction","documentation":"","type":"EasingFunction"}],"returnType":"Animation","documentation":""}],"entryType":"function"},{"name":"CreateAndStartAnimation","documentation":"","type":"(name: string, node: Node, targetProperty: string, framePerSecond: number, totalFrame: number, fr...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"node","documentation":"","type":"Node"},{"name":"targetProperty","documentation":"","type":"string"},{"name":"framePerSecond","documentation":"","type":"number"},{"name":"totalFrame","documentation":"","type":"number"},{"name":"from","documentation":"","type":"any"},{"name":"to","documentation":"","type":"any"},{"name":"loopMode","documentation":"","type":"number"},{"name":"easingFunction","documentation":"","type":"EasingFunction"},{"name":"onAnimationEnd","documentation":"","type":"() => void"}],"returnType":"Animatable","documentation":""}],"entryType":"function"},{"name":"CreateMergeAndStartAnimation","documentation":"","type":"(name: string, node: Node, targetProperty: string, framePerSecond: number, totalFrame: number, fr...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"node","documentation":"","type":"Node"},{"name":"targetProperty","documentation":"","type":"string"},{"name":"framePerSecond","documentation":"","type":"number"},{"name":"totalFrame","documentation":"","type":"number"},{"name":"from","documentation":"","type":"any"},{"name":"to","documentation":"","type":"any"},{"name":"loopMode","documentation":"","type":"number"},{"name":"easingFunction","documentation":"","type":"EasingFunction"},{"name":"onAnimationEnd","documentation":"","type":"() => void"}],"returnType":"Animatable","documentation":""}],"entryType":"function"},{"name":"toString","documentation":"","type":"(fullDetails?: boolean) => string","functionBody":[{"parameters":[{"name":"fullDetails","documentation":"- support for multiple levels of logging within scene loading","type":"boolean"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"addEvent","documentation":"Add an event to this animation.","type":"(event: AnimationEvent) => void","functionBody":[{"parameters":[{"name":"event","documentation":"","type":"AnimationEvent"}],"returnType":"void","documentation":"Add an event to this animation."}],"entryType":"function"},{"name":"removeEvents","documentation":"Remove all events found at the given frame","type":"(frame: number) => void","functionBody":[{"parameters":[{"name":"frame","documentation":"","type":"number"}],"returnType":"void","documentation":"Remove all events found at the given frame"}],"entryType":"function"},{"name":"createRange","documentation":"","type":"(name: string, from: number, to: number) => void","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"from","documentation":"","type":"number"},{"name":"to","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"deleteRange","documentation":"","type":"(name: string, deleteFrames?: boolean) => void","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"deleteFrames","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getRange","documentation":"","type":"(name: string) => AnimationRange","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"AnimationRange","documentation":""}],"entryType":"function"},{"name":"reset","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isStopped","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getKeys","documentation":"","type":"() => { frame: number; value: any; }[]","functionBody":[{"parameters":[],"returnType":"{ frame: number; value: any; }[]","documentation":""}],"entryType":"function"},{"name":"getHighestFrame","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getEasingFunction","documentation":"","type":"() => IEasingFunction","functionBody":[{"parameters":[],"returnType":"IEasingFunction","documentation":""}],"entryType":"function"},{"name":"setEasingFunction","documentation":"","type":"(easingFunction: EasingFunction) => void","functionBody":[{"parameters":[{"name":"easingFunction","documentation":"","type":"EasingFunction"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"floatInterpolateFunction","documentation":"","type":"(startValue: number, endValue: number, gradient: number) => number","functionBody":[{"parameters":[{"name":"startValue","documentation":"","type":"number"},{"name":"endValue","documentation":"","type":"number"},{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"quaternionInterpolateFunction","documentation":"","type":"(startValue: Quaternion, endValue: Quaternion, gradient: number) => Quaternion","functionBody":[{"parameters":[{"name":"startValue","documentation":"","type":"Quaternion"},{"name":"endValue","documentation":"","type":"Quaternion"},{"name":"gradient","documentation":"","type":"number"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"vector3InterpolateFunction","documentation":"","type":"(startValue: Vector3, endValue: Vector3, gradient: number) => Vector3","functionBody":[{"parameters":[{"name":"startValue","documentation":"","type":"Vector3"},{"name":"endValue","documentation":"","type":"Vector3"},{"name":"gradient","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"vector2InterpolateFunction","documentation":"","type":"(startValue: Vector2, endValue: Vector2, gradient: number) => Vector2","functionBody":[{"parameters":[{"name":"startValue","documentation":"","type":"Vector2"},{"name":"endValue","documentation":"","type":"Vector2"},{"name":"gradient","documentation":"","type":"number"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"sizeInterpolateFunction","documentation":"","type":"(startValue: Size, endValue: Size, gradient: number) => Size","functionBody":[{"parameters":[{"name":"startValue","documentation":"","type":"Size"},{"name":"endValue","documentation":"","type":"Size"},{"name":"gradient","documentation":"","type":"number"}],"returnType":"Size","documentation":""}],"entryType":"function"},{"name":"color3InterpolateFunction","documentation":"","type":"(startValue: Color3, endValue: Color3, gradient: number) => Color3","functionBody":[{"parameters":[{"name":"startValue","documentation":"","type":"Color3"},{"name":"endValue","documentation":"","type":"Color3"},{"name":"gradient","documentation":"","type":"number"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"matrixInterpolateFunction","documentation":"","type":"(startValue: Matrix, endValue: Matrix, gradient: number) => Matrix","functionBody":[{"parameters":[{"name":"startValue","documentation":"","type":"Matrix"},{"name":"endValue","documentation":"","type":"Matrix"},{"name":"gradient","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => Animation","functionBody":[{"parameters":[],"returnType":"Animation","documentation":""}],"entryType":"function"},{"name":"setKeys","documentation":"","type":"(values: { frame: number; value: any; }[]) => void","functionBody":[{"parameters":[{"name":"values","documentation":"","type":"{ frame: number; value: any; }[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getKeyValue","documentation":"","type":"(value: any) => any","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_interpolate","documentation":"","type":"(currentFrame: any, repeatCount: any, loopMode: any, offsetValue?: any, highLimitValue?: any) => ...","functionBody":[{"parameters":[{"name":"currentFrame","documentation":"","type":"any"},{"name":"repeatCount","documentation":"","type":"any"},{"name":"loopMode","documentation":"","type":"any"},{"name":"offsetValue","documentation":"","type":"any"},{"name":"highLimitValue","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setValue","documentation":"","type":"(currentValue: any, blend?: boolean) => void","functionBody":[{"parameters":[{"name":"currentValue","documentation":"","type":"any"},{"name":"blend","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"goToFrame","documentation":"","type":"(frame: number) => void","functionBody":[{"parameters":[{"name":"frame","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"animate","documentation":"","type":"(delay: number, from: number, to: number, loop: boolean, speedRatio: number, blend?: boolean) => ...","functionBody":[{"parameters":[{"name":"delay","documentation":"","type":"number"},{"name":"from","documentation":"","type":"number"},{"name":"to","documentation":"","type":"number"},{"name":"loop","documentation":"","type":"boolean"},{"name":"speedRatio","documentation":"","type":"number"},{"name":"blend","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedAnimation: any) => Animation","functionBody":[{"parameters":[{"name":"parsedAnimation","documentation":"","type":"any"}],"returnType":"Animation","documentation":""}],"entryType":"function"},{"name":"AppendSerializedAnimations","documentation":"","type":"(source: IAnimatable, destination: any) => any","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"IAnimatable"},{"name":"destination","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"targetProperty","documentation":"","type":"string","entryType":"property"},{"name":"framePerSecond","documentation":"","type":"number","entryType":"property"},{"name":"dataType","documentation":"","type":"number","entryType":"property"},{"name":"loopMode","documentation":"","type":"number","entryType":"property"},{"name":"enableBlending","documentation":"","type":"boolean","entryType":"property"},{"name":"_keys","documentation":"","type":"any","entryType":"property"},{"name":"_offsetsCache","documentation":"","type":"any","entryType":"property"},{"name":"_highLimitsCache","documentation":"","type":"any","entryType":"property"},{"name":"_stopped","documentation":"","type":"any","entryType":"property"},{"name":"_target","documentation":"","type":"any","entryType":"property"},{"name":"_blendingFactor","documentation":"","type":"any","entryType":"property"},{"name":"_easingFunction","documentation":"","type":"any","entryType":"property"},{"name":"_events","documentation":"","type":"any","entryType":"property"},{"name":"targetPropertyPath","documentation":"","type":"string[]","entryType":"property"},{"name":"currentFrame","documentation":"","type":"number","entryType":"property"},{"name":"allowMatricesInterpolation","documentation":"","type":"boolean","entryType":"property"},{"name":"blendingSpeed","documentation":"","type":"number","entryType":"property"},{"name":"_originalBlendValue","documentation":"","type":"any","entryType":"property"},{"name":"_ranges","documentation":"","type":"any","entryType":"property"},{"name":"_ANIMATIONTYPE_FLOAT","documentation":"","type":"any","entryType":"property"},{"name":"_ANIMATIONTYPE_VECTOR3","documentation":"","type":"any","entryType":"property"},{"name":"_ANIMATIONTYPE_QUATERNION","documentation":"","type":"any","entryType":"property"},{"name":"_ANIMATIONTYPE_MATRIX","documentation":"","type":"any","entryType":"property"},{"name":"_ANIMATIONTYPE_COLOR3","documentation":"","type":"any","entryType":"property"},{"name":"_ANIMATIONTYPE_VECTOR2","documentation":"","type":"any","entryType":"property"},{"name":"_ANIMATIONTYPE_SIZE","documentation":"","type":"any","entryType":"property"},{"name":"_ANIMATIONLOOPMODE_RELATIVE","documentation":"","type":"any","entryType":"property"},{"name":"_ANIMATIONLOOPMODE_CYCLE","documentation":"","type":"any","entryType":"property"},{"name":"_ANIMATIONLOOPMODE_CONSTANT","documentation":"","type":"any","entryType":"property"},{"name":"ANIMATIONTYPE_FLOAT","documentation":"","type":"number","entryType":"property"},{"name":"ANIMATIONTYPE_VECTOR3","documentation":"","type":"number","entryType":"property"},{"name":"ANIMATIONTYPE_VECTOR2","documentation":"","type":"number","entryType":"property"},{"name":"ANIMATIONTYPE_SIZE","documentation":"","type":"number","entryType":"property"},{"name":"ANIMATIONTYPE_QUATERNION","documentation":"","type":"number","entryType":"property"},{"name":"ANIMATIONTYPE_MATRIX","documentation":"","type":"number","entryType":"property"},{"name":"ANIMATIONTYPE_COLOR3","documentation":"","type":"number","entryType":"property"},{"name":"ANIMATIONLOOPMODE_RELATIVE","documentation":"","type":"number","entryType":"property"},{"name":"ANIMATIONLOOPMODE_CYCLE","documentation":"","type":"number","entryType":"property"},{"name":"ANIMATIONLOOPMODE_CONSTANT","documentation":"","type":"number","entryType":"property"}]},{"name":"EasingFunction","documentation":"","type":"typeof EasingFunction","constructors":[{"parameters":[],"returnType":"EasingFunction","documentation":""}],"entryType":"class","functions":[{"name":"setEasingMode","documentation":"","type":"(easingMode: number) => void","functionBody":[{"parameters":[{"name":"easingMode","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getEasingMode","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"ease","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"_EASINGMODE_EASEIN","documentation":"","type":"any","entryType":"property"},{"name":"_EASINGMODE_EASEOUT","documentation":"","type":"any","entryType":"property"},{"name":"_EASINGMODE_EASEINOUT","documentation":"","type":"any","entryType":"property"},{"name":"EASINGMODE_EASEIN","documentation":"","type":"number","entryType":"property"},{"name":"EASINGMODE_EASEOUT","documentation":"","type":"number","entryType":"property"},{"name":"EASINGMODE_EASEINOUT","documentation":"","type":"number","entryType":"property"},{"name":"_easingMode","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.IEasingFunction"]},{"name":"CircleEase","documentation":"","type":"typeof CircleEase","constructors":[{"parameters":[],"returnType":"CircleEase","documentation":""}],"entryType":"class","functions":[{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.EasingFunction","BABYLON.IEasingFunction"]},{"name":"BackEase","documentation":"","type":"typeof BackEase","constructors":[{"parameters":[{"name":"amplitude","documentation":"","type":"number"}],"returnType":"BackEase","documentation":""}],"entryType":"class","functions":[{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"amplitude","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.EasingFunction","BABYLON.IEasingFunction"]},{"name":"BounceEase","documentation":"","type":"typeof BounceEase","constructors":[{"parameters":[{"name":"bounces","documentation":"","type":"number"},{"name":"bounciness","documentation":"","type":"number"}],"returnType":"BounceEase","documentation":""}],"entryType":"class","functions":[{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"bounces","documentation":"","type":"number","entryType":"property"},{"name":"bounciness","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.EasingFunction","BABYLON.IEasingFunction"]},{"name":"CubicEase","documentation":"","type":"typeof CubicEase","constructors":[{"parameters":[],"returnType":"CubicEase","documentation":""}],"entryType":"class","functions":[{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.EasingFunction","BABYLON.IEasingFunction"]},{"name":"ElasticEase","documentation":"","type":"typeof ElasticEase","constructors":[{"parameters":[{"name":"oscillations","documentation":"","type":"number"},{"name":"springiness","documentation":"","type":"number"}],"returnType":"ElasticEase","documentation":""}],"entryType":"class","functions":[{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"oscillations","documentation":"","type":"number","entryType":"property"},{"name":"springiness","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.EasingFunction","BABYLON.IEasingFunction"]},{"name":"ExponentialEase","documentation":"","type":"typeof ExponentialEase","constructors":[{"parameters":[{"name":"exponent","documentation":"","type":"number"}],"returnType":"ExponentialEase","documentation":""}],"entryType":"class","functions":[{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"exponent","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.EasingFunction","BABYLON.IEasingFunction"]},{"name":"PowerEase","documentation":"","type":"typeof PowerEase","constructors":[{"parameters":[{"name":"power","documentation":"","type":"number"}],"returnType":"PowerEase","documentation":""}],"entryType":"class","functions":[{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"power","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.EasingFunction","BABYLON.IEasingFunction"]},{"name":"QuadraticEase","documentation":"","type":"typeof QuadraticEase","constructors":[{"parameters":[],"returnType":"QuadraticEase","documentation":""}],"entryType":"class","functions":[{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.EasingFunction","BABYLON.IEasingFunction"]},{"name":"QuarticEase","documentation":"","type":"typeof QuarticEase","constructors":[{"parameters":[],"returnType":"QuarticEase","documentation":""}],"entryType":"class","functions":[{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.EasingFunction","BABYLON.IEasingFunction"]},{"name":"QuinticEase","documentation":"","type":"typeof QuinticEase","constructors":[{"parameters":[],"returnType":"QuinticEase","documentation":""}],"entryType":"class","functions":[{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.EasingFunction","BABYLON.IEasingFunction"]},{"name":"SineEase","documentation":"","type":"typeof SineEase","constructors":[{"parameters":[],"returnType":"SineEase","documentation":""}],"entryType":"class","functions":[{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.EasingFunction","BABYLON.IEasingFunction"]},{"name":"BezierCurveEase","documentation":"","type":"typeof BezierCurveEase","constructors":[{"parameters":[{"name":"x1","documentation":"","type":"number"},{"name":"y1","documentation":"","type":"number"},{"name":"x2","documentation":"","type":"number"},{"name":"y2","documentation":"","type":"number"}],"returnType":"BezierCurveEase","documentation":""}],"entryType":"class","functions":[{"name":"easeInCore","documentation":"","type":"(gradient: number) => number","functionBody":[{"parameters":[{"name":"gradient","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"x1","documentation":"","type":"number","entryType":"property"},{"name":"y1","documentation":"","type":"number","entryType":"property"},{"name":"x2","documentation":"","type":"number","entryType":"property"},{"name":"y2","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.EasingFunction","BABYLON.IEasingFunction"]},{"name":"Analyser","documentation":"","type":"typeof Analyser","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Analyser","documentation":""}],"entryType":"class","functions":[{"name":"getFrequencyBinCount","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getByteFrequencyData","documentation":"","type":"() => Uint8Array","functionBody":[{"parameters":[],"returnType":"Uint8Array","documentation":""}],"entryType":"function"},{"name":"getByteTimeDomainData","documentation":"","type":"() => Uint8Array","functionBody":[{"parameters":[],"returnType":"Uint8Array","documentation":""}],"entryType":"function"},{"name":"getFloatFrequencyData","documentation":"","type":"() => Uint8Array","functionBody":[{"parameters":[],"returnType":"Uint8Array","documentation":""}],"entryType":"function"},{"name":"drawDebugCanvas","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"stopDebugCanvas","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"connectAudioNodes","documentation":"","type":"(inputAudioNode: AudioNode, outputAudioNode: AudioNode) => void","functionBody":[{"parameters":[{"name":"inputAudioNode","documentation":"","type":"AudioNode"},{"name":"outputAudioNode","documentation":"","type":"AudioNode"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"SMOOTHING","documentation":"","type":"number","entryType":"property"},{"name":"FFT_SIZE","documentation":"","type":"number","entryType":"property"},{"name":"BARGRAPHAMPLITUDE","documentation":"","type":"number","entryType":"property"},{"name":"DEBUGCANVASPOS","documentation":"","type":"{ x: number; y: number; }","entryType":"property"},{"name":"DEBUGCANVASSIZE","documentation":"","type":"{ width: number; height: number; }","entryType":"property"},{"name":"_byteFreqs","documentation":"","type":"any","entryType":"property"},{"name":"_byteTime","documentation":"","type":"any","entryType":"property"},{"name":"_floatFreqs","documentation":"","type":"any","entryType":"property"},{"name":"_webAudioAnalyser","documentation":"","type":"any","entryType":"property"},{"name":"_debugCanvas","documentation":"","type":"any","entryType":"property"},{"name":"_debugCanvasContext","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_registerFunc","documentation":"","type":"any","entryType":"property"},{"name":"_audioEngine","documentation":"","type":"any","entryType":"property"}]},{"name":"AudioEngine","documentation":"","type":"typeof AudioEngine","constructors":[{"parameters":[],"returnType":"AudioEngine","documentation":""}],"entryType":"class","functions":[{"name":"_unlockiOSaudio","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_initializeAudioContext","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getGlobalVolume","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"setGlobalVolume","documentation":"","type":"(newVolume: number) => void","functionBody":[{"parameters":[{"name":"newVolume","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"connectToAnalyser","documentation":"","type":"(analyser: Analyser) => void","functionBody":[{"parameters":[{"name":"analyser","documentation":"","type":"Analyser"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_audioContext","documentation":"","type":"any","entryType":"property"},{"name":"_audioContextInitialized","documentation":"","type":"any","entryType":"property"},{"name":"canUseWebAudio","documentation":"","type":"boolean","entryType":"property"},{"name":"masterGain","documentation":"","type":"GainNode","entryType":"property"},{"name":"_connectedAnalyser","documentation":"","type":"any","entryType":"property"},{"name":"WarnedWebAudioUnsupported","documentation":"","type":"boolean","entryType":"property"},{"name":"unlocked","documentation":"","type":"boolean","entryType":"property"},{"name":"onAudioUnlocked","documentation":"","type":"() => any","entryType":"property"},{"name":"isMP3supported","documentation":"","type":"boolean","entryType":"property"},{"name":"isOGGsupported","documentation":"","type":"boolean","entryType":"property"},{"name":"audioContext","documentation":"","type":"AudioContext","entryType":"property"}]},{"name":"Sound","documentation":"","type":"typeof Sound","constructors":[{"parameters":[{"name":"name","documentation":"Name of your sound","type":"string"},{"name":"urlOrArrayBuffer","documentation":"Url to the sound to load async or ArrayBuffer","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"readyToPlayCallback","documentation":"Provide a callback function if you'd like to load your code once the sound is ready to be played","type":"() => void"},{"name":"options","documentation":"Objects to provide with the current available options: autoplay, loop, volume, spatialSound, maxDistance, rolloffFactor, refDistance, distanceModel, panningModel, streaming","type":"any"}],"returnType":"Sound","documentation":"Create a sound and attach it to a scene"}],"entryType":"class","functions":[{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_soundLoaded","documentation":"","type":"(audioData: any) => any","functionBody":[{"parameters":[{"name":"audioData","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setAudioBuffer","documentation":"","type":"(audioBuffer: AudioBuffer) => void","functionBody":[{"parameters":[{"name":"audioBuffer","documentation":"","type":"AudioBuffer"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateOptions","documentation":"","type":"(options: any) => void","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_createSpatialParameters","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updateSpatialParameters","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"switchPanningModelToHRTF","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"switchPanningModelToEqualPower","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_switchPanningModel","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"connectToSoundTrackAudioNode","documentation":"","type":"(soundTrackAudioNode: AudioNode) => void","functionBody":[{"parameters":[{"name":"soundTrackAudioNode","documentation":"","type":"AudioNode"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setDirectionalCone","documentation":"Transform this sound into a directional source","type":"(coneInnerAngle: number, coneOuterAngle: number, coneOuterGain: number) => void","functionBody":[{"parameters":[{"name":"coneInnerAngle","documentation":"Size of the inner cone in degree","type":"number"},{"name":"coneOuterAngle","documentation":"Size of the outer cone in degree","type":"number"},{"name":"coneOuterGain","documentation":"Volume of the sound outside the outer cone (between 0.0 and 1.0)","type":"number"}],"returnType":"void","documentation":"Transform this sound into a directional source"}],"entryType":"function"},{"name":"setPosition","documentation":"","type":"(newPosition: Vector3) => void","functionBody":[{"parameters":[{"name":"newPosition","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setLocalDirectionToMesh","documentation":"","type":"(newLocalDirection: Vector3) => void","functionBody":[{"parameters":[{"name":"newLocalDirection","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateDirection","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"updateDistanceFromListener","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setAttenuationFunction","documentation":"","type":"(callback: (currentVolume: number, currentDistance: number, maxDistance: number, refDistance: num...","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(currentVolume: number, currentDistance: number, maxDistance: number, refDistance: number, rollof..."}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"play","documentation":"Play the sound","type":"(time?: number, offset?: number) => void","functionBody":[{"parameters":[{"name":"time","documentation":"(optional) Start the sound after X seconds. Start immediately (0) by default.","type":"number"},{"name":"offset","documentation":"(optional) Start the sound setting it at a specific time","type":"number"}],"returnType":"void","documentation":"Play the sound"}],"entryType":"function"},{"name":"_onended","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"stop","documentation":"Stop the sound","type":"(time?: number) => void","functionBody":[{"parameters":[{"name":"time","documentation":"(optional) Stop the sound after X seconds. Stop immediately (0) by default.","type":"number"}],"returnType":"void","documentation":"Stop the sound"}],"entryType":"function"},{"name":"pause","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setVolume","documentation":"","type":"(newVolume: number, time?: number) => void","functionBody":[{"parameters":[{"name":"newVolume","documentation":"","type":"number"},{"name":"time","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setPlaybackRate","documentation":"","type":"(newPlaybackRate: number) => void","functionBody":[{"parameters":[{"name":"newPlaybackRate","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getVolume","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"attachToMesh","documentation":"","type":"(meshToConnectTo: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"meshToConnectTo","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachFromMesh","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_onRegisterAfterWorldMatrixUpdate","documentation":"","type":"(connectedMesh: any) => any","functionBody":[{"parameters":[{"name":"connectedMesh","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => Sound","functionBody":[{"parameters":[],"returnType":"Sound","documentation":""}],"entryType":"function"},{"name":"getAudioBuffer","documentation":"","type":"() => AudioBuffer","functionBody":[{"parameters":[],"returnType":"AudioBuffer","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedSound: any, scene: Scene, rootUrl: string, sourceSound?: Sound) => Sound","functionBody":[{"parameters":[{"name":"parsedSound","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"},{"name":"sourceSound","documentation":"","type":"Sound"}],"returnType":"Sound","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"autoplay","documentation":"","type":"boolean","entryType":"property"},{"name":"loop","documentation":"","type":"boolean","entryType":"property"},{"name":"useCustomAttenuation","documentation":"","type":"boolean","entryType":"property"},{"name":"soundTrackId","documentation":"","type":"number","entryType":"property"},{"name":"spatialSound","documentation":"","type":"boolean","entryType":"property"},{"name":"refDistance","documentation":"","type":"number","entryType":"property"},{"name":"rolloffFactor","documentation":"","type":"number","entryType":"property"},{"name":"maxDistance","documentation":"","type":"number","entryType":"property"},{"name":"distanceModel","documentation":"","type":"string","entryType":"property"},{"name":"_panningModel","documentation":"","type":"any","entryType":"property"},{"name":"onended","documentation":"","type":"() => any","entryType":"property"},{"name":"_playbackRate","documentation":"","type":"any","entryType":"property"},{"name":"_streaming","documentation":"","type":"any","entryType":"property"},{"name":"_startTime","documentation":"","type":"any","entryType":"property"},{"name":"_startOffset","documentation":"","type":"any","entryType":"property"},{"name":"_position","documentation":"","type":"any","entryType":"property"},{"name":"_localDirection","documentation":"","type":"any","entryType":"property"},{"name":"_volume","documentation":"","type":"any","entryType":"property"},{"name":"_isLoaded","documentation":"","type":"any","entryType":"property"},{"name":"_isReadyToPlay","documentation":"","type":"any","entryType":"property"},{"name":"isPlaying","documentation":"","type":"boolean","entryType":"property"},{"name":"isPaused","documentation":"","type":"boolean","entryType":"property"},{"name":"_isDirectional","documentation":"","type":"any","entryType":"property"},{"name":"_readyToPlayCallback","documentation":"","type":"any","entryType":"property"},{"name":"_audioBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_soundSource","documentation":"","type":"any","entryType":"property"},{"name":"_streamingSource","documentation":"","type":"any","entryType":"property"},{"name":"_soundPanner","documentation":"","type":"any","entryType":"property"},{"name":"_soundGain","documentation":"","type":"any","entryType":"property"},{"name":"_inputAudioNode","documentation":"","type":"any","entryType":"property"},{"name":"_ouputAudioNode","documentation":"","type":"any","entryType":"property"},{"name":"_coneInnerAngle","documentation":"","type":"any","entryType":"property"},{"name":"_coneOuterAngle","documentation":"","type":"any","entryType":"property"},{"name":"_coneOuterGain","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_connectedMesh","documentation":"","type":"any","entryType":"property"},{"name":"_customAttenuationFunction","documentation":"","type":"any","entryType":"property"},{"name":"_registerFunc","documentation":"","type":"any","entryType":"property"},{"name":"_isOutputConnected","documentation":"","type":"any","entryType":"property"},{"name":"_htmlAudioElement","documentation":"","type":"any","entryType":"property"},{"name":"_urlType","documentation":"","type":"any","entryType":"property"},{"name":"_soundUrl","documentation":"","type":"any","entryType":"property"}]},{"name":"SoundTrack","documentation":"","type":"typeof SoundTrack","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"options","documentation":"","type":"any"}],"returnType":"SoundTrack","documentation":""}],"entryType":"class","functions":[{"name":"_initializeSoundTrackAudioGraph","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"AddSound","documentation":"","type":"(sound: Sound) => void","functionBody":[{"parameters":[{"name":"sound","documentation":"","type":"Sound"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"RemoveSound","documentation":"","type":"(sound: Sound) => void","functionBody":[{"parameters":[{"name":"sound","documentation":"","type":"Sound"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setVolume","documentation":"","type":"(newVolume: number) => void","functionBody":[{"parameters":[{"name":"newVolume","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"switchPanningModelToHRTF","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"switchPanningModelToEqualPower","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"connectToAnalyser","documentation":"","type":"(analyser: Analyser) => void","functionBody":[{"parameters":[{"name":"analyser","documentation":"","type":"Analyser"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_outputAudioNode","documentation":"","type":"any","entryType":"property"},{"name":"_inputAudioNode","documentation":"","type":"any","entryType":"property"},{"name":"_trackConvolver","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"id","documentation":"","type":"number","entryType":"property"},{"name":"soundCollection","documentation":"","type":"Sound[]","entryType":"property"},{"name":"_isMainTrack","documentation":"","type":"any","entryType":"property"},{"name":"_connectedAnalyser","documentation":"","type":"any","entryType":"property"},{"name":"_options","documentation":"","type":"any","entryType":"property"},{"name":"_isInitialized","documentation":"","type":"any","entryType":"property"}]},{"name":"Bone","documentation":"","type":"typeof Bone","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"skeleton","documentation":"","type":"Skeleton"},{"name":"parentBone","documentation":"","type":"Bone"},{"name":"matrix","documentation":"","type":"Matrix"},{"name":"restPose","documentation":"","type":"Matrix"}],"returnType":"Bone","documentation":""}],"entryType":"class","functions":[{"name":"getParent","documentation":"","type":"() => Bone","functionBody":[{"parameters":[],"returnType":"Bone","documentation":""}],"entryType":"function"},{"name":"getLocalMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getBaseMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getRestPose","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"returnToRest","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getWorldMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getInvertedAbsoluteTransform","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getAbsoluteTransform","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"updateMatrix","documentation":"","type":"(matrix: Matrix, updateDifferenceMatrix?: boolean) => void","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"},{"name":"updateDifferenceMatrix","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateDifferenceMatrix","documentation":"","type":"(rootMatrix?: Matrix) => void","functionBody":[{"parameters":[{"name":"rootMatrix","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"markAsDirty","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"copyAnimationRange","documentation":"","type":"(source: Bone, rangeName: string, frameOffset: number, rescaleAsRequired?: boolean, skelDimension...","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"Bone"},{"name":"rangeName","documentation":"","type":"string"},{"name":"frameOffset","documentation":"","type":"number"},{"name":"rescaleAsRequired","documentation":"","type":"boolean"},{"name":"skelDimensionsRatio","documentation":"","type":"Vector3"}],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"children","documentation":"","type":"Bone[]","entryType":"property"},{"name":"animations","documentation":"","type":"Animation[]","entryType":"property"},{"name":"length","documentation":"","type":"number","entryType":"property"},{"name":"_skeleton","documentation":"","type":"any","entryType":"property"},{"name":"_matrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"_restPose","documentation":"","type":"any","entryType":"property"},{"name":"_baseMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_worldTransform","documentation":"","type":"any","entryType":"property"},{"name":"_absoluteTransform","documentation":"","type":"any","entryType":"property"},{"name":"_invertedAbsoluteTransform","documentation":"","type":"any","entryType":"property"},{"name":"_parent","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Node"]},{"name":"Skeleton","documentation":"","type":"typeof Skeleton","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Skeleton","documentation":""}],"entryType":"class","functions":[{"name":"getTransformMatrices","documentation":"","type":"(mesh: AbstractMesh) => Float32Array","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"Float32Array","documentation":""}],"entryType":"function"},{"name":"getScene","documentation":"","type":"() => Scene","functionBody":[{"parameters":[],"returnType":"Scene","documentation":""}],"entryType":"function"},{"name":"toString","documentation":"","type":"(fullDetails?: boolean) => string","functionBody":[{"parameters":[{"name":"fullDetails","documentation":"- support for multiple levels of logging within scene loading","type":"boolean"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getBoneIndexByName","documentation":"Get bone's index searching by name\n@return {number} Indice of the bone. Returns -1 if not found","type":"(name: string) => number","functionBody":[{"parameters":[{"name":"name","documentation":"is bone's name to search for","type":"string"}],"returnType":"number","documentation":"Get bone's index searching by name\n@return {number} Indice of the bone. Returns -1 if not found"}],"entryType":"function"},{"name":"createAnimationRange","documentation":"","type":"(name: string, from: number, to: number) => void","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"from","documentation":"","type":"number"},{"name":"to","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"deleteAnimationRange","documentation":"","type":"(name: string, deleteFrames?: boolean) => void","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"deleteFrames","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getAnimationRange","documentation":"","type":"(name: string) => AnimationRange","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"AnimationRange","documentation":""}],"entryType":"function"},{"name":"getAnimationRanges","documentation":"Returns as an Array, all AnimationRanges defined on this skeleton","type":"() => AnimationRange[]","functionBody":[{"parameters":[],"returnType":"AnimationRange[]","documentation":"Returns as an Array, all AnimationRanges defined on this skeleton"}],"entryType":"function"},{"name":"copyAnimationRange","documentation":"note: This is not for a complete retargeting, only between very similar skeleton's with only possible bone length differences","type":"(source: Skeleton, name: string, rescaleAsRequired?: boolean) => boolean","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"Skeleton"},{"name":"name","documentation":"","type":"string"},{"name":"rescaleAsRequired","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":"note: This is not for a complete retargeting, only between very similar skeleton's with only possible bone length differences"}],"entryType":"function"},{"name":"returnToRest","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getHighestAnimationFrame","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"beginAnimation","documentation":"","type":"(name: string, loop?: boolean, speedRatio?: number, onAnimationEnd?: () => void) => Animatable","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"loop","documentation":"","type":"boolean"},{"name":"speedRatio","documentation":"","type":"number"},{"name":"onAnimationEnd","documentation":"","type":"() => void"}],"returnType":"Animatable","documentation":""}],"entryType":"function"},{"name":"_markAsDirty","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_registerMeshWithPoseMatrix","documentation":"","type":"(mesh: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_unregisterMeshWithPoseMatrix","documentation":"","type":"(mesh: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_computeTransformMatrices","documentation":"","type":"(targetMatrix: Float32Array, initialSkinMatrix: Matrix) => void","functionBody":[{"parameters":[{"name":"targetMatrix","documentation":"","type":"Float32Array"},{"name":"initialSkinMatrix","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"prepare","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getAnimatables","documentation":"","type":"() => IAnimatable[]","functionBody":[{"parameters":[],"returnType":"IAnimatable[]","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(name: string, id: string) => Skeleton","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"id","documentation":"","type":"string"}],"returnType":"Skeleton","documentation":""}],"entryType":"function"},{"name":"enableBlending","documentation":"","type":"(blendingSpeed?: number) => void","functionBody":[{"parameters":[{"name":"blendingSpeed","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedSkeleton: any, scene: Scene) => Skeleton","functionBody":[{"parameters":[{"name":"parsedSkeleton","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Skeleton","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"id","documentation":"","type":"string","entryType":"property"},{"name":"bones","documentation":"","type":"Bone[]","entryType":"property"},{"name":"dimensionsAtRest","documentation":"","type":"Vector3","entryType":"property"},{"name":"needInitialSkinMatrix","documentation":"","type":"boolean","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_isDirty","documentation":"","type":"any","entryType":"property"},{"name":"_transformMatrices","documentation":"","type":"any","entryType":"property"},{"name":"_meshesWithPoseMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_animatables","documentation":"","type":"any","entryType":"property"},{"name":"_identity","documentation":"","type":"any","entryType":"property"},{"name":"_ranges","documentation":"","type":"any","entryType":"property"}]},{"name":"ArcRotateCamera","documentation":"","type":"typeof ArcRotateCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"alpha","documentation":"","type":"number"},{"name":"beta","documentation":"","type":"number"},{"name":"radius","documentation":"","type":"number"},{"name":"target","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"ArcRotateCamera","documentation":""}],"entryType":"class","functions":[{"name":"_initCache","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateCache","documentation":"","type":"(ignoreParentClass?: boolean) => void","functionBody":[{"parameters":[{"name":"ignoreParentClass","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getTargetPosition","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_isSynchronizedViewMatrix","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean, useCtrlForPanning?: boolean, panningMouseButto...","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"},{"name":"useCtrlForPanning","documentation":"","type":"boolean"},{"name":"panningMouseButton","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_checkLimits","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"rebuildAnglesAndRadius","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setPosition","documentation":"","type":"(position: Vector3) => void","functionBody":[{"parameters":[{"name":"position","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setTarget","documentation":"","type":"(target: Vector3, toBoundingCenter?: boolean) => void","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"Vector3"},{"name":"toBoundingCenter","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getViewMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"zoomOn","documentation":"","type":"(meshes?: AbstractMesh[], doNotUpdateMaxZ?: boolean) => void","functionBody":[{"parameters":[{"name":"meshes","documentation":"","type":"AbstractMesh[]"},{"name":"doNotUpdateMaxZ","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"focusOn","documentation":"","type":"(meshesOrMinMaxVectorAndDistance: any, doNotUpdateMaxZ?: boolean) => void","functionBody":[{"parameters":[{"name":"meshesOrMinMaxVectorAndDistance","documentation":"","type":"any"},{"name":"doNotUpdateMaxZ","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createRigCamera","documentation":"@override\nOverride Camera.createRigCamera","type":"(name: string, cameraIndex: number) => Camera","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"cameraIndex","documentation":"","type":"number"}],"returnType":"Camera","documentation":"@override\nOverride Camera.createRigCamera"}],"entryType":"function"},{"name":"_updateRigCameras","documentation":"@override\nOverride Camera._updateRigCameras","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"@override\nOverride Camera._updateRigCameras"}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"alpha","documentation":"","type":"number","entryType":"property"},{"name":"beta","documentation":"","type":"number","entryType":"property"},{"name":"radius","documentation":"","type":"number","entryType":"property"},{"name":"target","documentation":"","type":"Vector3","entryType":"property"},{"name":"inertialAlphaOffset","documentation":"","type":"number","entryType":"property"},{"name":"inertialBetaOffset","documentation":"","type":"number","entryType":"property"},{"name":"inertialRadiusOffset","documentation":"","type":"number","entryType":"property"},{"name":"lowerAlphaLimit","documentation":"","type":"any","entryType":"property"},{"name":"upperAlphaLimit","documentation":"","type":"any","entryType":"property"},{"name":"lowerBetaLimit","documentation":"","type":"number","entryType":"property"},{"name":"upperBetaLimit","documentation":"","type":"number","entryType":"property"},{"name":"lowerRadiusLimit","documentation":"","type":"any","entryType":"property"},{"name":"upperRadiusLimit","documentation":"","type":"any","entryType":"property"},{"name":"inertialPanningX","documentation":"","type":"number","entryType":"property"},{"name":"inertialPanningY","documentation":"","type":"number","entryType":"property"},{"name":"angularSensibilityX","documentation":"","type":"number","entryType":"property"},{"name":"angularSensibilityY","documentation":"","type":"number","entryType":"property"},{"name":"pinchPrecision","documentation":"","type":"number","entryType":"property"},{"name":"panningSensibility","documentation":"","type":"number","entryType":"property"},{"name":"keysUp","documentation":"","type":"number[]","entryType":"property"},{"name":"keysDown","documentation":"","type":"number[]","entryType":"property"},{"name":"keysLeft","documentation":"","type":"number[]","entryType":"property"},{"name":"keysRight","documentation":"","type":"number[]","entryType":"property"},{"name":"wheelPrecision","documentation":"","type":"number","entryType":"property"},{"name":"zoomOnFactor","documentation":"","type":"number","entryType":"property"},{"name":"targetScreenOffset","documentation":"","type":"Vector2","entryType":"property"},{"name":"allowUpsideDown","documentation":"","type":"boolean","entryType":"property"},{"name":"_viewMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"_useCtrlForPanning","documentation":"","type":"boolean","entryType":"property"},{"name":"_panningMouseButton","documentation":"","type":"number","entryType":"property"},{"name":"inputs","documentation":"","type":"ArcRotateCameraInputsManager","entryType":"property"},{"name":"_reset","documentation":"","type":"() => void","entryType":"property"},{"name":"panningAxis","documentation":"","type":"Vector3","entryType":"property"},{"name":"_localDirection","documentation":"","type":"any","entryType":"property"},{"name":"_transformedDirection","documentation":"","type":"any","entryType":"property"},{"name":"onCollide","documentation":"","type":"(collidedMesh: AbstractMesh) => void","entryType":"property"},{"name":"checkCollisions","documentation":"","type":"boolean","entryType":"property"},{"name":"collisionRadius","documentation":"","type":"Vector3","entryType":"property"},{"name":"_collider","documentation":"","type":"any","entryType":"property"},{"name":"_previousPosition","documentation":"","type":"any","entryType":"property"},{"name":"_collisionVelocity","documentation":"","type":"any","entryType":"property"},{"name":"_newPosition","documentation":"","type":"any","entryType":"property"},{"name":"_previousAlpha","documentation":"","type":"any","entryType":"property"},{"name":"_previousBeta","documentation":"","type":"any","entryType":"property"},{"name":"_previousRadius","documentation":"","type":"any","entryType":"property"},{"name":"_collisionTriggered","documentation":"","type":"any","entryType":"property"},{"name":"_targetBoundingCenter","documentation":"","type":"any","entryType":"property"},{"name":"_onCollisionPositionChange","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.TargetCamera"]},{"name":"ArcRotateCameraInputsManager","documentation":"","type":"typeof ArcRotateCameraInputsManager","constructors":[{"parameters":[{"name":"camera","documentation":"","type":"ArcRotateCamera"}],"returnType":"ArcRotateCameraInputsManager","documentation":""}],"entryType":"class","functions":[{"name":"addMouseWheel","documentation":"","type":"() => ArcRotateCameraInputsManager","functionBody":[{"parameters":[],"returnType":"ArcRotateCameraInputsManager","documentation":""}],"entryType":"function"},{"name":"addPointers","documentation":"","type":"() => ArcRotateCameraInputsManager","functionBody":[{"parameters":[],"returnType":"ArcRotateCameraInputsManager","documentation":""}],"entryType":"function"},{"name":"addKeyboard","documentation":"","type":"() => ArcRotateCameraInputsManager","functionBody":[{"parameters":[],"returnType":"ArcRotateCameraInputsManager","documentation":""}],"entryType":"function"},{"name":"addGamepad","documentation":"","type":"() => ArcRotateCameraInputsManager","functionBody":[{"parameters":[],"returnType":"ArcRotateCameraInputsManager","documentation":""}],"entryType":"function"},{"name":"addVRDeviceOrientation","documentation":"","type":"() => ArcRotateCameraInputsManager","functionBody":[{"parameters":[],"returnType":"ArcRotateCameraInputsManager","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.CameraInputsManager"]},{"name":"Camera","documentation":"","type":"typeof Camera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Camera","documentation":""}],"entryType":"class","functions":[{"name":"toString","documentation":"","type":"(fullDetails?: boolean) => string","functionBody":[{"parameters":[{"name":"fullDetails","documentation":"- support for multiple levels of logging within scene loading","type":"boolean"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getActiveMeshes","documentation":"","type":"() => SmartArray<Mesh>","functionBody":[{"parameters":[],"returnType":"SmartArray<Mesh>","documentation":""}],"entryType":"function"},{"name":"isActiveMesh","documentation":"","type":"(mesh: Mesh) => boolean","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_initCache","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateCache","documentation":"","type":"(ignoreParentClass?: boolean) => void","functionBody":[{"parameters":[{"name":"ignoreParentClass","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateFromScene","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_isSynchronized","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_isSynchronizedViewMatrix","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_isSynchronizedProjectionMatrix","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"update","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_cascadePostProcessesToRigCams","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"attachPostProcess","documentation":"","type":"(postProcess: PostProcess, insertAt?: number) => number","functionBody":[{"parameters":[{"name":"postProcess","documentation":"","type":"PostProcess"},{"name":"insertAt","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"detachPostProcess","documentation":"","type":"(postProcess: PostProcess, atIndices?: any) => number[]","functionBody":[{"parameters":[{"name":"postProcess","documentation":"","type":"PostProcess"},{"name":"atIndices","documentation":"","type":"any"}],"returnType":"number[]","documentation":""}],"entryType":"function"},{"name":"getWorldMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"_getViewMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getViewMatrix","documentation":"","type":"(force?: boolean) => Matrix","functionBody":[{"parameters":[{"name":"force","documentation":"","type":"boolean"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"_computeViewMatrix","documentation":"","type":"(force?: boolean) => Matrix","functionBody":[{"parameters":[{"name":"force","documentation":"","type":"boolean"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getProjectionMatrix","documentation":"","type":"(force?: boolean) => Matrix","functionBody":[{"parameters":[{"name":"force","documentation":"","type":"boolean"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getTranformationMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"updateFrustumPlanes","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"isInFrustum","documentation":"","type":"(target: ICullable) => boolean","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"ICullable"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"isCompletelyInFrustum","documentation":"","type":"(target: ICullable) => boolean","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"ICullable"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setCameraRigMode","documentation":"","type":"(mode: number, rigParams: any) => void","functionBody":[{"parameters":[{"name":"mode","documentation":"","type":"number"},{"name":"rigParams","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getVRProjectionMatrix","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getWebVRProjectionMatrix","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setCameraRigParameter","documentation":"","type":"(name: string, value: any) => void","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createRigCamera","documentation":"needs to be overridden by children so sub has required properties to be copied","type":"(name: string, cameraIndex: number) => Camera","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"cameraIndex","documentation":"","type":"number"}],"returnType":"Camera","documentation":"needs to be overridden by children so sub has required properties to be copied"}],"entryType":"function"},{"name":"_updateRigCameras","documentation":"May need to be overridden by children","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"May need to be overridden by children"}],"entryType":"function"},{"name":"_setupInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(name: string) => Camera","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"Camera","documentation":""}],"entryType":"function"},{"name":"GetConstructorFromName","documentation":"","type":"(type: string, name: string, scene: Scene, interaxial_distance?: number, isStereoscopicSideBySide...","functionBody":[{"parameters":[{"name":"type","documentation":"","type":"string"},{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"interaxial_distance","documentation":"","type":"number"},{"name":"isStereoscopicSideBySide","documentation":"","type":"boolean"}],"returnType":"() => Camera","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedCamera: any, scene: Scene) => Camera","functionBody":[{"parameters":[{"name":"parsedCamera","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Camera","documentation":""}],"entryType":"function"}],"properties":[{"name":"inputs","documentation":"","type":"CameraInputsManager<Camera>","entryType":"property"},{"name":"_PERSPECTIVE_CAMERA","documentation":"","type":"any","entryType":"property"},{"name":"_ORTHOGRAPHIC_CAMERA","documentation":"","type":"any","entryType":"property"},{"name":"_FOVMODE_VERTICAL_FIXED","documentation":"","type":"any","entryType":"property"},{"name":"_FOVMODE_HORIZONTAL_FIXED","documentation":"","type":"any","entryType":"property"},{"name":"_RIG_MODE_NONE","documentation":"","type":"any","entryType":"property"},{"name":"_RIG_MODE_STEREOSCOPIC_ANAGLYPH","documentation":"","type":"any","entryType":"property"},{"name":"_RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL","documentation":"","type":"any","entryType":"property"},{"name":"_RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED","documentation":"","type":"any","entryType":"property"},{"name":"_RIG_MODE_STEREOSCOPIC_OVERUNDER","documentation":"","type":"any","entryType":"property"},{"name":"_RIG_MODE_VR","documentation":"","type":"any","entryType":"property"},{"name":"_RIG_MODE_WEBVR","documentation":"","type":"any","entryType":"property"},{"name":"PERSPECTIVE_CAMERA","documentation":"","type":"number","entryType":"property"},{"name":"ORTHOGRAPHIC_CAMERA","documentation":"","type":"number","entryType":"property"},{"name":"FOVMODE_VERTICAL_FIXED","documentation":"","type":"number","entryType":"property"},{"name":"FOVMODE_HORIZONTAL_FIXED","documentation":"","type":"number","entryType":"property"},{"name":"RIG_MODE_NONE","documentation":"","type":"number","entryType":"property"},{"name":"RIG_MODE_STEREOSCOPIC_ANAGLYPH","documentation":"","type":"number","entryType":"property"},{"name":"RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL","documentation":"","type":"number","entryType":"property"},{"name":"RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED","documentation":"","type":"number","entryType":"property"},{"name":"RIG_MODE_STEREOSCOPIC_OVERUNDER","documentation":"","type":"number","entryType":"property"},{"name":"RIG_MODE_VR","documentation":"","type":"number","entryType":"property"},{"name":"RIG_MODE_WEBVR","documentation":"","type":"number","entryType":"property"},{"name":"ForceAttachControlToAlwaysPreventDefault","documentation":"","type":"boolean","entryType":"property"},{"name":"position","documentation":"","type":"Vector3","entryType":"property"},{"name":"upVector","documentation":"","type":"Vector3","entryType":"property"},{"name":"orthoLeft","documentation":"","type":"any","entryType":"property"},{"name":"orthoRight","documentation":"","type":"any","entryType":"property"},{"name":"orthoBottom","documentation":"","type":"any","entryType":"property"},{"name":"orthoTop","documentation":"","type":"any","entryType":"property"},{"name":"fov","documentation":"","type":"number","entryType":"property"},{"name":"minZ","documentation":"","type":"number","entryType":"property"},{"name":"maxZ","documentation":"","type":"number","entryType":"property"},{"name":"inertia","documentation":"","type":"number","entryType":"property"},{"name":"mode","documentation":"","type":"number","entryType":"property"},{"name":"isIntermediate","documentation":"","type":"boolean","entryType":"property"},{"name":"viewport","documentation":"","type":"Viewport","entryType":"property"},{"name":"layerMask","documentation":"","type":"number","entryType":"property"},{"name":"fovMode","documentation":"","type":"number","entryType":"property"},{"name":"cameraRigMode","documentation":"","type":"number","entryType":"property"},{"name":"interaxialDistance","documentation":"","type":"number","entryType":"property"},{"name":"isStereoscopicSideBySide","documentation":"","type":"boolean","entryType":"property"},{"name":"_cameraRigParams","documentation":"","type":"any","entryType":"property"},{"name":"_rigCameras","documentation":"","type":"Camera[]","entryType":"property"},{"name":"_rigPostProcess","documentation":"","type":"PostProcess","entryType":"property"},{"name":"_computedViewMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_projectionMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"_worldMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_postProcesses","documentation":"","type":"PostProcess[]","entryType":"property"},{"name":"_transformMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_activeMeshes","documentation":"","type":"SmartArray<Mesh>","entryType":"property"},{"name":"_globalPosition","documentation":"","type":"any","entryType":"property"},{"name":"_frustumPlanes","documentation":"","type":"any","entryType":"property"},{"name":"_refreshFrustumPlanes","documentation":"","type":"any","entryType":"property"},{"name":"globalPosition","documentation":"","type":"Vector3","entryType":"property"}],"heritageClauses":["BABYLON.Node"]},{"name":"CameraInputsManager","documentation":"","type":"typeof CameraInputsManager","constructors":[{"parameters":[{"name":"camera","documentation":"","type":"TCamera"}],"returnType":"CameraInputsManager<TCamera>","documentation":""}],"entryType":"class","functions":[{"name":"add","documentation":"","type":"(input: ICameraInput<TCamera>) => void","functionBody":[{"parameters":[{"name":"input","documentation":"","type":"ICameraInput<TCamera>"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"remove","documentation":"","type":"(inputToRemove: ICameraInput<TCamera>) => void","functionBody":[{"parameters":[{"name":"inputToRemove","documentation":"","type":"ICameraInput<TCamera>"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"removeByType","documentation":"","type":"(inputType: string) => void","functionBody":[{"parameters":[{"name":"inputType","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_addCheckInputs","documentation":"","type":"(fn: any) => any","functionBody":[{"parameters":[{"name":"fn","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"attachInput","documentation":"","type":"(input: ICameraInput<TCamera>) => void","functionBody":[{"parameters":[{"name":"input","documentation":"","type":"ICameraInput<TCamera>"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"attachElement","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachElement","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"rebuildInputCheck","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"clear","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"(serializedCamera: any) => void","functionBody":[{"parameters":[{"name":"serializedCamera","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"parse","documentation":"","type":"(parsedCamera: any) => void","functionBody":[{"parameters":[{"name":"parsedCamera","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"attached","documentation":"","type":"CameraInputsMap<TCamera>","entryType":"property"},{"name":"attachedElement","documentation":"","type":"HTMLElement","entryType":"property"},{"name":"noPreventDefault","documentation":"","type":"boolean","entryType":"property"},{"name":"camera","documentation":"","type":"TCamera","entryType":"property"},{"name":"checkInputs","documentation":"","type":"() => void","entryType":"property"}]},{"name":"DeviceOrientationCamera","documentation":"","type":"typeof DeviceOrientationCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"DeviceOrientationCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"_checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"resetToCurrentRotation","documentation":"","type":"(axis?: Axis) => void","functionBody":[{"parameters":[{"name":"axis","documentation":"","type":"Axis"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_initialQuaternion","documentation":"","type":"any","entryType":"property"},{"name":"_quaternionCache","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.FreeCamera"]},{"name":"FollowCamera","documentation":"","type":"typeof FollowCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"},{"name":"target","documentation":"","type":"AbstractMesh"}],"returnType":"FollowCamera","documentation":""}],"entryType":"class","functions":[{"name":"getRadians","documentation":"","type":"(degrees: any) => any","functionBody":[{"parameters":[{"name":"degrees","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"follow","documentation":"","type":"(cameraTarget: any) => any","functionBody":[{"parameters":[{"name":"cameraTarget","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"radius","documentation":"","type":"number","entryType":"property"},{"name":"rotationOffset","documentation":"","type":"number","entryType":"property"},{"name":"heightOffset","documentation":"","type":"number","entryType":"property"},{"name":"cameraAcceleration","documentation":"","type":"number","entryType":"property"},{"name":"maxCameraSpeed","documentation":"","type":"number","entryType":"property"},{"name":"target","documentation":"","type":"AbstractMesh","entryType":"property"}],"heritageClauses":["BABYLON.TargetCamera"]},{"name":"ArcFollowCamera","documentation":"","type":"typeof ArcFollowCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"alpha","documentation":"","type":"number"},{"name":"beta","documentation":"","type":"number"},{"name":"radius","documentation":"","type":"number"},{"name":"target","documentation":"","type":"AbstractMesh"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"ArcFollowCamera","documentation":""}],"entryType":"class","functions":[{"name":"follow","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"alpha","documentation":"","type":"number","entryType":"property"},{"name":"beta","documentation":"","type":"number","entryType":"property"},{"name":"radius","documentation":"","type":"number","entryType":"property"},{"name":"target","documentation":"","type":"AbstractMesh","entryType":"property"},{"name":"_cartesianCoordinates","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.TargetCamera"]},{"name":"FreeCamera","documentation":"","type":"typeof FreeCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"FreeCamera","documentation":""}],"entryType":"class","functions":[{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_collideWithWorld","documentation":"","type":"(velocity: Vector3) => void","functionBody":[{"parameters":[{"name":"velocity","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_decideIfNeedsToMove","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_updatePosition","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"ellipsoid","documentation":"","type":"Vector3","entryType":"property"},{"name":"checkCollisions","documentation":"","type":"boolean","entryType":"property"},{"name":"applyGravity","documentation":"","type":"boolean","entryType":"property"},{"name":"inputs","documentation":"","type":"FreeCameraInputsManager","entryType":"property"},{"name":"angularSensibility","documentation":"","type":"number","entryType":"property"},{"name":"keysUp","documentation":"","type":"number[]","entryType":"property"},{"name":"keysDown","documentation":"","type":"number[]","entryType":"property"},{"name":"keysLeft","documentation":"","type":"number[]","entryType":"property"},{"name":"keysRight","documentation":"","type":"number[]","entryType":"property"},{"name":"onCollide","documentation":"","type":"(collidedMesh: AbstractMesh) => void","entryType":"property"},{"name":"_collider","documentation":"","type":"any","entryType":"property"},{"name":"_needMoveForGravity","documentation":"","type":"any","entryType":"property"},{"name":"_oldPosition","documentation":"","type":"any","entryType":"property"},{"name":"_diffPosition","documentation":"","type":"any","entryType":"property"},{"name":"_newPosition","documentation":"","type":"any","entryType":"property"},{"name":"_localDirection","documentation":"","type":"Vector3","entryType":"property"},{"name":"_transformedDirection","documentation":"","type":"Vector3","entryType":"property"},{"name":"_onCollisionPositionChange","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.TargetCamera"]},{"name":"FreeCameraInputsManager","documentation":"","type":"typeof FreeCameraInputsManager","constructors":[{"parameters":[{"name":"camera","documentation":"","type":"FreeCamera"}],"returnType":"FreeCameraInputsManager","documentation":""}],"entryType":"class","functions":[{"name":"addKeyboard","documentation":"","type":"() => FreeCameraInputsManager","functionBody":[{"parameters":[],"returnType":"FreeCameraInputsManager","documentation":""}],"entryType":"function"},{"name":"addMouse","documentation":"","type":"(touchEnabled?: boolean) => FreeCameraInputsManager","functionBody":[{"parameters":[{"name":"touchEnabled","documentation":"","type":"boolean"}],"returnType":"FreeCameraInputsManager","documentation":""}],"entryType":"function"},{"name":"addGamepad","documentation":"","type":"() => FreeCameraInputsManager","functionBody":[{"parameters":[],"returnType":"FreeCameraInputsManager","documentation":""}],"entryType":"function"},{"name":"addDeviceOrientation","documentation":"","type":"() => FreeCameraInputsManager","functionBody":[{"parameters":[],"returnType":"FreeCameraInputsManager","documentation":""}],"entryType":"function"},{"name":"addTouch","documentation":"","type":"() => FreeCameraInputsManager","functionBody":[{"parameters":[],"returnType":"FreeCameraInputsManager","documentation":""}],"entryType":"function"},{"name":"addVirtualJoystick","documentation":"","type":"() => FreeCameraInputsManager","functionBody":[{"parameters":[],"returnType":"FreeCameraInputsManager","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.CameraInputsManager"]},{"name":"GamepadCamera","documentation":"","type":"typeof GamepadCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"GamepadCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"gamepadAngularSensibility","documentation":"","type":"number","entryType":"property"},{"name":"gamepadMoveSensibility","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.UniversalCamera"]},{"name":"AnaglyphFreeCamera","documentation":"","type":"typeof AnaglyphFreeCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"interaxialDistance","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"AnaglyphFreeCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.FreeCamera"]},{"name":"AnaglyphArcRotateCamera","documentation":"","type":"typeof AnaglyphArcRotateCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"alpha","documentation":"","type":"number"},{"name":"beta","documentation":"","type":"number"},{"name":"radius","documentation":"","type":"number"},{"name":"target","documentation":"","type":"any"},{"name":"interaxialDistance","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"AnaglyphArcRotateCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.ArcRotateCamera"]},{"name":"AnaglyphGamepadCamera","documentation":"","type":"typeof AnaglyphGamepadCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"interaxialDistance","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"AnaglyphGamepadCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.GamepadCamera"]},{"name":"AnaglyphUniversalCamera","documentation":"","type":"typeof AnaglyphUniversalCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"interaxialDistance","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"AnaglyphUniversalCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.UniversalCamera"]},{"name":"StereoscopicFreeCamera","documentation":"","type":"typeof StereoscopicFreeCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"interaxialDistance","documentation":"","type":"number"},{"name":"isStereoscopicSideBySide","documentation":"","type":"boolean"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"StereoscopicFreeCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.FreeCamera"]},{"name":"StereoscopicArcRotateCamera","documentation":"","type":"typeof StereoscopicArcRotateCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"alpha","documentation":"","type":"number"},{"name":"beta","documentation":"","type":"number"},{"name":"radius","documentation":"","type":"number"},{"name":"target","documentation":"","type":"any"},{"name":"interaxialDistance","documentation":"","type":"number"},{"name":"isStereoscopicSideBySide","documentation":"","type":"boolean"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"StereoscopicArcRotateCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.ArcRotateCamera"]},{"name":"StereoscopicGamepadCamera","documentation":"","type":"typeof StereoscopicGamepadCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"interaxialDistance","documentation":"","type":"number"},{"name":"isStereoscopicSideBySide","documentation":"","type":"boolean"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"StereoscopicGamepadCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.GamepadCamera"]},{"name":"StereoscopicUniversalCamera","documentation":"","type":"typeof StereoscopicUniversalCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"interaxialDistance","documentation":"","type":"number"},{"name":"isStereoscopicSideBySide","documentation":"","type":"boolean"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"StereoscopicUniversalCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.UniversalCamera"]},{"name":"TargetCamera","documentation":"","type":"typeof TargetCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"TargetCamera","documentation":""}],"entryType":"class","functions":[{"name":"getFrontPosition","documentation":"","type":"(distance: number) => Vector3","functionBody":[{"parameters":[{"name":"distance","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"_getLockedTargetPosition","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"_initCache","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateCache","documentation":"","type":"(ignoreParentClass?: boolean) => void","functionBody":[{"parameters":[{"name":"ignoreParentClass","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_isSynchronizedViewMatrix","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_computeLocalCameraSpeed","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"setTarget","documentation":"","type":"(target: Vector3) => void","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTarget","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"_decideIfNeedsToMove","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_updatePosition","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateCameraRotationMatrix","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getViewMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"createRigCamera","documentation":"@override\nOverride Camera.createRigCamera","type":"(name: string, cameraIndex: number) => Camera","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"cameraIndex","documentation":"","type":"number"}],"returnType":"Camera","documentation":"@override\nOverride Camera.createRigCamera"}],"entryType":"function"},{"name":"_updateRigCameras","documentation":"@override\nOverride Camera._updateRigCameras","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"@override\nOverride Camera._updateRigCameras"}],"entryType":"function"},{"name":"_getRigCamPosition","documentation":"","type":"(halfSpace: any, result: any) => any","functionBody":[{"parameters":[{"name":"halfSpace","documentation":"","type":"any"},{"name":"result","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"cameraDirection","documentation":"","type":"Vector3","entryType":"property"},{"name":"cameraRotation","documentation":"","type":"Vector2","entryType":"property"},{"name":"rotation","documentation":"","type":"Vector3","entryType":"property"},{"name":"rotationQuaternion","documentation":"","type":"Quaternion","entryType":"property"},{"name":"speed","documentation":"","type":"number","entryType":"property"},{"name":"noRotationConstraint","documentation":"","type":"boolean","entryType":"property"},{"name":"lockedTarget","documentation":"","type":"any","entryType":"property"},{"name":"_currentTarget","documentation":"","type":"Vector3","entryType":"property"},{"name":"_viewMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"_camMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"_cameraTransformMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"_cameraRotationMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"_rigCamTransformMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_referencePoint","documentation":"","type":"Vector3","entryType":"property"},{"name":"_defaultUpVector","documentation":"","type":"any","entryType":"property"},{"name":"_transformedReferencePoint","documentation":"","type":"Vector3","entryType":"property"},{"name":"_lookAtTemp","documentation":"","type":"Matrix","entryType":"property"},{"name":"_tempMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"_reset","documentation":"","type":"() => void","entryType":"property"}],"heritageClauses":["BABYLON.Camera"]},{"name":"TouchCamera","documentation":"","type":"typeof TouchCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"TouchCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"_setupInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"touchAngularSensibility","documentation":"","type":"number","entryType":"property"},{"name":"touchMoveSensibility","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.FreeCamera"]},{"name":"UniversalCamera","documentation":"","type":"typeof UniversalCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"UniversalCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"gamepadAngularSensibility","documentation":"","type":"number","entryType":"property"},{"name":"gamepadMoveSensibility","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.TouchCamera"]},{"name":"VirtualJoysticksCamera","documentation":"","type":"typeof VirtualJoysticksCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"VirtualJoysticksCamera","documentation":""}],"entryType":"class","functions":[],"properties":[],"heritageClauses":["BABYLON.FreeCamera"]},{"name":"Collider","documentation":"","type":"typeof Collider","constructors":[{"parameters":[],"returnType":"Collider","documentation":""}],"entryType":"class","functions":[{"name":"_initialize","documentation":"","type":"(source: Vector3, dir: Vector3, e: number) => void","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"Vector3"},{"name":"dir","documentation":"","type":"Vector3"},{"name":"e","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_checkPointInTriangle","documentation":"","type":"(point: Vector3, pa: Vector3, pb: Vector3, pc: Vector3, n: Vector3) => boolean","functionBody":[{"parameters":[{"name":"point","documentation":"","type":"Vector3"},{"name":"pa","documentation":"","type":"Vector3"},{"name":"pb","documentation":"","type":"Vector3"},{"name":"pc","documentation":"","type":"Vector3"},{"name":"n","documentation":"","type":"Vector3"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_canDoCollision","documentation":"","type":"(sphereCenter: Vector3, sphereRadius: number, vecMin: Vector3, vecMax: Vector3) => boolean","functionBody":[{"parameters":[{"name":"sphereCenter","documentation":"","type":"Vector3"},{"name":"sphereRadius","documentation":"","type":"number"},{"name":"vecMin","documentation":"","type":"Vector3"},{"name":"vecMax","documentation":"","type":"Vector3"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_testTriangle","documentation":"","type":"(faceIndex: number, trianglePlaneArray: Plane[], p1: Vector3, p2: Vector3, p3: Vector3, hasMateri...","functionBody":[{"parameters":[{"name":"faceIndex","documentation":"","type":"number"},{"name":"trianglePlaneArray","documentation":"","type":"Plane[]"},{"name":"p1","documentation":"","type":"Vector3"},{"name":"p2","documentation":"","type":"Vector3"},{"name":"p3","documentation":"","type":"Vector3"},{"name":"hasMaterial","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_collide","documentation":"","type":"(trianglePlaneArray: Plane[], pts: Vector3[], indices: number[] | Int32Array, indexStart: number,...","functionBody":[{"parameters":[{"name":"trianglePlaneArray","documentation":"","type":"Plane[]"},{"name":"pts","documentation":"","type":"Vector3[]"},{"name":"indices","documentation":"","type":"number[] | Int32Array"},{"name":"indexStart","documentation":"","type":"number"},{"name":"indexEnd","documentation":"","type":"number"},{"name":"decal","documentation":"","type":"number"},{"name":"hasMaterial","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getResponse","documentation":"","type":"(pos: Vector3, vel: Vector3) => void","functionBody":[{"parameters":[{"name":"pos","documentation":"","type":"Vector3"},{"name":"vel","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"radius","documentation":"","type":"Vector3","entryType":"property"},{"name":"retry","documentation":"","type":"number","entryType":"property"},{"name":"velocity","documentation":"","type":"Vector3","entryType":"property"},{"name":"basePoint","documentation":"","type":"Vector3","entryType":"property"},{"name":"epsilon","documentation":"","type":"number","entryType":"property"},{"name":"collisionFound","documentation":"","type":"boolean","entryType":"property"},{"name":"velocityWorldLength","documentation":"","type":"number","entryType":"property"},{"name":"basePointWorld","documentation":"","type":"Vector3","entryType":"property"},{"name":"velocityWorld","documentation":"","type":"Vector3","entryType":"property"},{"name":"normalizedVelocity","documentation":"","type":"Vector3","entryType":"property"},{"name":"initialVelocity","documentation":"","type":"Vector3","entryType":"property"},{"name":"initialPosition","documentation":"","type":"Vector3","entryType":"property"},{"name":"nearestDistance","documentation":"","type":"number","entryType":"property"},{"name":"intersectionPoint","documentation":"","type":"Vector3","entryType":"property"},{"name":"collidedMesh","documentation":"","type":"AbstractMesh","entryType":"property"},{"name":"_collisionPoint","documentation":"","type":"any","entryType":"property"},{"name":"_planeIntersectionPoint","documentation":"","type":"any","entryType":"property"},{"name":"_tempVector","documentation":"","type":"any","entryType":"property"},{"name":"_tempVector2","documentation":"","type":"any","entryType":"property"},{"name":"_tempVector3","documentation":"","type":"any","entryType":"property"},{"name":"_tempVector4","documentation":"","type":"any","entryType":"property"},{"name":"_edge","documentation":"","type":"any","entryType":"property"},{"name":"_baseToVertex","documentation":"","type":"any","entryType":"property"},{"name":"_destinationPoint","documentation":"","type":"any","entryType":"property"},{"name":"_slidePlaneNormal","documentation":"","type":"any","entryType":"property"},{"name":"_displacementVector","documentation":"","type":"any","entryType":"property"}]},{"name":"CollisionCoordinatorWorker","documentation":"","type":"typeof CollisionCoordinatorWorker","constructors":[{"parameters":[],"returnType":"CollisionCoordinatorWorker","documentation":""}],"entryType":"class","functions":[{"name":"getNewPosition","documentation":"","type":"(position: Vector3, velocity: Vector3, collider: Collider, maximumRetry: number, excludedMesh: Ab...","functionBody":[{"parameters":[{"name":"position","documentation":"","type":"Vector3"},{"name":"velocity","documentation":"","type":"Vector3"},{"name":"collider","documentation":"","type":"Collider"},{"name":"maximumRetry","documentation":"","type":"number"},{"name":"excludedMesh","documentation":"","type":"AbstractMesh"},{"name":"onNewPosition","documentation":"","type":"(collisionIndex: number, newPosition: Vector3, collidedMesh?: AbstractMesh) => void"},{"name":"collisionIndex","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"init","documentation":"","type":"(scene: Scene) => void","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"destroy","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onMeshAdded","documentation":"","type":"(mesh: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onMeshRemoved","documentation":"","type":"(mesh: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onGeometryAdded","documentation":"","type":"(geometry: Geometry) => void","functionBody":[{"parameters":[{"name":"geometry","documentation":"","type":"Geometry"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onGeometryDeleted","documentation":"","type":"(geometry: Geometry) => void","functionBody":[{"parameters":[{"name":"geometry","documentation":"","type":"Geometry"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_scaledPosition","documentation":"","type":"any","entryType":"property"},{"name":"_scaledVelocity","documentation":"","type":"any","entryType":"property"},{"name":"_collisionsCallbackArray","documentation":"","type":"any","entryType":"property"},{"name":"_init","documentation":"","type":"any","entryType":"property"},{"name":"_runningUpdated","documentation":"","type":"any","entryType":"property"},{"name":"_runningCollisionTask","documentation":"","type":"any","entryType":"property"},{"name":"_worker","documentation":"","type":"any","entryType":"property"},{"name":"_addUpdateMeshesList","documentation":"","type":"any","entryType":"property"},{"name":"_addUpdateGeometriesList","documentation":"","type":"any","entryType":"property"},{"name":"_toRemoveMeshesArray","documentation":"","type":"any","entryType":"property"},{"name":"_toRemoveGeometryArray","documentation":"","type":"any","entryType":"property"},{"name":"SerializeMesh","documentation":"","type":"(mesh: AbstractMesh) => SerializedMesh","entryType":"property"},{"name":"SerializeGeometry","documentation":"","type":"(geometry: Geometry) => SerializedGeometry","entryType":"property"},{"name":"onMeshUpdated","documentation":"","type":"(mesh: AbstractMesh) => void","entryType":"property"},{"name":"onGeometryUpdated","documentation":"","type":"(geometry: Geometry) => void","entryType":"property"},{"name":"_afterRender","documentation":"","type":"any","entryType":"property"},{"name":"_onMessageFromWorker","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.ICollisionCoordinator"]},{"name":"CollisionCoordinatorLegacy","documentation":"","type":"typeof CollisionCoordinatorLegacy","constructors":[{"parameters":[],"returnType":"CollisionCoordinatorLegacy","documentation":""}],"entryType":"class","functions":[{"name":"getNewPosition","documentation":"","type":"(position: Vector3, velocity: Vector3, collider: Collider, maximumRetry: number, excludedMesh: Ab...","functionBody":[{"parameters":[{"name":"position","documentation":"","type":"Vector3"},{"name":"velocity","documentation":"","type":"Vector3"},{"name":"collider","documentation":"","type":"Collider"},{"name":"maximumRetry","documentation":"","type":"number"},{"name":"excludedMesh","documentation":"","type":"AbstractMesh"},{"name":"onNewPosition","documentation":"","type":"(collisionIndex: number, newPosition: Vector3, collidedMesh?: AbstractMesh) => void"},{"name":"collisionIndex","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"init","documentation":"","type":"(scene: Scene) => void","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"destroy","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onMeshAdded","documentation":"","type":"(mesh: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onMeshUpdated","documentation":"","type":"(mesh: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onMeshRemoved","documentation":"","type":"(mesh: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onGeometryAdded","documentation":"","type":"(geometry: Geometry) => void","functionBody":[{"parameters":[{"name":"geometry","documentation":"","type":"Geometry"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onGeometryUpdated","documentation":"","type":"(geometry: Geometry) => void","functionBody":[{"parameters":[{"name":"geometry","documentation":"","type":"Geometry"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onGeometryDeleted","documentation":"","type":"(geometry: Geometry) => void","functionBody":[{"parameters":[{"name":"geometry","documentation":"","type":"Geometry"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_collideWithWorld","documentation":"","type":"(position: any, velocity: any, collider: any, maximumRetry: any, finalPosition: any, excludedMesh...","functionBody":[{"parameters":[{"name":"position","documentation":"","type":"any"},{"name":"velocity","documentation":"","type":"any"},{"name":"collider","documentation":"","type":"any"},{"name":"maximumRetry","documentation":"","type":"any"},{"name":"finalPosition","documentation":"","type":"any"},{"name":"excludedMesh","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_scaledPosition","documentation":"","type":"any","entryType":"property"},{"name":"_scaledVelocity","documentation":"","type":"any","entryType":"property"},{"name":"_finalPosition","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.ICollisionCoordinator"]},{"name":"CollisionCache","documentation":"","type":"typeof CollisionCache","constructors":[{"parameters":[],"returnType":"CollisionCache","documentation":""}],"entryType":"class","functions":[{"name":"getMeshes","documentation":"","type":"() => { [n: number]: SerializedMesh; }","functionBody":[{"parameters":[],"returnType":"{ [n: number]: SerializedMesh; }","documentation":""}],"entryType":"function"},{"name":"getGeometries","documentation":"","type":"() => { [s: number]: SerializedGeometry; }","functionBody":[{"parameters":[],"returnType":"{ [s: number]: SerializedGeometry; }","documentation":""}],"entryType":"function"},{"name":"getMesh","documentation":"","type":"(id: any) => SerializedMesh","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"any"}],"returnType":"SerializedMesh","documentation":""}],"entryType":"function"},{"name":"addMesh","documentation":"","type":"(mesh: SerializedMesh) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"SerializedMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"removeMesh","documentation":"","type":"(uniqueId: number) => void","functionBody":[{"parameters":[{"name":"uniqueId","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getGeometry","documentation":"","type":"(id: string) => SerializedGeometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"SerializedGeometry","documentation":""}],"entryType":"function"},{"name":"addGeometry","documentation":"","type":"(geometry: SerializedGeometry) => void","functionBody":[{"parameters":[{"name":"geometry","documentation":"","type":"SerializedGeometry"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"removeGeometry","documentation":"","type":"(id: string) => void","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_meshes","documentation":"","type":"any","entryType":"property"},{"name":"_geometries","documentation":"","type":"any","entryType":"property"}]},{"name":"CollideWorker","documentation":"","type":"typeof CollideWorker","constructors":[{"parameters":[{"name":"collider","documentation":"","type":"Collider"},{"name":"_collisionCache","documentation":"","type":"CollisionCache"},{"name":"finalPosition","documentation":"","type":"Vector3"}],"returnType":"CollideWorker","documentation":""}],"entryType":"class","functions":[{"name":"collideWithWorld","documentation":"","type":"(position: Vector3, velocity: Vector3, maximumRetry: number, excludedMeshUniqueId?: number) => void","functionBody":[{"parameters":[{"name":"position","documentation":"","type":"Vector3"},{"name":"velocity","documentation":"","type":"Vector3"},{"name":"maximumRetry","documentation":"","type":"number"},{"name":"excludedMeshUniqueId","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"checkCollision","documentation":"","type":"(mesh: any) => any","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"processCollisionsForSubMeshes","documentation":"","type":"(transformMatrix: any, mesh: any) => any","functionBody":[{"parameters":[{"name":"transformMatrix","documentation":"","type":"any"},{"name":"mesh","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"collideForSubMesh","documentation":"","type":"(subMesh: any, transformMatrix: any, meshGeometry: any) => any","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"any"},{"name":"transformMatrix","documentation":"","type":"any"},{"name":"meshGeometry","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"checkSubmeshCollision","documentation":"","type":"(subMesh: any) => any","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"collider","documentation":"","type":"Collider","entryType":"property"},{"name":"_collisionCache","documentation":"","type":"any","entryType":"property"},{"name":"finalPosition","documentation":"","type":"any","entryType":"property"},{"name":"collisionsScalingMatrix","documentation":"","type":"any","entryType":"property"},{"name":"collisionTranformationMatrix","documentation":"","type":"any","entryType":"property"}]},{"name":"CollisionDetectorTransferable","documentation":"","type":"typeof CollisionDetectorTransferable","constructors":[{"parameters":[],"returnType":"CollisionDetectorTransferable","documentation":""}],"entryType":"class","functions":[{"name":"onInit","documentation":"","type":"(payload: InitPayload) => void","functionBody":[{"parameters":[{"name":"payload","documentation":"","type":"InitPayload"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onUpdate","documentation":"","type":"(payload: UpdatePayload) => void","functionBody":[{"parameters":[{"name":"payload","documentation":"","type":"UpdatePayload"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onCollision","documentation":"","type":"(payload: CollidePayload) => void","functionBody":[{"parameters":[{"name":"payload","documentation":"","type":"CollidePayload"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_collisionCache","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.ICollisionDetector"]},{"name":"IntersectionInfo","documentation":"","type":"typeof IntersectionInfo","constructors":[{"parameters":[{"name":"bu","documentation":"","type":"number"},{"name":"bv","documentation":"","type":"number"},{"name":"distance","documentation":"","type":"number"}],"returnType":"IntersectionInfo","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"bu","documentation":"","type":"number","entryType":"property"},{"name":"bv","documentation":"","type":"number","entryType":"property"},{"name":"distance","documentation":"","type":"number","entryType":"property"},{"name":"faceId","documentation":"","type":"number","entryType":"property"},{"name":"subMeshId","documentation":"","type":"number","entryType":"property"}]},{"name":"PickingInfo","documentation":"","type":"typeof PickingInfo","constructors":[{"parameters":[],"returnType":"PickingInfo","documentation":""}],"entryType":"class","functions":[{"name":"getNormal","documentation":"","type":"(useWorldCoordinates?: boolean, useVerticesNormals?: boolean) => Vector3","functionBody":[{"parameters":[{"name":"useWorldCoordinates","documentation":"","type":"boolean"},{"name":"useVerticesNormals","documentation":"","type":"boolean"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"getTextureCoordinates","documentation":"","type":"() => Vector2","functionBody":[{"parameters":[],"returnType":"Vector2","documentation":""}],"entryType":"function"}],"properties":[{"name":"hit","documentation":"","type":"boolean","entryType":"property"},{"name":"distance","documentation":"","type":"number","entryType":"property"},{"name":"pickedPoint","documentation":"","type":"Vector3","entryType":"property"},{"name":"pickedMesh","documentation":"","type":"AbstractMesh","entryType":"property"},{"name":"bu","documentation":"","type":"number","entryType":"property"},{"name":"bv","documentation":"","type":"number","entryType":"property"},{"name":"faceId","documentation":"","type":"number","entryType":"property"},{"name":"subMeshId","documentation":"","type":"number","entryType":"property"},{"name":"pickedSprite","documentation":"","type":"Sprite","entryType":"property"}]},{"name":"BoundingInfo2D","documentation":"Stores 2D Bounding Information.\nThis class handles a circle area and a bounding rectangle one.","type":"typeof BoundingInfo2D","constructors":[{"parameters":[],"returnType":"BoundingInfo2D","documentation":""}],"entryType":"class","functions":[{"name":"CreateFromSize","documentation":"Create a BoundingInfo2D object from a given size","type":"(size: Size) => BoundingInfo2D","functionBody":[{"parameters":[{"name":"size","documentation":"the size that will be used to set the extend, radius will be computed from it.","type":"Size"}],"returnType":"BoundingInfo2D","documentation":"Create a BoundingInfo2D object from a given size"}],"entryType":"function"},{"name":"CreateFromRadius","documentation":"Create a BoundingInfo2D object from a given radius","type":"(radius: number) => BoundingInfo2D","functionBody":[{"parameters":[{"name":"radius","documentation":"the radius to use, the extent will be computed from it.","type":"number"}],"returnType":"BoundingInfo2D","documentation":"Create a BoundingInfo2D object from a given radius"}],"entryType":"function"},{"name":"CreateFromPoints","documentation":"Create a BoundingInfo2D object from a list of points.\nThe resulted object will be the smallest bounding area that includes all the given points.","type":"(points: Vector2[]) => BoundingInfo2D","functionBody":[{"parameters":[{"name":"points","documentation":"an array of points to compute the bounding object from.","type":"Vector2[]"}],"returnType":"BoundingInfo2D","documentation":"Create a BoundingInfo2D object from a list of points.\nThe resulted object will be the smallest bounding area that includes all the given points."}],"entryType":"function"},{"name":"CreateFromSizeToRef","documentation":"Update a BoundingInfo2D object using the given Size as input","type":"(size: Size, b: BoundingInfo2D) => void","functionBody":[{"parameters":[{"name":"size","documentation":"the bounding data will be computed from this size.","type":"Size"},{"name":"b","documentation":"must be a valid/allocated object, it will contain the result of the operation","type":"BoundingInfo2D"}],"returnType":"void","documentation":"Update a BoundingInfo2D object using the given Size as input"}],"entryType":"function"},{"name":"CreateFromRadiusToRef","documentation":"Update a BoundingInfo2D object using the given radius as input","type":"(radius: number, b: BoundingInfo2D) => void","functionBody":[{"parameters":[{"name":"radius","documentation":"the bounding data will be computed from this radius","type":"number"},{"name":"b","documentation":"must be a valid/allocated object, it will contain the result of the operation","type":"BoundingInfo2D"}],"returnType":"void","documentation":"Update a BoundingInfo2D object using the given radius as input"}],"entryType":"function"},{"name":"CreateFromPointsToRef","documentation":"Update a BoundingInfo2D object using the given points array as input","type":"(points: Vector2[], b: BoundingInfo2D) => void","functionBody":[{"parameters":[{"name":"points","documentation":"the point array to use to update the bounding data","type":"Vector2[]"},{"name":"b","documentation":"must be a valid/allocated object, it will contain the result of the operation","type":"BoundingInfo2D"}],"returnType":"void","documentation":"Update a BoundingInfo2D object using the given points array as input"}],"entryType":"function"},{"name":"CreateFromMinMaxToRef","documentation":"Update a BoundingInfo2D object using the given min/max values as input","type":"(xmin: number, xmax: number, ymin: number, ymax: number, b: BoundingInfo2D) => void","functionBody":[{"parameters":[{"name":"xmin","documentation":"the smallest x coordinate","type":"number"},{"name":"xmax","documentation":"the biggest x coordinate","type":"number"},{"name":"ymin","documentation":"the smallest y coordinate","type":"number"},{"name":"ymax","documentation":"the buggest y coordinate","type":"number"},{"name":"b","documentation":"must be a valid/allocated object, it will contain the result of the operation","type":"BoundingInfo2D"}],"returnType":"void","documentation":"Update a BoundingInfo2D object using the given min/max values as input"}],"entryType":"function"},{"name":"clone","documentation":"Duplicate this instance and return a new one\n@return the duplicated instance","type":"() => BoundingInfo2D","functionBody":[{"parameters":[],"returnType":"BoundingInfo2D","documentation":"Duplicate this instance and return a new one\n@return the duplicated instance"}],"entryType":"function"},{"name":"clear","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"copyFrom","documentation":"","type":"(src: BoundingInfo2D) => void","functionBody":[{"parameters":[{"name":"src","documentation":"","type":"BoundingInfo2D"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"max","documentation":"return the max extend of the bounding info","type":"() => Vector2","functionBody":[{"parameters":[],"returnType":"Vector2","documentation":"return the max extend of the bounding info"}],"entryType":"function"},{"name":"maxToRef","documentation":"Update a vector2 with the max extend of the bounding info","type":"(result: Vector2) => void","functionBody":[{"parameters":[{"name":"result","documentation":"must be a valid/allocated vector2 that will contain the result of the operation","type":"Vector2"}],"returnType":"void","documentation":"Update a vector2 with the max extend of the bounding info"}],"entryType":"function"},{"name":"transform","documentation":"Apply a transformation matrix to this BoundingInfo2D and return a new instance containing the result\n@return the new instance containing the result of the transformation applied on this BoundingInfo2D","type":"(matrix: Matrix) => BoundingInfo2D","functionBody":[{"parameters":[{"name":"matrix","documentation":"the transformation matrix to apply","type":"Matrix"}],"returnType":"BoundingInfo2D","documentation":"Apply a transformation matrix to this BoundingInfo2D and return a new instance containing the result\n@return the new instance containing the result of the transformation applied on this BoundingInfo2D"}],"entryType":"function"},{"name":"union","documentation":"Compute the union of this BoundingInfo2D with a given one, returns a new BoundingInfo2D as a result\n@return a new instance containing the result of the union","type":"(other: BoundingInfo2D) => BoundingInfo2D","functionBody":[{"parameters":[{"name":"other","documentation":"the second BoundingInfo2D to compute the union with this one","type":"BoundingInfo2D"}],"returnType":"BoundingInfo2D","documentation":"Compute the union of this BoundingInfo2D with a given one, returns a new BoundingInfo2D as a result\n@return a new instance containing the result of the union"}],"entryType":"function"},{"name":"transformToRef","documentation":"Transform this BoundingInfo2D with a given matrix and store the result in an existing BoundingInfo2D instance.\nThis is a GC friendly version, try to use it as much as possible, specially if your transformation is inside a loop, allocate the result object once for good outside of the loop and use it every time.","type":"(matrix: Matrix, result: BoundingInfo2D) => void","functionBody":[{"parameters":[{"name":"matrix","documentation":"The matrix to use to compute the transformation","type":"Matrix"},{"name":"result","documentation":"A VALID (i.e. allocated) BoundingInfo2D object where the result will be stored","type":"BoundingInfo2D"}],"returnType":"void","documentation":"Transform this BoundingInfo2D with a given matrix and store the result in an existing BoundingInfo2D instance.\nThis is a GC friendly version, try to use it as much as possible, specially if your transformation is inside a loop, allocate the result object once for good outside of the loop and use it every time."}],"entryType":"function"},{"name":"unionToRef","documentation":"Compute the union of this BoundingInfo2D with another one and store the result in a third valid BoundingInfo2D object\nThis is a GC friendly version, try to use it as much as possible, specially if your transformation is inside a loop, allocate the result object once for good outside of the loop and use it every time.","type":"(other: BoundingInfo2D, result: BoundingInfo2D) => void","functionBody":[{"parameters":[{"name":"other","documentation":"the second object used to compute the union","type":"BoundingInfo2D"},{"name":"result","documentation":"a VALID BoundingInfo2D instance (i.e. allocated) where the result will be stored","type":"BoundingInfo2D"}],"returnType":"void","documentation":"Compute the union of this BoundingInfo2D with another one and store the result in a third valid BoundingInfo2D object\nThis is a GC friendly version, try to use it as much as possible, specially if your transformation is inside a loop, allocate the result object once for good outside of the loop and use it every time."}],"entryType":"function"},{"name":"doesIntersect","documentation":"Check if the given point is inside the BoundingInfo.\nThe test is first made on the radius, then inside the rectangle described by the extent\n@return true if the point is inside, false otherwise","type":"(pickPosition: Vector2) => boolean","functionBody":[{"parameters":[{"name":"pickPosition","documentation":"the position to test","type":"Vector2"}],"returnType":"boolean","documentation":"Check if the given point is inside the BoundingInfo.\nThe test is first made on the radius, then inside the rectangle described by the extent\n@return true if the point is inside, false otherwise"}],"entryType":"function"}],"properties":[{"name":"center","documentation":"The coordinate of the center of the bounding info","type":"Vector2","entryType":"property"},{"name":"radius","documentation":"The radius of the bounding circle, from the center of the bounded object","type":"number","entryType":"property"},{"name":"extent","documentation":"The extent of the bounding rectangle, from the center of the bounded object.\nThis is an absolute value in both X and Y of the vector which describe the right/top corner of the rectangle, you can easily reconstruct the whole rectangle by negating X &| Y.","type":"Vector2","entryType":"property"},{"name":"_transform","documentation":"","type":"any","entryType":"property"}]},{"name":"LockableBase","documentation":"Base class implementing the ILocable interface.\nThe particularity of this class is to call the protected onLock() method when the instance is about to be locked for good.","type":"typeof LockableBase","constructors":[{"parameters":[],"returnType":"LockableBase","documentation":""}],"entryType":"class","functions":[{"name":"isLocked","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"lock","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"onLock","documentation":"Protected handler that will be called when the instance is about to be locked.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Protected handler that will be called when the instance is about to be locked."}],"entryType":"function"}],"properties":[{"name":"_isLocked","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.ILockable"]},{"name":"SolidColorBrush2D","documentation":"","type":"typeof SolidColorBrush2D","constructors":[{"parameters":[{"name":"color","documentation":"","type":"Color4"},{"name":"lock","documentation":"","type":"boolean"}],"returnType":"SolidColorBrush2D","documentation":""}],"entryType":"class","functions":[{"name":"isTransparent","documentation":"Return true if the brush is transparent, false if it's totally opaque","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Return true if the brush is transparent, false if it's totally opaque"}],"entryType":"function"},{"name":"toString","documentation":"Return a unique identifier of the instance, which is simply the hexadecimal representation (CSS Style) of the solid color.","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":"Return a unique identifier of the instance, which is simply the hexadecimal representation (CSS Style) of the solid color."}],"entryType":"function"}],"properties":[{"name":"color","documentation":"The color used by this instance to render\n@returns the color object. Note that it's not a clone of the actual object stored in the instance so you MUST NOT modify it, otherwise unexpected behavior might occurs.","type":"Color4","entryType":"property"},{"name":"_color","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.LockableBase","BABYLON.IBrush2D"]},{"name":"GradientColorBrush2D","documentation":"","type":"typeof GradientColorBrush2D","constructors":[{"parameters":[{"name":"color1","documentation":"","type":"Color4"},{"name":"color2","documentation":"","type":"Color4"},{"name":"translation","documentation":"","type":"Vector2"},{"name":"rotation","documentation":"","type":"number"},{"name":"scale","documentation":"","type":"number"},{"name":"lock","documentation":"","type":"boolean"}],"returnType":"GradientColorBrush2D","documentation":""}],"entryType":"class","functions":[{"name":"isTransparent","documentation":"Return true if the brush is transparent, false if it's totally opaque","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Return true if the brush is transparent, false if it's totally opaque"}],"entryType":"function"},{"name":"toString","documentation":"Return a string describing the brush","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":"Return a string describing the brush"}],"entryType":"function"},{"name":"BuildKey","documentation":"Build a unique key string for the given parameters","type":"(color1: Color4, color2: Color4, translation: Vector2, rotation: number, scale: number) => string","functionBody":[{"parameters":[{"name":"color1","documentation":"","type":"Color4"},{"name":"color2","documentation":"","type":"Color4"},{"name":"translation","documentation":"","type":"Vector2"},{"name":"rotation","documentation":"","type":"number"},{"name":"scale","documentation":"","type":"number"}],"returnType":"string","documentation":"Build a unique key string for the given parameters"}],"entryType":"function"}],"properties":[{"name":"color1","documentation":"First color, the blend will start from this color","type":"Color4","entryType":"property"},{"name":"color2","documentation":"Second color, the blend will end to this color","type":"Color4","entryType":"property"},{"name":"translation","documentation":"Translation vector to apply on the blend\nDefault is [0;0]","type":"Vector2","entryType":"property"},{"name":"rotation","documentation":"Rotation in radian to apply to the brush\nDefault direction of the brush is vertical, you can change this using this property.\nDefault is 0.","type":"number","entryType":"property"},{"name":"scale","documentation":"Scale factor to apply to the gradient.\nDefault is 1: no scale.","type":"number","entryType":"property"},{"name":"_color1","documentation":"","type":"any","entryType":"property"},{"name":"_color2","documentation":"","type":"any","entryType":"property"},{"name":"_translation","documentation":"","type":"any","entryType":"property"},{"name":"_rotation","documentation":"","type":"any","entryType":"property"},{"name":"_scale","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.LockableBase","BABYLON.IBrush2D"]},{"name":"Canvas2DEngineBoundData","documentation":"","type":"typeof Canvas2DEngineBoundData","constructors":[{"parameters":[],"returnType":"Canvas2DEngineBoundData","documentation":""}],"entryType":"class","functions":[{"name":"GetOrAddModelCache","documentation":"","type":"<TInstData>(key: string, factory: (key: string) => ModelRenderCache) => ModelRenderCache","functionBody":[{"parameters":[{"name":"key","documentation":"","type":"string"},{"name":"factory","documentation":"","type":"(key: string) => ModelRenderCache"}],"returnType":"ModelRenderCache","documentation":""}],"entryType":"function"},{"name":"DisposeModelRenderCache","documentation":"","type":"(modelRenderCache: ModelRenderCache) => boolean","functionBody":[{"parameters":[{"name":"modelRenderCache","documentation":"","type":"ModelRenderCache"}],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"_modelCache","documentation":"","type":"any","entryType":"property"}]},{"name":"Canvas2D","documentation":"","type":"typeof Canvas2D","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"settings","documentation":"","type":"{ id?: string; children?: Prim2DBase[]; size?: Size; designSize?: Size; designUseHorizAxis?: bool..."}],"returnType":"Canvas2D","documentation":""}],"entryType":"class","functions":[{"name":"_canvasPreInit","documentation":"","type":"(settings: any) => void","functionBody":[{"parameters":[{"name":"settings","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_setupInteraction","documentation":"","type":"(enable: any) => any","functionBody":[{"parameters":[{"name":"enable","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_setPointerCapture","documentation":"Internal method, you should use the Prim2DBase version instead","type":"(pointerId: number, primitive: Prim2DBase) => boolean","functionBody":[{"parameters":[{"name":"pointerId","documentation":"","type":"number"},{"name":"primitive","documentation":"","type":"Prim2DBase"}],"returnType":"boolean","documentation":"Internal method, you should use the Prim2DBase version instead"}],"entryType":"function"},{"name":"_releasePointerCapture","documentation":"Internal method, you should use the Prim2DBase version instead","type":"(pointerId: number, primitive: Prim2DBase) => boolean","functionBody":[{"parameters":[{"name":"pointerId","documentation":"","type":"number"},{"name":"primitive","documentation":"","type":"Prim2DBase"}],"returnType":"boolean","documentation":"Internal method, you should use the Prim2DBase version instead"}],"entryType":"function"},{"name":"isPointerCaptured","documentation":"Determine if the given pointer is captured or not\n@return true if it's captured, false otherwise","type":"(pointerId: number) => boolean","functionBody":[{"parameters":[{"name":"pointerId","documentation":"the Id of the pointer","type":"number"}],"returnType":"boolean","documentation":"Determine if the given pointer is captured or not\n@return true if it's captured, false otherwise"}],"entryType":"function"},{"name":"getCapturedPrimitive","documentation":"","type":"(pointerId: any) => any","functionBody":[{"parameters":[{"name":"pointerId","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_handlePointerEventForInteraction","documentation":"","type":"(eventData: any, localPosition: any, eventState: any) => any","functionBody":[{"parameters":[{"name":"eventData","documentation":"","type":"any"},{"name":"localPosition","documentation":"","type":"any"},{"name":"eventState","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updatePointerInfo","documentation":"","type":"(eventData: any, localPosition: any) => any","functionBody":[{"parameters":[{"name":"eventData","documentation":"","type":"any"},{"name":"localPosition","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updateIntersectionList","documentation":"","type":"(mouseLocalPos: any, isCapture: any, force: any) => any","functionBody":[{"parameters":[{"name":"mouseLocalPos","documentation":"","type":"any"},{"name":"isCapture","documentation":"","type":"any"},{"name":"force","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updateOverStatus","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updatePrimPointerPos","documentation":"","type":"(prim: any) => any","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_debugExecObserver","documentation":"","type":"(prim: any, mask: any) => any","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"any"},{"name":"mask","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_bubbleNotifyPrimPointerObserver","documentation":"","type":"(prim: any, mask: any, eventData: any) => any","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"any"},{"name":"mask","documentation":"","type":"any"},{"name":"eventData","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_triggerActionManager","documentation":"","type":"(prim: any, ppi: any, mask: any, eventData: any) => any","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"any"},{"name":"ppi","documentation":"","type":"any"},{"name":"mask","documentation":"","type":"any"},{"name":"eventData","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_notifParents","documentation":"","type":"(prim: Prim2DBase, mask: number) => void","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"Prim2DBase"},{"name":"mask","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"Don't forget to call the dispose method when you're done with the Canvas instance.\nBut don't worry, if you dispose its scene, the canvas will be automatically disposed too.","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Don't forget to call the dispose method when you're done with the Canvas instance.\nBut don't worry, if you dispose its scene, the canvas will be automatically disposed too."}],"entryType":"function"},{"name":"createCanvasProfileInfoCanvas","documentation":"","type":"() => Canvas2D","functionBody":[{"parameters":[],"returnType":"Canvas2D","documentation":""}],"entryType":"function"},{"name":"checkBackgroundAvailability","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_initPerfMetrics","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_fetchPerfMetrics","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updateProfileCanvas","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_addDrawCallCount","documentation":"","type":"(count: number, renderMode: number) => void","functionBody":[{"parameters":[{"name":"count","documentation":"","type":"number"},{"name":"renderMode","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_addGroupRenderCount","documentation":"","type":"(count: number) => void","functionBody":[{"parameters":[{"name":"count","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_addUpdateTransparentDataCount","documentation":"","type":"(count: number) => void","functionBody":[{"parameters":[{"name":"count","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addCachedGroupRenderCounter","documentation":"","type":"(count: number) => void","functionBody":[{"parameters":[{"name":"count","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addUpdateCachedStateCounter","documentation":"","type":"(count: number) => void","functionBody":[{"parameters":[{"name":"count","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addUpdateLayoutCounter","documentation":"","type":"(count: number) => void","functionBody":[{"parameters":[{"name":"count","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addUpdatePositioningCounter","documentation":"","type":"(count: number) => void","functionBody":[{"parameters":[{"name":"count","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addupdateLocalTransformCounter","documentation":"","type":"(count: number) => void","functionBody":[{"parameters":[{"name":"count","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addUpdateGlobalTransformCounter","documentation":"","type":"(count: number) => void","functionBody":[{"parameters":[{"name":"count","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateTrackedNodes","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"updateCanvasLayout","documentation":"Call this method change you want to have layout related data computed and up to date (layout area, primitive area, local/global transformation matrices)","type":"(forceRecompute: boolean) => void","functionBody":[{"parameters":[{"name":"forceRecompute","documentation":"","type":"boolean"}],"returnType":"void","documentation":"Call this method change you want to have layout related data computed and up to date (layout area, primitive area, local/global transformation matrices)"}],"entryType":"function"},{"name":"_updateAdaptiveSizeWorldCanvas","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updateCanvasState","documentation":"","type":"(forceRecompute: any) => any","functionBody":[{"parameters":[{"name":"forceRecompute","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_render","documentation":"Method that renders the Canvas, you should not invoke","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":"Method that renders the Canvas, you should not invoke"}],"entryType":"function"},{"name":"_allocateGroupCache","documentation":"Internal method that allocate a cache for the given group.\nCaching is made using a collection of MapTexture where many groups have their bitmap cache stored inside.\n@return custom type with the PackedRect instance giving information about the cache location into the texture and also the MapTexture instance that stores the cache.","type":"(group: Group2D, parent: Group2D, minSize?: Size, useMipMap?: boolean, anisotropicLevel?: number)...","functionBody":[{"parameters":[{"name":"group","documentation":"The group to allocate the cache of.","type":"Group2D"},{"name":"parent","documentation":"","type":"Group2D"},{"name":"minSize","documentation":"","type":"Size"},{"name":"useMipMap","documentation":"","type":"boolean"},{"name":"anisotropicLevel","documentation":"","type":"number"}],"returnType":"{ node: PackedRect; texture: MapTexture; sprite: Sprite2D; }","documentation":"Internal method that allocate a cache for the given group.\nCaching is made using a collection of MapTexture where many groups have their bitmap cache stored inside.\n@return custom type with the PackedRect instance giving information about the cache location into the texture and also the MapTexture instance that stores the cache."}],"entryType":"function"},{"name":"_registerTrackedNode","documentation":"Internal method used to register a Scene Node to track position for the given group\nDo not invoke this method, for internal purpose only.","type":"(group: Group2D) => void","functionBody":[{"parameters":[{"name":"group","documentation":"the group to track its associated Scene Node","type":"Group2D"}],"returnType":"void","documentation":"Internal method used to register a Scene Node to track position for the given group\nDo not invoke this method, for internal purpose only."}],"entryType":"function"},{"name":"_unregisterTrackedNode","documentation":"Internal method used to unregister a tracked Scene Node\nDo not invoke this method, it's for internal purpose only.","type":"(group: Group2D) => void","functionBody":[{"parameters":[{"name":"group","documentation":"the group to unregister its tracked Scene Node from.","type":"Group2D"}],"returnType":"void","documentation":"Internal method used to unregister a tracked Scene Node\nDo not invoke this method, it's for internal purpose only."}],"entryType":"function"},{"name":"GetSolidColorBrush","documentation":"Get a Solid Color Brush instance matching the given color.\n@return A shared instance of the SolidColorBrush2D class that use the given color","type":"(color: Color4) => IBrush2D","functionBody":[{"parameters":[{"name":"color","documentation":"The color to retrieve","type":"Color4"}],"returnType":"IBrush2D","documentation":"Get a Solid Color Brush instance matching the given color.\n@return A shared instance of the SolidColorBrush2D class that use the given color"}],"entryType":"function"},{"name":"GetSolidColorBrushFromHex","documentation":"Get a Solid Color Brush instance matching the given color expressed as a CSS formatted hexadecimal value.\n@return A shared instance of the SolidColorBrush2D class that uses the given color","type":"(hexValue: string) => IBrush2D","functionBody":[{"parameters":[{"name":"hexValue","documentation":"","type":"string"}],"returnType":"IBrush2D","documentation":"Get a Solid Color Brush instance matching the given color expressed as a CSS formatted hexadecimal value.\n@return A shared instance of the SolidColorBrush2D class that uses the given color"}],"entryType":"function"},{"name":"GetGradientColorBrush","documentation":"Get a Gradient Color Brush","type":"(color1: Color4, color2: Color4, translation?: Vector2, rotation?: number, scale?: number) => IBr...","functionBody":[{"parameters":[{"name":"color1","documentation":"starting color","type":"Color4"},{"name":"color2","documentation":"engine color","type":"Color4"},{"name":"translation","documentation":"translation vector to apply. default is [0;0]","type":"Vector2"},{"name":"rotation","documentation":"rotation in radian to apply to the brush, initial direction is top to bottom. rotation is counter clockwise. default is 0.","type":"number"},{"name":"scale","documentation":"scaling factor to apply. default is 1.","type":"number"}],"returnType":"IBrush2D","documentation":"Get a Gradient Color Brush"}],"entryType":"function"},{"name":"GetBrushFromString","documentation":"Create a solid or gradient brush from a string value.","type":"(brushString: string) => IBrush2D","functionBody":[{"parameters":[{"name":"brushString","documentation":"should be either\n- \"solid: #RRGGBBAA\" or \"#RRGGBBAA\"\n- \"gradient: #FF808080, #FFFFFFF[, [10:20], 180, 1]\" for color1, color2, translation, rotation (degree), scale. The last three are optionals, but if specified must be is this order. \"gradient:\" can be omitted.","type":"string"}],"returnType":"IBrush2D","documentation":"Create a solid or gradient brush from a string value."}],"entryType":"function"}],"properties":[{"name":"CACHESTRATEGY_TOPLEVELGROUPS","documentation":"In this strategy only the direct children groups of the Canvas will be cached, their whole content (whatever the sub groups they have) into a single bitmap.\nThis strategy doesn't allow primitives added directly as children of the Canvas.\nYou typically want to use this strategy of a screenSpace fullscreen canvas: you don't want a bitmap cache taking the whole screen resolution but still want the main contents (say UI in the topLeft and rightBottom for instance) to be efficiently cached.","type":"number","entryType":"property"},{"name":"CACHESTRATEGY_ALLGROUPS","documentation":"In this strategy each group will have its own cache bitmap (except if a given group explicitly defines the DONTCACHEOVERRIDE or CACHEINPARENTGROUP behaviors).\nThis strategy is typically used if the canvas has some groups that are frequently animated. Unchanged ones will have a steady cache and the others will be refreshed when they change, reducing the redraw operation count to their content only.\nWhen using this strategy, group instances can rely on the DONTCACHEOVERRIDE or CACHEINPARENTGROUP behaviors to minimize the amount of cached bitmaps.\nNote that in this mode the Canvas itself is not cached, it only contains the sprites of its direct children group to render, there's no point to cache the whole canvas, sprites will be rendered pretty efficiently, the memory cost would be too great for the value of it.","type":"number","entryType":"property"},{"name":"CACHESTRATEGY_CANVAS","documentation":"In this strategy the whole canvas is cached into a single bitmap containing every primitives it owns, at the exception of the ones that are owned by a group having the DONTCACHEOVERRIDE behavior (these primitives will be directly drawn to the viewport at each render for screenSpace Canvas or be part of the Canvas cache bitmap for worldSpace Canvas).","type":"number","entryType":"property"},{"name":"CACHESTRATEGY_DONTCACHE","documentation":"This strategy is used to recompose/redraw the canvas entirely at each viewport render.\nUse this strategy if memory is a concern above rendering performances and/or if the canvas is frequently animated (hence reducing the benefits of caching).\nNote that you can't use this strategy for WorldSpace Canvas, they need at least a top level group caching.","type":"number","entryType":"property"},{"name":"drawCallsOpaqueCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"drawCallsAlphaTestCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"drawCallsTransparentCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"groupRenderCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"updateTransparentDataCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"cachedGroupRenderCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"updateCachedStateCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"updateLayoutCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"updatePositioningCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"updateLocalTransformCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"updateGlobalTransformCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"boundingInfoRecomputeCounter","documentation":"","type":"PerfCounter","entryType":"property"},{"name":"_zMinDelta","documentation":"","type":"number","entryType":"property"},{"name":"worldSpaceToNodeLocal","documentation":"If you set your own WorldSpaceNode to display the Canvas2D you have to provide your own implementation of this method which computes the local position in the Canvas based on the given 3D World one.\nBeware that you have to take under consideration the origin in your calculations! Good luck!","type":"(worldPos: Vector3) => Vector2","entryType":"property"},{"name":"worldSpaceCacheChanged","documentation":"If you use a custom WorldSpaceCanvasNode you have to override this property to update the UV of your object to reflect the changes due to a resizing of the cached bitmap","type":"() => void","entryType":"property"},{"name":"_interInfo","documentation":"","type":"any","entryType":"property"},{"name":"_notifDebugMode","documentation":"","type":"any","entryType":"property"},{"name":"scene","documentation":"Accessor to the Scene that owns the Canvas\n@returns The instance of the Scene object","type":"Scene","entryType":"property"},{"name":"engine","documentation":"Accessor to the Engine that drives the Scene used by this Canvas\n@returns The instance of the Engine object","type":"Engine","entryType":"property"},{"name":"cachingStrategy","documentation":"Accessor of the Caching Strategy used by this Canvas.\nSee Canvas2D.CACHESTRATEGY_xxxx static members for more information\n@returns the value corresponding to the used strategy.","type":"number","entryType":"property"},{"name":"isScreenSpace","documentation":"Return true if the Canvas is a Screen Space one, false if it's a World Space one.\n@returns {}","type":"boolean","entryType":"property"},{"name":"worldSpaceCanvasNode","documentation":"Only valid for World Space Canvas, returns the scene node that displays the canvas","type":"Node","entryType":"property"},{"name":"supportInstancedArray","documentation":"Check if the WebGL Instanced Array extension is supported or not","type":"boolean","entryType":"property"},{"name":"backgroundFill","documentation":"Property that defines the fill object used to draw the background of the Canvas.\nNote that Canvas with a Caching Strategy of\n@returns If the background is not set, null will be returned, otherwise a valid fill object is returned.","type":"IBrush2D","entryType":"property"},{"name":"backgroundBorder","documentation":"Property that defines the border object used to draw the background of the Canvas.\n@returns If the background is not set, null will be returned, otherwise a valid border object is returned.","type":"IBrush2D","entryType":"property"},{"name":"backgroundBorderThickness","documentation":"Property that defines the thickness of the border object used to draw the background of the Canvas.\n@returns If the background is not set, null will be returned, otherwise a valid number matching the thickness is returned.","type":"number","entryType":"property"},{"name":"backgroundRoundRadius","documentation":"You can set the roundRadius of the background\n@returns The current roundRadius","type":"number","entryType":"property"},{"name":"interactionEnabled","documentation":"Enable/Disable interaction for this Canvas\nWhen enabled the Prim2DBase.pointerEventObservable property will notified when appropriate events occur","type":"boolean","entryType":"property"},{"name":"designSize","documentation":"","type":"Size","entryType":"property"},{"name":"designSizeUseHorizAxis","documentation":"","type":"boolean","entryType":"property"},{"name":"_engineData","documentation":"Access the babylon.js' engine bound data, do not invoke this method, it's for internal purpose only\n@returns {}","type":"Canvas2DEngineBoundData","entryType":"property"},{"name":"___engineData","documentation":"","type":"any","entryType":"property"},{"name":"_interactionEnabled","documentation":"","type":"any","entryType":"property"},{"name":"_primPointerInfo","documentation":"","type":"any","entryType":"property"},{"name":"_updateRenderId","documentation":"","type":"any","entryType":"property"},{"name":"_intersectionRenderId","documentation":"","type":"any","entryType":"property"},{"name":"_hoverStatusRenderId","documentation":"","type":"any","entryType":"property"},{"name":"_pickStartingPosition","documentation":"","type":"any","entryType":"property"},{"name":"_pickedDownPrim","documentation":"","type":"any","entryType":"property"},{"name":"_pickStartingTime","documentation":"","type":"any","entryType":"property"},{"name":"_previousIntersectionList","documentation":"","type":"any","entryType":"property"},{"name":"_actualIntersectionList","documentation":"","type":"any","entryType":"property"},{"name":"_previousOverPrimitive","documentation":"","type":"any","entryType":"property"},{"name":"_actualOverPrimitive","documentation":"","type":"any","entryType":"property"},{"name":"_capturedPointers","documentation":"","type":"any","entryType":"property"},{"name":"_scenePrePointerObserver","documentation":"","type":"any","entryType":"property"},{"name":"_scenePointerObserver","documentation":"","type":"any","entryType":"property"},{"name":"_worldSpaceNode","documentation":"","type":"Node","entryType":"property"},{"name":"_mapCounter","documentation":"","type":"any","entryType":"property"},{"name":"_background","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_engine","documentation":"","type":"any","entryType":"property"},{"name":"_fitRenderingDevice","documentation":"","type":"any","entryType":"property"},{"name":"_isScreenSpace","documentation":"","type":"any","entryType":"property"},{"name":"_cachedCanvasGroup","documentation":"","type":"any","entryType":"property"},{"name":"_cachingStrategy","documentation":"","type":"any","entryType":"property"},{"name":"_hierarchyLevelMaxSiblingCount","documentation":"","type":"any","entryType":"property"},{"name":"_groupCacheMaps","documentation":"","type":"any","entryType":"property"},{"name":"_beforeRenderObserver","documentation":"","type":"any","entryType":"property"},{"name":"_afterRenderObserver","documentation":"","type":"any","entryType":"property"},{"name":"_supprtInstancedArray","documentation":"","type":"any","entryType":"property"},{"name":"_trackedGroups","documentation":"","type":"any","entryType":"property"},{"name":"_maxAdaptiveWorldSpaceCanvasSize","documentation":"","type":"number","entryType":"property"},{"name":"_designSize","documentation":"","type":"any","entryType":"property"},{"name":"_designUseHorizAxis","documentation":"","type":"any","entryType":"property"},{"name":"_renderingSize","documentation":"","type":"Size","entryType":"property"},{"name":"_drawCallsOpaqueCounter","documentation":"","type":"any","entryType":"property"},{"name":"_drawCallsAlphaTestCounter","documentation":"","type":"any","entryType":"property"},{"name":"_drawCallsTransparentCounter","documentation":"","type":"any","entryType":"property"},{"name":"_groupRenderCounter","documentation":"","type":"any","entryType":"property"},{"name":"_updateTransparentDataCounter","documentation":"","type":"any","entryType":"property"},{"name":"_cachedGroupRenderCounter","documentation":"","type":"any","entryType":"property"},{"name":"_updateCachedStateCounter","documentation":"","type":"any","entryType":"property"},{"name":"_updateLayoutCounter","documentation":"","type":"any","entryType":"property"},{"name":"_updatePositioningCounter","documentation":"","type":"any","entryType":"property"},{"name":"_updateGlobalTransformCounter","documentation":"","type":"any","entryType":"property"},{"name":"_updateLocalTransformCounter","documentation":"","type":"any","entryType":"property"},{"name":"_boundingInfoRecomputeCounter","documentation":"","type":"any","entryType":"property"},{"name":"_profilingCanvas","documentation":"","type":"any","entryType":"property"},{"name":"_profileInfoText","documentation":"","type":"any","entryType":"property"},{"name":"_v","documentation":"","type":"any","entryType":"property"},{"name":"_m","documentation":"","type":"any","entryType":"property"},{"name":"_mI","documentation":"","type":"any","entryType":"property"},{"name":"_unS","documentation":"","type":"any","entryType":"property"},{"name":"_groupTextureCacheSize","documentation":"Define the default size used for both the width and height of a MapTexture to allocate.\nNote that some MapTexture might be bigger than this size if the first node to allocate is bigger in width or height","type":"any","entryType":"property"},{"name":"_solidColorBrushes","documentation":"","type":"any","entryType":"property"},{"name":"_gradientColorBrushes","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Group2D"]},{"name":"WorldSpaceCanvas2D","documentation":"","type":"typeof WorldSpaceCanvas2D","constructors":[{"parameters":[{"name":"scene","documentation":"the Scene that owns the Canvas","type":"Scene"},{"name":"size","documentation":"the dimension of the Canvas in World Space","type":"Size"},{"name":"settings","documentation":"a combination of settings, possible ones are\n- children: an array of direct children primitives\n- id: a text identifier, for information purpose only, default is null.\n- worldPosition the position of the Canvas in World Space, default is [0,0,0]\n- worldRotation the rotation of the Canvas in World Space, default is Quaternion.Identity()\n- sideOrientation: Unexpected behavior occur if the value is different from Mesh.DEFAULTSIDE right now, so please use this one, which is the default.\n- cachingStrategy Must be CACHESTRATEGY_CANVAS for now, which is the default.\n- enableInteraction: if true the pointer events will be listened and rerouted to the appropriate primitives of the Canvas2D through the Prim2DBase.onPointerEventObservable observable property. Default is false (the opposite of ScreenSpace).\n- isVisible: true if the canvas must be visible, false for hidden. Default is true.\n- backgroundRoundRadius: the round radius of the background, either backgroundFill or backgroundBorder must be specified.\n- backgroundFill: the brush to use to create a background fill for the canvas. can be a string value (see Canvas2D.GetBrushFromString) or a IBrush2D instance.\n- backgroundBorder: the brush to use to create a background border for the canvas. can be a string value (see Canvas2D.GetBrushFromString) or a IBrush2D instance.\n- backgroundBorderThickness: if a backgroundBorder is specified, its thickness can be set using this property\n- customWorldSpaceNode: if specified the Canvas will be rendered in this given Node. But it's the responsibility of the caller to set the \"worldSpaceToNodeLocal\" property to compute the hit of the mouse ray into the node (in world coordinate system) as well as rendering the cached bitmap in the node itself. The properties cachedRect and cachedTexture of Group2D will give you what you need to do that.\n- maxAdaptiveCanvasSize: set the max size (width and height) of the bitmap that will contain the cached version of the WorldSpace Canvas. Default is 1024 or less if it's not supported. In any case the value you give will be clipped by the maximum that WebGL supports on the running device. You can set any size, more than 1024 if you want, but testing proved it's a good max value for non \"retina\" like screens.\n- paddingTop: top padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingLeft: left padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingRight: right padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingBottom: bottom padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- padding: top, left, right and bottom padding formatted as a single string (see PrimitiveThickness.fromString)","type":"{ children?: Prim2DBase[]; id?: string; worldPosition?: Vector3; worldRotation?: Quaternion; side..."}],"returnType":"WorldSpaceCanvas2D","documentation":"Create a new 2D WorldSpace Rendering Canvas, it is a 2D rectangle that has a size (width/height) and a world transformation information to place it in the world space.\nThis kind of canvas can't have its Primitives directly drawn in the Viewport, they need to be cached in a bitmap at some point, as a consequence the DONT_CACHE strategy is unavailable. For now only CACHESTRATEGY_CANVAS is supported, but the remaining strategies will be soon."}],"entryType":"class","functions":[],"properties":[],"heritageClauses":["BABYLON.Canvas2D"]},{"name":"ScreenSpaceCanvas2D","documentation":"","type":"typeof ScreenSpaceCanvas2D","constructors":[{"parameters":[{"name":"scene","documentation":"the Scene that owns the Canvas","type":"Scene"},{"name":"settings","documentation":"a combination of settings, possible ones are\n- children: an array of direct children primitives\n- id: a text identifier, for information purpose only\n- x: the position along the x axis (horizontal), relative to the left edge of the viewport. you can alternatively use the position setting.\n- y: the position along the y axis (vertically), relative to the bottom edge of the viewport. you can alternatively use the position setting.\n- position: the position of the canvas, relative from the bottom/left of the scene's viewport. Alternatively you can set the x and y properties directly. Default value is [0, 0]\n- width: the width of the Canvas. you can alternatively use the size setting.\n- height: the height of the Canvas. you can alternatively use the size setting.\n- size: the Size of the canvas. Alternatively the width and height properties can be set. If null two behaviors depend on the cachingStrategy: if it's CACHESTRATEGY_CACHECANVAS then it will always auto-fit the rendering device, in all the other modes it will fit the content of the Canvas\n- designSize: if you want to set the canvas content based on fixed coordinates whatever the final canvas dimension would be, set this. For instance a designSize of 360*640 will give you the possibility to specify all the children element in this frame. The Canvas' true size will be the HTMLCanvas' size: for instance it could be 720*1280, then a uniform scale of 2 will be applied on the Canvas to keep the absolute coordinates working as expecting. If the ratios of the designSize and the true Canvas size are not the same, then the scale is computed following the designUseHorizAxis member by using either the size of the horizontal axis or the vertical axis.\n- designUseHorizAxis: you can set this member if you use designSize to specify which axis is priority to compute the scale when the ratio of the canvas' size is different from the designSize's one.\n- cachingStrategy: either CACHESTRATEGY_TOPLEVELGROUPS, CACHESTRATEGY_ALLGROUPS, CACHESTRATEGY_CANVAS, CACHESTRATEGY_DONTCACHE. Please refer to their respective documentation for more information. Default is Canvas2D.CACHESTRATEGY_DONTCACHE\n- enableInteraction: if true the pointer events will be listened and rerouted to the appropriate primitives of the Canvas2D through the Prim2DBase.onPointerEventObservable observable property. Default is true.\n- isVisible: true if the canvas must be visible, false for hidden. Default is true.\n- backgroundRoundRadius: the round radius of the background, either backgroundFill or backgroundBorder must be specified.\n- backgroundFill: the brush to use to create a background fill for the canvas. can be a string value (see BABYLON.Canvas2D.GetBrushFromString) or a IBrush2D instance.\n- backgroundBorder: the brush to use to create a background border for the canvas. can be a string value (see BABYLON.Canvas2D.GetBrushFromString) or a IBrush2D instance.\n- backgroundBorderThickness: if a backgroundBorder is specified, its thickness can be set using this property\n- customWorldSpaceNode: if specified the Canvas will be rendered in this given Node. But it's the responsibility of the caller to set the \"worldSpaceToNodeLocal\" property to compute the hit of the mouse ray into the node (in world coordinate system) as well as rendering the cached bitmap in the node itself. The properties cachedRect and cachedTexture of Group2D will give you what you need to do that.\n- paddingTop: top padding, can be a number (will be pixels) or a string (see BABYLON.PrimitiveThickness.fromString)\n- paddingLeft: left padding, can be a number (will be pixels) or a string (see BABYLON.PrimitiveThickness.fromString)\n- paddingRight: right padding, can be a number (will be pixels) or a string (see BABYLON.PrimitiveThickness.fromString)\n- paddingBottom: bottom padding, can be a number (will be pixels) or a string (see BABYLON.PrimitiveThickness.fromString)\n- padding: top, left, right and bottom padding formatted as a single string (see BABYLON.PrimitiveThickness.fromString)","type":"{ children?: Prim2DBase[]; id?: string; x?: number; y?: number; position?: Vector2; origin?: Vect..."}],"returnType":"ScreenSpaceCanvas2D","documentation":"Create a new 2D ScreenSpace Rendering Canvas, it is a 2D rectangle that has a size (width/height) and a position relative to the bottom/left corner of the screen.\nScreenSpace Canvas will be drawn in the Viewport as a 2D Layer lying to the top of the 3D Scene. Typically used for traditional UI.\nAll caching strategies will be available.\nPLEASE NOTE: the origin of a Screen Space Canvas is set to [0;0] (bottom/left) which is different than the default origin of a Primitive which is centered [0.5;0.5]"}],"entryType":"class","functions":[],"properties":[],"heritageClauses":["BABYLON.Canvas2D"]},{"name":"LayoutEngineBase","documentation":"","type":"typeof LayoutEngineBase","constructors":[{"parameters":[],"returnType":"LayoutEngineBase","documentation":""}],"entryType":"class","functions":[{"name":"updateLayout","documentation":"","type":"(prim: Prim2DBase) => void","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"Prim2DBase"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isLocked","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"lock","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"isChildPositionAllowed","documentation":"","type":"boolean","entryType":"property"},{"name":"layoutDirtyOnPropertyChangedMask","documentation":"","type":"any","entryType":"property"},{"name":"_isLocked","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.ILockable"]},{"name":"CanvasLayoutEngine","documentation":"","type":"typeof CanvasLayoutEngine","constructors":[{"parameters":[],"returnType":"CanvasLayoutEngine","documentation":""}],"entryType":"class","functions":[{"name":"updateLayout","documentation":"","type":"(prim: Prim2DBase) => void","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"Prim2DBase"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_doUpdate","documentation":"","type":"(prim: any) => any","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"Singleton","documentation":"","type":"CanvasLayoutEngine","entryType":"property"},{"name":"isChildPositionAllowed","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.LayoutEngineBase"]},{"name":"StackPanelLayoutEngine","documentation":"","type":"typeof StackPanelLayoutEngine","constructors":[{"parameters":[],"returnType":"StackPanelLayoutEngine","documentation":""}],"entryType":"class","functions":[{"name":"updateLayout","documentation":"","type":"(prim: Prim2DBase) => void","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"Prim2DBase"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"Horizontal","documentation":"","type":"StackPanelLayoutEngine","entryType":"property"},{"name":"Vertical","documentation":"","type":"StackPanelLayoutEngine","entryType":"property"},{"name":"_horizontal","documentation":"","type":"any","entryType":"property"},{"name":"_vertical","documentation":"","type":"any","entryType":"property"},{"name":"isHorizontal","documentation":"","type":"boolean","entryType":"property"},{"name":"_isHorizontal","documentation":"","type":"any","entryType":"property"},{"name":"dstOffset","documentation":"","type":"any","entryType":"property"},{"name":"dstArea","documentation":"","type":"any","entryType":"property"},{"name":"isChildPositionAllowed","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.LayoutEngineBase"]},{"name":"Ellipse2DRenderCache","documentation":"","type":"typeof Ellipse2DRenderCache","constructors":[{"parameters":[{"name":"engine","documentation":"","type":"Engine"},{"name":"modelKey","documentation":"","type":"string"}],"returnType":"Ellipse2DRenderCache","documentation":""}],"entryType":"class","functions":[{"name":"render","documentation":"","type":"(instanceInfo: GroupInstanceInfo, context: Render2DContext) => boolean","functionBody":[{"parameters":[{"name":"instanceInfo","documentation":"","type":"GroupInstanceInfo"},{"name":"context","documentation":"","type":"Render2DContext"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"effectsReady","documentation":"","type":"boolean","entryType":"property"},{"name":"fillVB","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"fillIB","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"fillIndicesCount","documentation":"","type":"number","entryType":"property"},{"name":"instancingFillAttributes","documentation":"","type":"InstancingAttributeInfo[]","entryType":"property"},{"name":"effectFillInstanced","documentation":"","type":"Effect","entryType":"property"},{"name":"effectFill","documentation":"","type":"Effect","entryType":"property"},{"name":"borderVB","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"borderIB","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"borderIndicesCount","documentation":"","type":"number","entryType":"property"},{"name":"instancingBorderAttributes","documentation":"","type":"InstancingAttributeInfo[]","entryType":"property"},{"name":"effectBorderInstanced","documentation":"","type":"Effect","entryType":"property"},{"name":"effectBorder","documentation":"","type":"Effect","entryType":"property"}],"heritageClauses":["BABYLON.ModelRenderCache"]},{"name":"Ellipse2DInstanceData","documentation":"","type":"typeof Ellipse2DInstanceData","constructors":[{"parameters":[{"name":"partId","documentation":"","type":"number"}],"returnType":"Ellipse2DInstanceData","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"properties","documentation":"","type":"Vector3","entryType":"property"}],"heritageClauses":["BABYLON.Shape2DInstanceData"]},{"name":"Ellipse2D","documentation":"","type":"typeof Ellipse2D","constructors":[{"parameters":[{"name":"settings","documentation":"a combination of settings, possible ones are\n- parent: the parent primitive/canvas, must be specified if the primitive is not constructed as a child of another one (i.e. as part of the children array setting)\n- children: an array of direct children\n- id: a text identifier, for information purpose\n- position: the X & Y positions relative to its parent. Alternatively the x and y properties can be set. Default is [0;0]\n- rotation: the initial rotation (in radian) of the primitive. default is 0\n- scale: the initial scale of the primitive. default is 1. You can alternatively use scaleX &| scaleY to apply non uniform scale\n- dontInheritParentScale: if set the parent's scale won't be taken into consideration to compute the actualScale property\n- opacity: set the overall opacity of the primitive, 1 to be opaque (default), less than 1 to be transparent.\n- zOrder: override the zOrder with the specified value\n- origin: define the normalized origin point location, default [0.5;0.5]\n- size: the size of the group. Alternatively the width and height properties can be set. Default will be [10;10].\n- subdivision: the number of subdivision to create the ellipse perimeter, default is 64.\n- fill: the brush used to draw the fill content of the ellipse, you can set null to draw nothing (but you will have to set a border brush), default is a SolidColorBrush of plain white. can also be a string value (see Canvas2D.GetBrushFromString)\n- border: the brush used to draw the border of the ellipse, you can set null to draw nothing (but you will have to set a fill brush), default is null. can be a string value (see Canvas2D.GetBrushFromString)\n- borderThickness: the thickness of the drawn border, default is 1.\n- isVisible: true if the group must be visible, false for hidden. Default is true.\n- isPickable: if true the Primitive can be used with interaction mode and will issue Pointer Event. If false it will be ignored for interaction/intersection test. Default value is true.\n- isContainer: if true the Primitive acts as a container for interaction, if the primitive is not pickable or doesn't intersection, no further test will be perform on its children. If set to false, children will always be considered for intersection/interaction. Default value is true.\n- childrenFlatZOrder: if true all the children (direct and indirect) will share the same Z-Order. Use this when there's a lot of children which don't overlap. The drawing order IS NOT GUARANTED!\n- marginTop: top margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginLeft: left margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginRight: right margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginBottom: bottom margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- margin: top, left, right and bottom margin formatted as a single string (see PrimitiveThickness.fromString)\n- marginHAlignment: one value of the PrimitiveAlignment type's static properties\n- marginVAlignment: one value of the PrimitiveAlignment type's static properties\n- marginAlignment: a string defining the alignment, see PrimitiveAlignment.fromString\n- paddingTop: top padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingLeft: left padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingRight: right padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingBottom: bottom padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- padding: top, left, right and bottom padding formatted as a single string (see PrimitiveThickness.fromString)","type":"{ parent?: Prim2DBase; children?: Prim2DBase[]; id?: string; position?: Vector2; x?: number; y?: ..."}],"returnType":"Ellipse2D","documentation":"Create an Ellipse 2D Shape primitive"}],"entryType":"class","functions":[{"name":"levelIntersect","documentation":"","type":"(intersectInfo: IntersectInfo2D) => boolean","functionBody":[{"parameters":[{"name":"intersectInfo","documentation":"","type":"IntersectInfo2D"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"updateLevelBoundingInfo","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createModelRenderCache","documentation":"","type":"(modelKey: string) => ModelRenderCache","functionBody":[{"parameters":[{"name":"modelKey","documentation":"","type":"string"}],"returnType":"ModelRenderCache","documentation":""}],"entryType":"function"},{"name":"setupModelRenderCache","documentation":"","type":"(modelRenderCache: ModelRenderCache) => Ellipse2DRenderCache","functionBody":[{"parameters":[{"name":"modelRenderCache","documentation":"","type":"ModelRenderCache"}],"returnType":"Ellipse2DRenderCache","documentation":""}],"entryType":"function"},{"name":"createInstanceDataParts","documentation":"","type":"() => InstanceDataBase[]","functionBody":[{"parameters":[],"returnType":"InstanceDataBase[]","documentation":""}],"entryType":"function"},{"name":"refreshInstanceDataPart","documentation":"","type":"(part: InstanceDataBase) => boolean","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"}],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"acutalSizeProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"subdivisionsProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"actualSize","documentation":"","type":"Size","entryType":"property"},{"name":"subdivisions","documentation":"","type":"number","entryType":"property"},{"name":"_subdivisions","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Shape2D"]},{"name":"Group2D","documentation":"","type":"typeof Group2D","constructors":[{"parameters":[{"name":"settings","documentation":"a combination of settings, possible ones are\n- parent: the parent primitive/canvas, must be specified if the primitive is not constructed as a child of another one (i.e. as part of the children array setting)\n- children: an array of direct children\n- id a text identifier, for information purpose\n- position: the X & Y positions relative to its parent. Alternatively the x and y properties can be set. Default is [0;0]\n- rotation: the initial rotation (in radian) of the primitive. default is 0\n- scale: the initial scale of the primitive. default is 1. You can alternatively use scaleX &| scaleY to apply non uniform scale\n- dontInheritParentScale: if set the parent's scale won't be taken into consideration to compute the actualScale property\n- opacity: set the overall opacity of the primitive, 1 to be opaque (default), less than 1 to be transparent.\n- zOrder: override the zOrder with the specified value\n- origin: define the normalized origin point location, default [0.5;0.5]\n- size: the size of the group. Alternatively the width and height properties can be set. If null the size will be computed from its content, default is null.\n- cacheBehavior: Define how the group should behave regarding the Canvas's cache strategy, default is Group2D.GROUPCACHEBEHAVIOR_FOLLOWCACHESTRATEGY\n- layoutEngine: either an instance of a layout engine based class (StackPanel.Vertical, StackPanel.Horizontal) or a string ('canvas' for Canvas layout, 'StackPanel' or 'HorizontalStackPanel' for horizontal Stack Panel layout, 'VerticalStackPanel' for vertical Stack Panel layout).\n- isVisible: true if the group must be visible, false for hidden. Default is true.\n- isPickable: if true the Primitive can be used with interaction mode and will issue Pointer Event. If false it will be ignored for interaction/intersection test. Default value is true.\n- isContainer: if true the Primitive acts as a container for interaction, if the primitive is not pickable or doesn't intersection, no further test will be perform on its children. If set to false, children will always be considered for intersection/interaction. Default value is true.\n- childrenFlatZOrder: if true all the children (direct and indirect) will share the same Z-Order. Use this when there's a lot of children which don't overlap. The drawing order IS NOT GUARANTED!\n- marginTop: top margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginLeft: left margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginRight: right margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginBottom: bottom margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- margin: top, left, right and bottom margin formatted as a single string (see PrimitiveThickness.fromString)\n- marginHAlignment: one value of the PrimitiveAlignment type's static properties\n- marginVAlignment: one value of the PrimitiveAlignment type's static properties\n- marginAlignment: a string defining the alignment, see PrimitiveAlignment.fromString\n- paddingTop: top padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingLeft: left padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingRight: right padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingBottom: bottom padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- padding: top, left, right and bottom padding formatted as a single string (see PrimitiveThickness.fromString)","type":"{ parent?: Prim2DBase; children?: Prim2DBase[]; id?: string; position?: Vector2; x?: number; y?: ..."}],"returnType":"Group2D","documentation":"Create an Logical or Renderable Group."}],"entryType":"class","functions":[{"name":"_createCachedCanvasGroup","documentation":"","type":"(owner: Canvas2D) => Group2D","functionBody":[{"parameters":[{"name":"owner","documentation":"","type":"Canvas2D"}],"returnType":"Group2D","documentation":""}],"entryType":"function"},{"name":"applyCachedTexture","documentation":"","type":"(vertexData: VertexData, material: StandardMaterial) => void","functionBody":[{"parameters":[{"name":"vertexData","documentation":"","type":"VertexData"},{"name":"material","documentation":"","type":"StandardMaterial"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"Call this method to remove this Group and its children from the Canvas","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Call this method to remove this Group and its children from the Canvas"}],"entryType":"function"},{"name":"_addPrimToDirtyList","documentation":"","type":"(prim: Prim2DBase) => void","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"Prim2DBase"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_renderCachedCanvas","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"levelIntersect","documentation":"","type":"(intersectInfo: IntersectInfo2D) => boolean","functionBody":[{"parameters":[{"name":"intersectInfo","documentation":"","type":"IntersectInfo2D"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"updateLevelBoundingInfo","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_prepareGroupRender","documentation":"","type":"(context: PrepareRender2DContext) => void","functionBody":[{"parameters":[{"name":"context","documentation":"","type":"PrepareRender2DContext"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_groupRender","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_setCacheGroupDirty","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateTransparentData","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_renderTransparentData","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_prepareContext","documentation":"","type":"(engine: any, context: any, gii: any) => any","functionBody":[{"parameters":[{"name":"engine","documentation":"","type":"any"},{"name":"context","documentation":"","type":"any"},{"name":"gii","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_setRenderingScale","documentation":"","type":"(scale: number) => void","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_bindCacheTarget","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_unbindCacheTarget","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"handleGroupChanged","documentation":"","type":"(prop: Prim2DPropInfo) => void","functionBody":[{"parameters":[{"name":"prop","documentation":"","type":"Prim2DPropInfo"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detectGroupStates","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"GROUP2D_PROPCOUNT","documentation":"","type":"number","entryType":"property"},{"name":"sizeProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"actualSizeProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"GROUPCACHEBEHAVIOR_FOLLOWCACHESTRATEGY","documentation":"Default behavior, the group will use the caching strategy defined at the Canvas Level","type":"number","entryType":"property"},{"name":"GROUPCACHEBEHAVIOR_DONTCACHEOVERRIDE","documentation":"When used, this group's content won't be cached, no matter which strategy used.\nIf the group is part of a WorldSpace Canvas, its content will be drawn in the Canvas cache bitmap.","type":"number","entryType":"property"},{"name":"GROUPCACHEBEHAVIOR_CACHEINPARENTGROUP","documentation":"When used, the group's content will be cached in the nearest cached parent group/canvas","type":"number","entryType":"property"},{"name":"GROUPCACHEBEHAVIOR_NORESIZEONSCALE","documentation":"You can specify this behavior to any cached Group2D to indicate that you don't want the cached content to be resized when the Group's actualScale is changing. It will draw the content stretched or shrink which is faster than a resize. This setting is obviously for performance consideration, don't use it if you want the best rendering quality","type":"number","entryType":"property"},{"name":"GROUPCACHEBEHAVIOR_OPTIONMASK","documentation":"","type":"any","entryType":"property"},{"name":"cachedRect","documentation":"Allow you to access the information regarding the cached rectangle of the Group2D into the MapTexture.\nIf the `noWorldSpaceNode` options was used at the creation of a WorldSpaceCanvas, the rendering of the canvas must be made by the caller, so typically you want to bind the cacheTexture property to some material/mesh and you MUST use the Group2D.cachedUVs property to get the UV coordinates to use for your quad that will display the Canvas and NOT the PackedRect.UVs property which are incorrect because the allocated surface may be bigger (due to over-provisioning or shrinking without deallocating) than what the Group is actually using.","type":"PackedRect","entryType":"property"},{"name":"cachedUVs","documentation":"The UVs into the MapTexture that map the cached group","type":"Vector2[]","entryType":"property"},{"name":"cachedUVsChanged","documentation":"","type":"Observable<Vector2[]>","entryType":"property"},{"name":"cacheTexture","documentation":"Access the texture that maintains a cached version of the Group2D.\nThis is useful only if you're not using a WorldSpaceNode for your WorldSpace Canvas and therefore need to perform the rendering yourself.","type":"MapTexture","entryType":"property"},{"name":"isRenderableGroup","documentation":"@returns Returns true if the Group render content, false if it's a logical group only","type":"boolean","entryType":"property"},{"name":"isCachedGroup","documentation":"@returns only meaningful for isRenderableGroup, will be true if the content of the Group is cached into a texture, false if it's rendered every time","type":"boolean","entryType":"property"},{"name":"size","documentation":"Get/Set the size of the group. If null the size of the group will be determine from its content.\nBEWARE: if the Group is a RenderableGroup and its content is cache the texture will be resized each time the group is getting bigger. For performance reason the opposite won't be true: the texture won't shrink if the group does.","type":"Size","entryType":"property"},{"name":"viewportSize","documentation":"","type":"ISize","entryType":"property"},{"name":"actualSize","documentation":"","type":"Size","entryType":"property"},{"name":"cacheBehavior","documentation":"Get/set the Cache Behavior, used in case the Canvas Cache Strategy is set to CACHESTRATEGY_ALLGROUPS. Can be either GROUPCACHEBEHAVIOR_CACHEINPARENTGROUP, GROUPCACHEBEHAVIOR_DONTCACHEOVERRIDE or GROUPCACHEBEHAVIOR_FOLLOWCACHESTRATEGY. See their documentation for more information.\nGROUPCACHEBEHAVIOR_NORESIZEONSCALE can also be set if you set it at creation time.\nIt is critical to understand than you HAVE TO play with this behavior in order to achieve a good performance/memory ratio. Caching all groups would certainly be the worst strategy of all.","type":"number","entryType":"property"},{"name":"trackedNode","documentation":"Get/set the Scene's Node that should be tracked, the group's position will follow the projected position of the Node.","type":"Node","entryType":"property"},{"name":"_uV","documentation":"","type":"any","entryType":"property"},{"name":"_s","documentation":"","type":"any","entryType":"property"},{"name":"_trackedNode","documentation":"","type":"any","entryType":"property"},{"name":"_isRenderableGroup","documentation":"","type":"boolean","entryType":"property"},{"name":"_isCachedGroup","documentation":"","type":"boolean","entryType":"property"},{"name":"_cacheGroupDirty","documentation":"","type":"any","entryType":"property"},{"name":"_cacheBehavior","documentation":"","type":"any","entryType":"property"},{"name":"_viewportPosition","documentation":"","type":"any","entryType":"property"},{"name":"_viewportSize","documentation":"","type":"any","entryType":"property"},{"name":"_renderableData","documentation":"","type":"RenderableGroupData","entryType":"property"}],"heritageClauses":["BABYLON.Prim2DBase"]},{"name":"RenderableGroupData","documentation":"","type":"typeof RenderableGroupData","constructors":[{"parameters":[],"returnType":"RenderableGroupData","documentation":""}],"entryType":"class","functions":[{"name":"dispose","documentation":"","type":"(owner: Canvas2D) => void","functionBody":[{"parameters":[{"name":"owner","documentation":"","type":"Canvas2D"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addNewTransparentPrimitiveInfo","documentation":"","type":"(prim: RenderablePrim2D, gii: GroupInstanceInfo) => TransparentPrimitiveInfo","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"RenderablePrim2D"},{"name":"gii","documentation":"","type":"GroupInstanceInfo"}],"returnType":"TransparentPrimitiveInfo","documentation":""}],"entryType":"function"},{"name":"removeTransparentPrimitiveInfo","documentation":"","type":"(tpi: TransparentPrimitiveInfo) => void","functionBody":[{"parameters":[{"name":"tpi","documentation":"","type":"TransparentPrimitiveInfo"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"transparentPrimitiveZChanged","documentation":"","type":"(tpi: TransparentPrimitiveInfo) => void","functionBody":[{"parameters":[{"name":"tpi","documentation":"","type":"TransparentPrimitiveInfo"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_primDirtyList","documentation":"","type":"Prim2DBase[]","entryType":"property"},{"name":"_primNewDirtyList","documentation":"","type":"Prim2DBase[]","entryType":"property"},{"name":"_childrenRenderableGroups","documentation":"","type":"Group2D[]","entryType":"property"},{"name":"_renderGroupInstancesInfo","documentation":"","type":"StringDictionary<GroupInstanceInfo>","entryType":"property"},{"name":"_cacheNode","documentation":"","type":"PackedRect","entryType":"property"},{"name":"_cacheTexture","documentation":"","type":"MapTexture","entryType":"property"},{"name":"_cacheRenderSprite","documentation":"","type":"Sprite2D","entryType":"property"},{"name":"_cacheNodeUVs","documentation":"","type":"Vector2[]","entryType":"property"},{"name":"_cacheNodeUVsChangedObservable","documentation":"","type":"Observable<Vector2[]>","entryType":"property"},{"name":"_cacheSize","documentation":"","type":"Size","entryType":"property"},{"name":"_useMipMap","documentation":"","type":"boolean","entryType":"property"},{"name":"_anisotropicLevel","documentation":"","type":"number","entryType":"property"},{"name":"_noResizeOnScale","documentation":"","type":"boolean","entryType":"property"},{"name":"_transparentListChanged","documentation":"","type":"boolean","entryType":"property"},{"name":"_transparentPrimitives","documentation":"","type":"TransparentPrimitiveInfo[]","entryType":"property"},{"name":"_transparentSegments","documentation":"","type":"TransparentSegment[]","entryType":"property"},{"name":"_renderingScale","documentation":"","type":"number","entryType":"property"}]},{"name":"TransparentPrimitiveInfo","documentation":"","type":"typeof TransparentPrimitiveInfo","constructors":[{"parameters":[],"returnType":"TransparentPrimitiveInfo","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"_primitive","documentation":"","type":"RenderablePrim2D","entryType":"property"},{"name":"_groupInstanceInfo","documentation":"","type":"GroupInstanceInfo","entryType":"property"},{"name":"_transparentSegment","documentation":"","type":"TransparentSegment","entryType":"property"}]},{"name":"Lines2DRenderCache","documentation":"","type":"typeof Lines2DRenderCache","constructors":[{"parameters":[{"name":"engine","documentation":"","type":"Engine"},{"name":"modelKey","documentation":"","type":"string"}],"returnType":"Lines2DRenderCache","documentation":""}],"entryType":"class","functions":[{"name":"render","documentation":"","type":"(instanceInfo: GroupInstanceInfo, context: Render2DContext) => boolean","functionBody":[{"parameters":[{"name":"instanceInfo","documentation":"","type":"GroupInstanceInfo"},{"name":"context","documentation":"","type":"Render2DContext"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"effectsReady","documentation":"","type":"boolean","entryType":"property"},{"name":"fillVB","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"fillIB","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"fillIndicesCount","documentation":"","type":"number","entryType":"property"},{"name":"instancingFillAttributes","documentation":"","type":"InstancingAttributeInfo[]","entryType":"property"},{"name":"effectFill","documentation":"","type":"Effect","entryType":"property"},{"name":"effectFillInstanced","documentation":"","type":"Effect","entryType":"property"},{"name":"borderVB","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"borderIB","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"borderIndicesCount","documentation":"","type":"number","entryType":"property"},{"name":"instancingBorderAttributes","documentation":"","type":"InstancingAttributeInfo[]","entryType":"property"},{"name":"effectBorder","documentation":"","type":"Effect","entryType":"property"},{"name":"effectBorderInstanced","documentation":"","type":"Effect","entryType":"property"}],"heritageClauses":["BABYLON.ModelRenderCache"]},{"name":"Lines2DInstanceData","documentation":"","type":"typeof Lines2DInstanceData","constructors":[{"parameters":[{"name":"partId","documentation":"","type":"number"}],"returnType":"Lines2DInstanceData","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"boundingMin","documentation":"","type":"Vector2","entryType":"property"},{"name":"boundingMax","documentation":"","type":"Vector2","entryType":"property"}],"heritageClauses":["BABYLON.Shape2DInstanceData"]},{"name":"Lines2D","documentation":"","type":"typeof Lines2D","constructors":[{"parameters":[{"name":"points","documentation":"an array that describe the points to use to draw the line, must contain at least two entries.","type":"Vector2[]"},{"name":"settings","documentation":"a combination of settings, possible ones are\n- parent: the parent primitive/canvas, must be specified if the primitive is not constructed as a child of another one (i.e. as part of the children array setting)\n- children: an array of direct children\n- id a text identifier, for information purpose\n- position: the X & Y positions relative to its parent. Alternatively the x and y properties can be set. Default is [0;0]\n- rotation: the initial rotation (in radian) of the primitive. default is 0\n- scale: the initial scale of the primitive. default is 1. You can alternatively use scaleX &| scaleY to apply non uniform scale\n- dontInheritParentScale: if set the parent's scale won't be taken into consideration to compute the actualScale property\n- opacity: set the overall opacity of the primitive, 1 to be opaque (default), less than 1 to be transparent.\n- zOrder: override the zOrder with the specified value\n- origin: define the normalized origin point location, default [0.5;0.5]\n- fillThickness: the thickness of the fill part of the line, can be null to draw nothing (but a border brush must be given), default is 1.\n- closed: if false the lines are said to be opened, the first point and the latest DON'T connect. if true the lines are said to be closed, the first and last point will be connected by a line. For instance you can define the 4 points of a rectangle, if you set closed to true a 4 edges rectangle will be drawn. If you set false, only three edges will be drawn, the edge formed by the first and last point won't exist. Default is false.\n- startCap: Draw a cap of the given type at the start of the first line, you can't define a Cap if the Lines2D is closed. Default is Lines2D.NoCap.\n- endCap: Draw a cap of the given type at the end of the last line, you can't define a Cap if the Lines2D is closed. Default is Lines2D.NoCap.\n- fill: the brush used to draw the fill content of the lines, you can set null to draw nothing (but you will have to set a border brush), default is a SolidColorBrush of plain white. can be a string value (see Canvas2D.GetBrushFromString)\n- border: the brush used to draw the border of the lines, you can set null to draw nothing (but you will have to set a fill brush), default is null. can be a string value (see Canvas2D.GetBrushFromString)\n- borderThickness: the thickness of the drawn border, default is 1.\n- isVisible: true if the primitive must be visible, false for hidden. Default is true.\n- isPickable: if true the Primitive can be used with interaction mode and will issue Pointer Event. If false it will be ignored for interaction/intersection test. Default value is true.\n- isContainer: if true the Primitive acts as a container for interaction, if the primitive is not pickable or doesn't intersection, no further test will be perform on its children. If set to false, children will always be considered for intersection/interaction. Default value is true.\n- childrenFlatZOrder: if true all the children (direct and indirect) will share the same Z-Order. Use this when there's a lot of children which don't overlap. The drawing order IS NOT GUARANTED!\n- marginTop: top margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginLeft: left margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginRight: right margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginBottom: bottom margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- margin: top, left, right and bottom margin formatted as a single string (see PrimitiveThickness.fromString)\n- marginHAlignment: one value of the PrimitiveAlignment type's static properties\n- marginVAlignment: one value of the PrimitiveAlignment type's static properties\n- marginAlignment: a string defining the alignment, see PrimitiveAlignment.fromString\n- paddingTop: top padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingLeft: left padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingRight: right padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingBottom: bottom padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- padding: top, left, right and bottom padding formatted as a single string (see PrimitiveThickness.fromString)","type":"{ parent?: Prim2DBase; children?: Prim2DBase[]; id?: string; position?: Vector2; x?: number; y?: ..."}],"returnType":"Lines2D","documentation":"Create an 2D Lines Shape primitive. The defined lines may be opened or closed (see below)"}],"entryType":"class","functions":[{"name":"levelIntersect","documentation":"","type":"(intersectInfo: IntersectInfo2D) => boolean","functionBody":[{"parameters":[{"name":"intersectInfo","documentation":"","type":"IntersectInfo2D"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getUsedShaderCategories","documentation":"","type":"(dataPart: InstanceDataBase) => string[]","functionBody":[{"parameters":[{"name":"dataPart","documentation":"","type":"InstanceDataBase"}],"returnType":"string[]","documentation":""}],"entryType":"function"},{"name":"updateLevelBoundingInfo","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createModelRenderCache","documentation":"","type":"(modelKey: string) => ModelRenderCache","functionBody":[{"parameters":[{"name":"modelKey","documentation":"","type":"string"}],"returnType":"ModelRenderCache","documentation":""}],"entryType":"function"},{"name":"_perp","documentation":"","type":"(v: any, res: any) => any","functionBody":[{"parameters":[{"name":"v","documentation":"","type":"any"},{"name":"res","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_direction","documentation":"","type":"(a: any, b: any, res: any) => any","functionBody":[{"parameters":[{"name":"a","documentation":"","type":"any"},{"name":"b","documentation":"","type":"any"},{"name":"res","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_computeMiter","documentation":"","type":"(tangent: any, miter: any, a: any, b: any) => any","functionBody":[{"parameters":[{"name":"tangent","documentation":"","type":"any"},{"name":"miter","documentation":"","type":"any"},{"name":"a","documentation":"","type":"any"},{"name":"b","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_intersect","documentation":"","type":"(x1: any, y1: any, x2: any, y2: any, x3: any, y3: any, x4: any, y4: any) => any","functionBody":[{"parameters":[{"name":"x1","documentation":"","type":"any"},{"name":"y1","documentation":"","type":"any"},{"name":"x2","documentation":"","type":"any"},{"name":"y2","documentation":"","type":"any"},{"name":"x3","documentation":"","type":"any"},{"name":"y3","documentation":"","type":"any"},{"name":"x4","documentation":"","type":"any"},{"name":"y4","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updateMinMax","documentation":"","type":"(array: any, offset: any) => any","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"any"},{"name":"offset","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_store","documentation":"","type":"(array: any, contour: any, index: any, max: any, p: any, n: any, halfThickness: any, borderThickn...","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"any"},{"name":"contour","documentation":"","type":"any"},{"name":"index","documentation":"","type":"any"},{"name":"max","documentation":"","type":"any"},{"name":"p","documentation":"","type":"any"},{"name":"n","documentation":"","type":"any"},{"name":"halfThickness","documentation":"","type":"any"},{"name":"borderThickness","documentation":"","type":"any"},{"name":"detectFlip","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getCapSize","documentation":"","type":"(type: any, border?: any) => any","functionBody":[{"parameters":[{"name":"type","documentation":"","type":"any"},{"name":"border","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_storeVertex","documentation":"","type":"(vb: any, baseOffset: any, index: any, basePos: any, rotation: any, vertex: any, contour: any) =>...","functionBody":[{"parameters":[{"name":"vb","documentation":"","type":"any"},{"name":"baseOffset","documentation":"","type":"any"},{"name":"index","documentation":"","type":"any"},{"name":"basePos","documentation":"","type":"any"},{"name":"rotation","documentation":"","type":"any"},{"name":"vertex","documentation":"","type":"any"},{"name":"contour","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_storeIndex","documentation":"","type":"(ib: any, baseOffset: any, index: any, vertexIndex: any) => any","functionBody":[{"parameters":[{"name":"ib","documentation":"","type":"any"},{"name":"baseOffset","documentation":"","type":"any"},{"name":"index","documentation":"","type":"any"},{"name":"vertexIndex","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_buildCap","documentation":"","type":"(vb: any, vbi: any, ib: any, ibi: any, pos: any, thickness: any, borderThickness: any, type: any,...","functionBody":[{"parameters":[{"name":"vb","documentation":"","type":"any"},{"name":"vbi","documentation":"","type":"any"},{"name":"ib","documentation":"","type":"any"},{"name":"ibi","documentation":"","type":"any"},{"name":"pos","documentation":"","type":"any"},{"name":"thickness","documentation":"","type":"any"},{"name":"borderThickness","documentation":"","type":"any"},{"name":"type","documentation":"","type":"any"},{"name":"capDir","documentation":"","type":"any"},{"name":"contour","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_buildLine","documentation":"","type":"(vb: any, contour: any, ht: any, bt?: any) => any","functionBody":[{"parameters":[{"name":"vb","documentation":"","type":"any"},{"name":"contour","documentation":"","type":"any"},{"name":"ht","documentation":"","type":"any"},{"name":"bt","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setupModelRenderCache","documentation":"","type":"(modelRenderCache: ModelRenderCache) => Lines2DRenderCache","functionBody":[{"parameters":[{"name":"modelRenderCache","documentation":"","type":"ModelRenderCache"}],"returnType":"Lines2DRenderCache","documentation":""}],"entryType":"function"},{"name":"_computeLines2D","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"createInstanceDataParts","documentation":"","type":"() => InstanceDataBase[]","functionBody":[{"parameters":[],"returnType":"InstanceDataBase[]","documentation":""}],"entryType":"function"},{"name":"applyActualScaleOnTransform","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"refreshInstanceDataPart","documentation":"","type":"(part: InstanceDataBase) => boolean","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"}],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"NoCap","documentation":"No Cap to apply on the extremity","type":"number","entryType":"property"},{"name":"RoundCap","documentation":"A round cap, will use the line thickness as diameter","type":"number","entryType":"property"},{"name":"TriangleCap","documentation":"Creates a triangle at the extremity.","type":"number","entryType":"property"},{"name":"SquareAnchorCap","documentation":"Creates a Square anchor at the extremity, the square size is twice the thickness of the line","type":"number","entryType":"property"},{"name":"RoundAnchorCap","documentation":"Creates a round anchor at the extremity, the diameter is twice the thickness of the line","type":"number","entryType":"property"},{"name":"DiamondAnchorCap","documentation":"Creates a diamond anchor at the extremity.","type":"number","entryType":"property"},{"name":"ArrowCap","documentation":"Creates an arrow anchor at the extremity. the arrow base size is twice the thickness of the line","type":"number","entryType":"property"},{"name":"pointsProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"fillThicknessProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"closedProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"startCapProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"endCapProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"points","documentation":"","type":"Vector2[]","entryType":"property"},{"name":"fillThickness","documentation":"","type":"number","entryType":"property"},{"name":"closed","documentation":"","type":"boolean","entryType":"property"},{"name":"startCap","documentation":"","type":"number","entryType":"property"},{"name":"endCap","documentation":"","type":"number","entryType":"property"},{"name":"_prevA","documentation":"","type":"any","entryType":"property"},{"name":"_prevB","documentation":"","type":"any","entryType":"property"},{"name":"_curA","documentation":"","type":"any","entryType":"property"},{"name":"_curB","documentation":"","type":"any","entryType":"property"},{"name":"boundingMin","documentation":"","type":"Vector2","entryType":"property"},{"name":"boundingMax","documentation":"","type":"Vector2","entryType":"property"},{"name":"_miterTps","documentation":"","type":"any","entryType":"property"},{"name":"_startDir","documentation":"","type":"any","entryType":"property"},{"name":"_endDir","documentation":"","type":"any","entryType":"property"},{"name":"_tpsV","documentation":"","type":"any","entryType":"property"},{"name":"size","documentation":"","type":"Size","entryType":"property"},{"name":"_noCap","documentation":"","type":"any","entryType":"property"},{"name":"_roundCap","documentation":"","type":"any","entryType":"property"},{"name":"_triangleCap","documentation":"","type":"any","entryType":"property"},{"name":"_squareAnchorCap","documentation":"","type":"any","entryType":"property"},{"name":"_roundAnchorCap","documentation":"","type":"any","entryType":"property"},{"name":"_diamondAnchorCap","documentation":"","type":"any","entryType":"property"},{"name":"_arrowCap","documentation":"","type":"any","entryType":"property"},{"name":"_roundCapSubDiv","documentation":"","type":"any","entryType":"property"},{"name":"_fillVB","documentation":"","type":"any","entryType":"property"},{"name":"_fillIB","documentation":"","type":"any","entryType":"property"},{"name":"_borderVB","documentation":"","type":"any","entryType":"property"},{"name":"_borderIB","documentation":"","type":"any","entryType":"property"},{"name":"_boundingMin","documentation":"","type":"any","entryType":"property"},{"name":"_boundingMax","documentation":"","type":"any","entryType":"property"},{"name":"_contour","documentation":"","type":"any","entryType":"property"},{"name":"_startCapContour","documentation":"","type":"any","entryType":"property"},{"name":"_startCapTriIndices","documentation":"","type":"any","entryType":"property"},{"name":"_endCapContour","documentation":"","type":"any","entryType":"property"},{"name":"_endCapTriIndices","documentation":"","type":"any","entryType":"property"},{"name":"_closed","documentation":"","type":"any","entryType":"property"},{"name":"_startCap","documentation":"","type":"any","entryType":"property"},{"name":"_endCap","documentation":"","type":"any","entryType":"property"},{"name":"_fillThickness","documentation":"","type":"any","entryType":"property"},{"name":"_points","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Shape2D"]},{"name":"GroupInstanceInfo","documentation":"","type":"typeof GroupInstanceInfo","constructors":[{"parameters":[{"name":"owner","documentation":"","type":"Group2D"},{"name":"mrc","documentation":"","type":"ModelRenderCache"},{"name":"partCount","documentation":"","type":"number"}],"returnType":"GroupInstanceInfo","documentation":""}],"entryType":"class","functions":[{"name":"dispose","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"sortTransparentData","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_isDisposed","documentation":"","type":"any","entryType":"property"},{"name":"owner","documentation":"","type":"Group2D","entryType":"property"},{"name":"modelRenderCache","documentation":"","type":"ModelRenderCache","entryType":"property"},{"name":"partIndexFromId","documentation":"","type":"StringDictionary<number>","entryType":"property"},{"name":"hasOpaqueData","documentation":"","type":"boolean","entryType":"property"},{"name":"hasAlphaTestData","documentation":"","type":"boolean","entryType":"property"},{"name":"hasTransparentData","documentation":"","type":"boolean","entryType":"property"},{"name":"opaqueDirty","documentation":"","type":"boolean","entryType":"property"},{"name":"opaqueData","documentation":"","type":"GroupInfoPartData[]","entryType":"property"},{"name":"alphaTestDirty","documentation":"","type":"boolean","entryType":"property"},{"name":"alphaTestData","documentation":"","type":"GroupInfoPartData[]","entryType":"property"},{"name":"transparentOrderDirty","documentation":"","type":"boolean","entryType":"property"},{"name":"transparentDirty","documentation":"","type":"boolean","entryType":"property"},{"name":"transparentData","documentation":"","type":"TransparentGroupInfoPartData[]","entryType":"property"},{"name":"usedShaderCategories","documentation":"","type":"string[]","entryType":"property"},{"name":"strides","documentation":"","type":"number[]","entryType":"property"},{"name":"_partCount","documentation":"","type":"any","entryType":"property"},{"name":"_strides","documentation":"","type":"any","entryType":"property"},{"name":"_usedShaderCategories","documentation":"","type":"any","entryType":"property"},{"name":"_opaqueData","documentation":"","type":"any","entryType":"property"},{"name":"_alphaTestData","documentation":"","type":"any","entryType":"property"},{"name":"_transparentData","documentation":"","type":"any","entryType":"property"}]},{"name":"TransparentSegment","documentation":"","type":"typeof TransparentSegment","constructors":[{"parameters":[],"returnType":"TransparentSegment","documentation":""}],"entryType":"class","functions":[{"name":"dispose","documentation":"","type":"(engine: Engine) => void","functionBody":[{"parameters":[{"name":"engine","documentation":"","type":"Engine"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"groupInsanceInfo","documentation":"","type":"GroupInstanceInfo","entryType":"property"},{"name":"startZ","documentation":"","type":"number","entryType":"property"},{"name":"endZ","documentation":"","type":"number","entryType":"property"},{"name":"startDataIndex","documentation":"","type":"number","entryType":"property"},{"name":"endDataIndex","documentation":"","type":"number","entryType":"property"},{"name":"partBuffers","documentation":"","type":"WebGLBuffer[]","entryType":"property"}]},{"name":"GroupInfoPartData","documentation":"","type":"typeof GroupInfoPartData","constructors":[{"parameters":[{"name":"stride","documentation":"","type":"number"}],"returnType":"GroupInfoPartData","documentation":""}],"entryType":"class","functions":[{"name":"dispose","documentation":"","type":"(engine: Engine) => boolean","functionBody":[{"parameters":[{"name":"engine","documentation":"","type":"Engine"}],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"_partData","documentation":"","type":"DynamicFloatArray","entryType":"property"},{"name":"_partBuffer","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"_partBufferSize","documentation":"","type":"number","entryType":"property"},{"name":"_isDisposed","documentation":"","type":"any","entryType":"property"}]},{"name":"TransparentGroupInfoPartData","documentation":"","type":"typeof TransparentGroupInfoPartData","constructors":[{"parameters":[{"name":"stride","documentation":"","type":"number"},{"name":"zoff","documentation":"","type":"number"}],"returnType":"TransparentGroupInfoPartData","documentation":""}],"entryType":"class","functions":[],"properties":[],"heritageClauses":["BABYLON.GroupInfoPartData"]},{"name":"ModelRenderCache","documentation":"","type":"typeof ModelRenderCache","constructors":[{"parameters":[{"name":"engine","documentation":"","type":"Engine"},{"name":"modelKey","documentation":"","type":"string"}],"returnType":"ModelRenderCache","documentation":""}],"entryType":"class","functions":[{"name":"dispose","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"addRef","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"render","documentation":"Render the model instances\n@return must return true is the rendering succeed, false if the rendering couldn't be done (asset's not yet ready, like Effect)","type":"(instanceInfo: GroupInstanceInfo, context: Render2DContext) => boolean","functionBody":[{"parameters":[{"name":"instanceInfo","documentation":"","type":"GroupInstanceInfo"},{"name":"context","documentation":"","type":"Render2DContext"}],"returnType":"boolean","documentation":"Render the model instances\n@return must return true is the rendering succeed, false if the rendering couldn't be done (asset's not yet ready, like Effect)"}],"entryType":"function"},{"name":"getPartIndexFromId","documentation":"","type":"(partId: number) => number","functionBody":[{"parameters":[{"name":"partId","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"loadInstancingAttributes","documentation":"","type":"(partId: number, effect: Effect) => InstancingAttributeInfo[]","functionBody":[{"parameters":[{"name":"partId","documentation":"","type":"number"},{"name":"effect","documentation":"","type":"Effect"}],"returnType":"InstancingAttributeInfo[]","documentation":""}],"entryType":"function"},{"name":"setupUniforms","documentation":"","type":"(effect: Effect, partIndex: number, data: DynamicFloatArray, elementCount: number) => void","functionBody":[{"parameters":[{"name":"effect","documentation":"","type":"Effect"},{"name":"partIndex","documentation":"","type":"number"},{"name":"data","documentation":"","type":"DynamicFloatArray"},{"name":"elementCount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"isDisposed","documentation":"","type":"boolean","entryType":"property"},{"name":"modelKey","documentation":"","type":"string","entryType":"property"},{"name":"v2","documentation":"","type":"any","entryType":"property"},{"name":"v3","documentation":"","type":"any","entryType":"property"},{"name":"v4","documentation":"","type":"any","entryType":"property"},{"name":"_engine","documentation":"","type":"Engine","entryType":"property"},{"name":"_modelKey","documentation":"","type":"any","entryType":"property"},{"name":"_nextKey","documentation":"","type":"any","entryType":"property"},{"name":"_refCounter","documentation":"","type":"any","entryType":"property"},{"name":"_partData","documentation":"","type":"ModelRenderCachePartData[]","entryType":"property"},{"name":"_partsClassInfo","documentation":"","type":"ClassTreeInfo<InstanceClassInfo, InstancePropInfo>[]","entryType":"property"}]},{"name":"ModelRenderCachePartData","documentation":"","type":"typeof ModelRenderCachePartData","constructors":[{"parameters":[],"returnType":"ModelRenderCachePartData","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"_partId","documentation":"","type":"number","entryType":"property"},{"name":"_zBiasOffset","documentation":"","type":"number","entryType":"property"},{"name":"_partDataStride","documentation":"","type":"number","entryType":"property"},{"name":"_partUsedCategories","documentation":"","type":"string[]","entryType":"property"},{"name":"_partJoinedUsedCategories","documentation":"","type":"string","entryType":"property"}]},{"name":"PrepareRender2DContext","documentation":"","type":"typeof PrepareRender2DContext","constructors":[{"parameters":[],"returnType":"PrepareRender2DContext","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"forceRefreshPrimitive","documentation":"True if the primitive must be refreshed no matter what\nThis mode is needed because sometimes the primitive doesn't change by itself, but external changes make a refresh of its InstanceData necessary","type":"boolean","entryType":"property"}]},{"name":"Render2DContext","documentation":"","type":"typeof Render2DContext","constructors":[{"parameters":[{"name":"renderMode","documentation":"","type":"number"}],"returnType":"Render2DContext","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"renderMode","documentation":"Define which render Mode should be used to render the primitive: one of Render2DContext.RenderModeXxxx property","type":"number","entryType":"property"},{"name":"useInstancing","documentation":"If true hardware instancing is supported and must be used for the rendering. The groupInfoPartData._partBuffer must be used.\nIf false rendering on a per primitive basis must be made. The following properties must be used\n - groupInfoPartData._partData: contains the primitive instances data to render\n - partDataStartIndex: the index into instanceArrayData of the first instance to render.\n - partDataCount: the number of primitive to render","type":"boolean","entryType":"property"},{"name":"instancedBuffers","documentation":"If specified, must take precedence from the groupInfoPartData. partIndex is the same as groupInfoPardData","type":"WebGLBuffer[]","entryType":"property"},{"name":"instancesCount","documentation":"To use when instancedBuffers is specified, gives the count of instances to draw","type":"number","entryType":"property"},{"name":"groupInfoPartData","documentation":"Contains the data related to the primitives instances to render","type":"GroupInfoPartData[]","entryType":"property"},{"name":"partDataStartIndex","documentation":"The index into groupInfoPartData._partData of the first primitive to render. This is an index, not an offset: it represent the nth primitive which is the first to render.","type":"number","entryType":"property"},{"name":"partDataEndIndex","documentation":"The exclusive end index, you have to render the primitive instances until you reach this one, but don't render this one!","type":"number","entryType":"property"},{"name":"RenderModeOpaque","documentation":"The set of primitives to render is opaque.\nThis is the first rendering pass. All Opaque primitives are rendered. Depth Compare and Write are both enabled.","type":"number","entryType":"property"},{"name":"RenderModeAlphaTest","documentation":"The set of primitives to render is using Alpha Test (aka masking).\nAlpha Blend is enabled, the AlphaMode must be manually set, the render occurs after the RenderModeOpaque and is depth independent (i.e. primitives are not sorted by depth). Depth Compare and Write are both enabled.","type":"number","entryType":"property"},{"name":"RenderModeTransparent","documentation":"The set of primitives to render is transparent.\nAlpha Blend is enabled, the AlphaMode must be manually set, the render occurs after the RenderModeAlphaTest and is depth dependent (i.e. primitives are stored by depth and rendered back to front). Depth Compare is on, but Depth write is Off.","type":"number","entryType":"property"},{"name":"_renderModeOpaque","documentation":"","type":"any","entryType":"property"},{"name":"_renderModeAlphaTest","documentation":"","type":"any","entryType":"property"},{"name":"_renderModeTransparent","documentation":"","type":"any","entryType":"property"},{"name":"_renderMode","documentation":"","type":"any","entryType":"property"}]},{"name":"PrimitivePointerInfo","documentation":"This class store information for the pointerEventObservable Observable.\nThe Observable is divided into many sub events (using the Mask feature of the Observable pattern): PointerOver, PointerEnter, PointerDown, PointerMouseWheel, PointerMove, PointerUp, PointerDown, PointerLeave, PointerGotCapture and PointerLostCapture.","type":"typeof PrimitivePointerInfo","constructors":[{"parameters":[],"returnType":"PrimitivePointerInfo","documentation":""}],"entryType":"class","functions":[{"name":"updateRelatedTarget","documentation":"","type":"(prim: Prim2DBase, primPointerPos: Vector2) => void","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"Prim2DBase"},{"name":"primPointerPos","documentation":"","type":"Vector2"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getEventTypeName","documentation":"","type":"(mask: number) => string","functionBody":[{"parameters":[{"name":"mask","documentation":"","type":"number"}],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"_pointerOver","documentation":"","type":"any","entryType":"property"},{"name":"_pointerEnter","documentation":"","type":"any","entryType":"property"},{"name":"_pointerDown","documentation":"","type":"any","entryType":"property"},{"name":"_pointerMouseWheel","documentation":"","type":"any","entryType":"property"},{"name":"_pointerMove","documentation":"","type":"any","entryType":"property"},{"name":"_pointerUp","documentation":"","type":"any","entryType":"property"},{"name":"_pointerOut","documentation":"","type":"any","entryType":"property"},{"name":"_pointerLeave","documentation":"","type":"any","entryType":"property"},{"name":"_pointerGotCapture","documentation":"","type":"any","entryType":"property"},{"name":"_pointerLostCapture","documentation":"","type":"any","entryType":"property"},{"name":"_mouseWheelPrecision","documentation":"","type":"any","entryType":"property"},{"name":"PointerOver","documentation":"This event type is raised when a pointing device is moved into the hit test boundaries of a primitive.\nBubbles: yes","type":"number","entryType":"property"},{"name":"PointerEnter","documentation":"This event type is raised when a pointing device is moved into the hit test boundaries of a primitive or one of its descendants.\nBubbles: no","type":"number","entryType":"property"},{"name":"PointerDown","documentation":"This event type is raised when a pointer enters the active button state (non-zero value in the buttons property). For mouse it's when the device transitions from no buttons depressed to at least one button depressed. For touch/pen this is when a physical contact is made.\nBubbles: yes","type":"number","entryType":"property"},{"name":"PointerMouseWheel","documentation":"This event type is raised when the pointer is a mouse and it's wheel is rolling\nBubbles: yes","type":"number","entryType":"property"},{"name":"PointerMove","documentation":"This event type is raised when a pointer change coordinates or when a pointer changes button state, pressure, tilt, or contact geometry and the circumstances produce no other pointers events.\nBubbles: yes","type":"number","entryType":"property"},{"name":"PointerUp","documentation":"This event type is raised when the pointer leaves the active buttons states (zero value in the buttons property). For mouse, this is when the device transitions from at least one button depressed to no buttons depressed. For touch/pen, this is when physical contact is removed.\nBubbles: yes","type":"number","entryType":"property"},{"name":"PointerOut","documentation":"This event type is raised when a pointing device is moved out of the hit test the boundaries of a primitive.\nBubbles: yes","type":"number","entryType":"property"},{"name":"PointerLeave","documentation":"This event type is raised when a pointing device is moved out of the hit test boundaries of a primitive and all its descendants.\nBubbles: no","type":"number","entryType":"property"},{"name":"PointerGotCapture","documentation":"This event type is raised when a primitive receives the pointer capture. This event is fired at the element that is receiving pointer capture. Subsequent events for that pointer will be fired at this element.\nBubbles: yes","type":"number","entryType":"property"},{"name":"PointerLostCapture","documentation":"This event type is raised after pointer capture is released for a pointer.\nBubbles: yes","type":"number","entryType":"property"},{"name":"MouseWheelPrecision","documentation":"","type":"number","entryType":"property"},{"name":"eventType","documentation":"Event Type, one of the static PointerXXXX property defined above (PrimitivePointerInfo.PointerOver to PrimitivePointerInfo.PointerLostCapture)","type":"number","entryType":"property"},{"name":"canvasPointerPos","documentation":"Position of the pointer relative to the bottom/left of the Canvas","type":"Vector2","entryType":"property"},{"name":"primitivePointerPos","documentation":"Position of the pointer relative to the bottom/left of the primitive that registered the Observer","type":"Vector2","entryType":"property"},{"name":"relatedTarget","documentation":"The primitive where the event was initiated first (in case of bubbling)","type":"Prim2DBase","entryType":"property"},{"name":"relatedTargetPointerPos","documentation":"Position of the pointer relative to the bottom/left of the relatedTarget","type":"Vector2","entryType":"property"},{"name":"cancelBubble","documentation":"An observable can set this property to true to stop bubbling on the upper levels","type":"boolean","entryType":"property"},{"name":"ctrlKey","documentation":"True if the Control keyboard key is down","type":"boolean","entryType":"property"},{"name":"shiftKey","documentation":"true if the Shift keyboard key is down","type":"boolean","entryType":"property"},{"name":"altKey","documentation":"true if the Alt keyboard key is down","type":"boolean","entryType":"property"},{"name":"metaKey","documentation":"true if the Meta keyboard key is down","type":"boolean","entryType":"property"},{"name":"button","documentation":"For button, buttons, refer to https://www.w3.org/TR/pointerevents/#button-states","type":"number","entryType":"property"},{"name":"buttons","documentation":"For button, buttons, refer to https://www.w3.org/TR/pointerevents/#button-states","type":"number","entryType":"property"},{"name":"mouseWheelDelta","documentation":"The amount of mouse wheel rolled","type":"number","entryType":"property"},{"name":"pointerId","documentation":"Id of the Pointer involved in the event","type":"number","entryType":"property"},{"name":"width","documentation":"","type":"number","entryType":"property"},{"name":"height","documentation":"","type":"number","entryType":"property"},{"name":"presssure","documentation":"","type":"number","entryType":"property"},{"name":"tilt","documentation":"","type":"Vector2","entryType":"property"},{"name":"isCaptured","documentation":"true if the involved pointer is captured for a particular primitive, false otherwise.","type":"boolean","entryType":"property"}]},{"name":"PrimitiveAlignment","documentation":"Defines the horizontal and vertical alignment information for a Primitive.","type":"typeof PrimitiveAlignment","constructors":[{"parameters":[{"name":"changeCallback","documentation":"","type":"() => void"}],"returnType":"PrimitiveAlignment","documentation":""}],"entryType":"class","functions":[{"name":"setHorizontal","documentation":"Set the horizontal alignment from a string value.","type":"(text: string) => void","functionBody":[{"parameters":[{"name":"text","documentation":"can be either: 'left','right','center','stretch'","type":"string"}],"returnType":"void","documentation":"Set the horizontal alignment from a string value."}],"entryType":"function"},{"name":"setVertical","documentation":"Set the vertical alignment from a string value.","type":"(text: string) => void","functionBody":[{"parameters":[{"name":"text","documentation":"can be either: 'top','bottom','center','stretch'","type":"string"}],"returnType":"void","documentation":"Set the vertical alignment from a string value."}],"entryType":"function"},{"name":"fromString","documentation":"Set the horizontal and or vertical alignments from a string value.","type":"(value: string) => void","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"string"}],"returnType":"void","documentation":"Set the horizontal and or vertical alignments from a string value."}],"entryType":"function"}],"properties":[{"name":"AlignLeft","documentation":"Alignment is made relative to the left edge of the Primitive. Valid for horizontal alignment only.","type":"number","entryType":"property"},{"name":"AlignTop","documentation":"Alignment is made relative to the top edge of the Primitive. Valid for vertical alignment only.","type":"number","entryType":"property"},{"name":"AlignRight","documentation":"Alignment is made relative to the right edge of the Primitive. Valid for horizontal alignment only.","type":"number","entryType":"property"},{"name":"AlignBottom","documentation":"Alignment is made relative to the bottom edge of the Primitive. Valid for vertical alignment only.","type":"number","entryType":"property"},{"name":"AlignCenter","documentation":"Alignment is made to center the content from equal distance to the opposite edges of the Primitive","type":"number","entryType":"property"},{"name":"AlignStretch","documentation":"The content is stretched toward the opposite edges of the Primitive","type":"number","entryType":"property"},{"name":"_AlignLeft","documentation":"","type":"any","entryType":"property"},{"name":"_AlignTop","documentation":"","type":"any","entryType":"property"},{"name":"_AlignRight","documentation":"","type":"any","entryType":"property"},{"name":"_AlignBottom","documentation":"","type":"any","entryType":"property"},{"name":"_AlignCenter","documentation":"","type":"any","entryType":"property"},{"name":"_AlignStretch","documentation":"","type":"any","entryType":"property"},{"name":"horizontal","documentation":"Get/set the horizontal alignment. Use one of the AlignXXX static properties of this class","type":"number","entryType":"property"},{"name":"vertical","documentation":"Get/set the vertical alignment. Use one of the AlignXXX static properties of this class","type":"number","entryType":"property"},{"name":"_changedCallback","documentation":"","type":"any","entryType":"property"},{"name":"_horizontal","documentation":"","type":"any","entryType":"property"},{"name":"_vertical","documentation":"","type":"any","entryType":"property"}]},{"name":"PrimitiveIntersectedInfo","documentation":"Stores information about a Primitive that was intersected","type":"typeof PrimitiveIntersectedInfo","constructors":[{"parameters":[{"name":"prim","documentation":"","type":"Prim2DBase"},{"name":"intersectionLocation","documentation":"","type":"Vector2"}],"returnType":"PrimitiveIntersectedInfo","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"prim","documentation":"","type":"Prim2DBase","entryType":"property"},{"name":"intersectionLocation","documentation":"","type":"Vector2","entryType":"property"}]},{"name":"PrimitiveThickness","documentation":"Define a thickness toward every edges of a Primitive to allow margin and padding.\nThe thickness can be expressed as pixels, percentages, inherit the value of the parent primitive or be auto.","type":"typeof PrimitiveThickness","constructors":[{"parameters":[{"name":"parentAccess","documentation":"","type":"() => PrimitiveThickness"},{"name":"changedCallback","documentation":"","type":"() => void"}],"returnType":"PrimitiveThickness","documentation":""}],"entryType":"class","functions":[{"name":"fromString","documentation":"Set the thickness from a string value","type":"(thickness: string) => void","functionBody":[{"parameters":[{"name":"thickness","documentation":"format is \"top: <value>, left:<value>, right:<value>, bottom:<value>\" or \"<value>\" (same for all edges) each are optional, auto will be set if it's omitted.\nValues are: 'auto', 'inherit', 'XX%' for percentage, 'XXpx' or 'XX' for pixels.","type":"string"}],"returnType":"void","documentation":"Set the thickness from a string value"}],"entryType":"function"},{"name":"fromStrings","documentation":"Set the thickness from multiple string\nPossible values are: 'auto', 'inherit', 'XX%' for percentage, 'XXpx' or 'XX' for pixels.","type":"(top: string, left: string, right: string, bottom: string) => PrimitiveThickness","functionBody":[{"parameters":[{"name":"top","documentation":"the top thickness to set","type":"string"},{"name":"left","documentation":"the left thickness to set","type":"string"},{"name":"right","documentation":"the right thickness to set","type":"string"},{"name":"bottom","documentation":"the bottom thickness to set","type":"string"}],"returnType":"PrimitiveThickness","documentation":"Set the thickness from multiple string\nPossible values are: 'auto', 'inherit', 'XX%' for percentage, 'XXpx' or 'XX' for pixels."}],"entryType":"function"},{"name":"fromPixels","documentation":"Set the thickness from pixel values","type":"(top: number, left: number, right: number, bottom: number) => PrimitiveThickness","functionBody":[{"parameters":[{"name":"top","documentation":"the top thickness in pixels to set","type":"number"},{"name":"left","documentation":"the left thickness in pixels to set","type":"number"},{"name":"right","documentation":"the right thickness in pixels to set","type":"number"},{"name":"bottom","documentation":"the bottom thickness in pixels to set","type":"number"}],"returnType":"PrimitiveThickness","documentation":"Set the thickness from pixel values"}],"entryType":"function"},{"name":"fromUniformPixels","documentation":"Apply the same pixel value to all edges","type":"(margin: number) => PrimitiveThickness","functionBody":[{"parameters":[{"name":"margin","documentation":"the value to set, in pixels.","type":"number"}],"returnType":"PrimitiveThickness","documentation":"Apply the same pixel value to all edges"}],"entryType":"function"},{"name":"auto","documentation":"Set all edges in auto","type":"() => PrimitiveThickness","functionBody":[{"parameters":[],"returnType":"PrimitiveThickness","documentation":"Set all edges in auto"}],"entryType":"function"},{"name":"_clear","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_extractString","documentation":"","type":"(value: any, emitChanged: any) => any","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"any"},{"name":"emitChanged","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_setStringValue","documentation":"","type":"(value: any, index: any, emitChanged: any) => any","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"any"},{"name":"index","documentation":"","type":"any"},{"name":"emitChanged","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_setPixels","documentation":"","type":"(value: any, index: any, emitChanged: any) => any","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"any"},{"name":"index","documentation":"","type":"any"},{"name":"emitChanged","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_setPercentage","documentation":"","type":"(value: any, index: any, emitChanged: any) => any","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"any"},{"name":"index","documentation":"","type":"any"},{"name":"emitChanged","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getStringValue","documentation":"","type":"(index: any) => any","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_isType","documentation":"","type":"(index: any, type: any) => any","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"any"},{"name":"type","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getType","documentation":"","type":"(index: any, processInherit: any) => any","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"any"},{"name":"processInherit","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_setType","documentation":"","type":"(index: any, type: any) => any","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"any"},{"name":"type","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setTop","documentation":"","type":"(value: number | string) => void","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"number | string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setLeft","documentation":"","type":"(value: number | string) => void","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"number | string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setRight","documentation":"","type":"(value: number | string) => void","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"number | string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setBottom","documentation":"","type":"(value: number | string) => void","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"number | string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_computePixels","documentation":"","type":"(index: any, sourceArea: any, emitChanged: any) => any","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"any"},{"name":"sourceArea","documentation":"","type":"any"},{"name":"emitChanged","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"computeWithAlignment","documentation":"Compute the positioning/size of an area considering the thickness of this object and a given alignment","type":"(sourceArea: Size, contentSize: Size, alignment: PrimitiveAlignment, dstOffset: Vector2, dstArea:...","functionBody":[{"parameters":[{"name":"sourceArea","documentation":"the source area where the content must be sized/positioned","type":"Size"},{"name":"contentSize","documentation":"the content size to position/resize","type":"Size"},{"name":"alignment","documentation":"the alignment setting","type":"PrimitiveAlignment"},{"name":"dstOffset","documentation":"the position of the content","type":"Vector2"},{"name":"dstArea","documentation":"the new size of the content","type":"Size"},{"name":"computeLayoutArea","documentation":"","type":"boolean"}],"returnType":"void","documentation":"Compute the positioning/size of an area considering the thickness of this object and a given alignment"}],"entryType":"function"},{"name":"compute","documentation":"Compute an area and its position considering this thickness properties based on a given source area","type":"(sourceArea: Size, dstOffset: Vector2, dstArea: Size) => void","functionBody":[{"parameters":[{"name":"sourceArea","documentation":"the source area","type":"Size"},{"name":"dstOffset","documentation":"the position of the resulting area","type":"Vector2"},{"name":"dstArea","documentation":"the size of the resulting area","type":"Size"}],"returnType":"void","documentation":"Compute an area and its position considering this thickness properties based on a given source area"}],"entryType":"function"},{"name":"computeArea","documentation":"Compute an area considering this thickness properties based on a given source area","type":"(sourceArea: Size, result: Size) => void","functionBody":[{"parameters":[{"name":"sourceArea","documentation":"the source area","type":"Size"},{"name":"result","documentation":"the resulting area","type":"Size"}],"returnType":"void","documentation":"Compute an area considering this thickness properties based on a given source area"}],"entryType":"function"},{"name":"enlarge","documentation":"","type":"(sourceArea: Size, dstOffset: Vector2, enlargedArea: Size) => void","functionBody":[{"parameters":[{"name":"sourceArea","documentation":"","type":"Size"},{"name":"dstOffset","documentation":"","type":"Vector2"},{"name":"enlargedArea","documentation":"","type":"Size"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"top","documentation":"Get/set the top thickness. Possible values are: 'auto', 'inherit', 'XX%' for percentage, 'XXpx' or 'XX' for pixels.","type":"string","entryType":"property"},{"name":"left","documentation":"Get/set the left thickness. Possible values are: 'auto', 'inherit', 'XX%' for percentage, 'XXpx' or 'XX' for pixels.","type":"string","entryType":"property"},{"name":"right","documentation":"Get/set the right thickness. Possible values are: 'auto', 'inherit', 'XX%' for percentage, 'XXpx' or 'XX' for pixels.","type":"string","entryType":"property"},{"name":"bottom","documentation":"Get/set the bottom thickness. Possible values are: 'auto', 'inherit', 'XX%' for percentage, 'XXpx' or 'XX' for pixels.","type":"string","entryType":"property"},{"name":"topPixels","documentation":"Get/set the top thickness in pixel.","type":"number","entryType":"property"},{"name":"leftPixels","documentation":"Get/set the left thickness in pixel.","type":"number","entryType":"property"},{"name":"rightPixels","documentation":"Get/set the right thickness in pixel.","type":"number","entryType":"property"},{"name":"bottomPixels","documentation":"Get/set the bottom thickness in pixel.","type":"number","entryType":"property"},{"name":"topPercentage","documentation":"Get/set the top thickness in percentage.\nThe get will return a valid value only if the edge type is percentage.\nThe Set will change the edge mode if needed","type":"number","entryType":"property"},{"name":"leftPercentage","documentation":"Get/set the left thickness in percentage.\nThe get will return a valid value only if the edge mode is percentage.\nThe Set will change the edge mode if needed","type":"number","entryType":"property"},{"name":"rightPercentage","documentation":"Get/set the right thickness in percentage.\nThe get will return a valid value only if the edge mode is percentage.\nThe Set will change the edge mode if needed","type":"number","entryType":"property"},{"name":"bottomPercentage","documentation":"Get/set the bottom thickness in percentage.\nThe get will return a valid value only if the edge mode is percentage.\nThe Set will change the edge mode if needed","type":"number","entryType":"property"},{"name":"topMode","documentation":"Get/set the top mode. The setter shouldn't be used, other setters with value should be preferred","type":"number","entryType":"property"},{"name":"leftMode","documentation":"Get/set the left mode. The setter shouldn't be used, other setters with value should be preferred","type":"number","entryType":"property"},{"name":"rightMode","documentation":"Get/set the right mode. The setter shouldn't be used, other setters with value should be preferred","type":"number","entryType":"property"},{"name":"bottomMode","documentation":"Get/set the bottom mode. The setter shouldn't be used, other setters with value should be preferred","type":"number","entryType":"property"},{"name":"_parentAccess","documentation":"","type":"any","entryType":"property"},{"name":"_changedCallback","documentation":"","type":"any","entryType":"property"},{"name":"_pixels","documentation":"","type":"any","entryType":"property"},{"name":"_percentages","documentation":"","type":"any","entryType":"property"},{"name":"_flags","documentation":"","type":"any","entryType":"property"},{"name":"Auto","documentation":"","type":"number","entryType":"property"},{"name":"Inherit","documentation":"","type":"number","entryType":"property"},{"name":"Percentage","documentation":"","type":"number","entryType":"property"},{"name":"Pixel","documentation":"","type":"number","entryType":"property"}]},{"name":"IntersectInfo2D","documentation":"Main class used for the Primitive Intersection API","type":"typeof IntersectInfo2D","constructors":[{"parameters":[],"returnType":"IntersectInfo2D","documentation":""}],"entryType":"class","functions":[{"name":"isPrimIntersected","documentation":"","type":"(prim: Prim2DBase) => Vector2","functionBody":[{"parameters":[{"name":"prim","documentation":"","type":"Prim2DBase"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"_exit","documentation":"","type":"(firstLevel: boolean) => void","functionBody":[{"parameters":[{"name":"firstLevel","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"pickPosition","documentation":"Set the pick position, relative to the primitive where the intersection test is made","type":"Vector2","entryType":"property"},{"name":"findFirstOnly","documentation":"If true the intersection will stop at the first hit, if false all primitives will be tested and the intersectedPrimitives array will be filled accordingly (false default)","type":"boolean","entryType":"property"},{"name":"intersectHidden","documentation":"If true the intersection test will also be made on hidden primitive (false default)","type":"boolean","entryType":"property"},{"name":"_globalPickPosition","documentation":"","type":"Vector2","entryType":"property"},{"name":"_localPickPosition","documentation":"","type":"Vector2","entryType":"property"},{"name":"topMostIntersectedPrimitive","documentation":"The topmost intersected primitive","type":"PrimitiveIntersectedInfo","entryType":"property"},{"name":"intersectedPrimitives","documentation":"The array containing all intersected primitive, in no particular order.","type":"PrimitiveIntersectedInfo[]","entryType":"property"},{"name":"isIntersected","documentation":"true if at least one primitive intersected during the test","type":"boolean","entryType":"property"}]},{"name":"Prim2DBase","documentation":"","type":"typeof Prim2DBase","constructors":[{"parameters":[{"name":"settings","documentation":"","type":"{ parent?: Prim2DBase; id?: string; children?: Prim2DBase[]; position?: Vector2; x?: number; y?: ..."}],"returnType":"Prim2DBase","documentation":""}],"entryType":"class","functions":[{"name":"traverseUp","documentation":"From 'this' primitive, traverse up (from parent to parent) until the given predicate is true\n@return the first primitive where the predicate was successful","type":"(predicate: (p: Prim2DBase) => boolean) => Prim2DBase","functionBody":[{"parameters":[{"name":"predicate","documentation":"the predicate to test on each parent","type":"(p: Prim2DBase) => boolean"}],"returnType":"Prim2DBase","documentation":"From 'this' primitive, traverse up (from parent to parent) until the given predicate is true\n@return the first primitive where the predicate was successful"}],"entryType":"function"},{"name":"_spreadActualScaleDirty","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getGlobalPosition","documentation":"return the global position of the primitive, relative to its canvas","type":"() => Vector2","functionBody":[{"parameters":[],"returnType":"Vector2","documentation":"return the global position of the primitive, relative to its canvas"}],"entryType":"function"},{"name":"getGlobalPositionByRef","documentation":"return the global position of the primitive, relative to its canvas","type":"(v: Vector2) => void","functionBody":[{"parameters":[{"name":"v","documentation":"the valid Vector2 object where the global position will be stored","type":"Vector2"}],"returnType":"void","documentation":"return the global position of the primitive, relative to its canvas"}],"entryType":"function"},{"name":"findById","documentation":"","type":"(id: string) => Prim2DBase","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Prim2DBase","documentation":""}],"entryType":"function"},{"name":"onZOrderChanged","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"levelIntersect","documentation":"","type":"(intersectInfo: IntersectInfo2D) => boolean","functionBody":[{"parameters":[{"name":"intersectInfo","documentation":"","type":"IntersectInfo2D"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"setPointerEventCapture","documentation":"Capture all the Events of the given PointerId for this primitive.\nDon't forget to call releasePointerEventsCapture when done.","type":"(pointerId: number) => boolean","functionBody":[{"parameters":[{"name":"pointerId","documentation":"the Id of the pointer to capture the events from.","type":"number"}],"returnType":"boolean","documentation":"Capture all the Events of the given PointerId for this primitive.\nDon't forget to call releasePointerEventsCapture when done."}],"entryType":"function"},{"name":"releasePointerEventsCapture","documentation":"Release a captured pointer made with setPointerEventCapture.","type":"(pointerId: number) => boolean","functionBody":[{"parameters":[{"name":"pointerId","documentation":"the Id of the pointer to release the capture from.","type":"number"}],"returnType":"boolean","documentation":"Release a captured pointer made with setPointerEventCapture."}],"entryType":"function"},{"name":"intersect","documentation":"Make an intersection test with the primitive, all inputs/outputs are stored in the IntersectInfo2D class, see its documentation for more information.","type":"(intersectInfo: IntersectInfo2D) => boolean","functionBody":[{"parameters":[{"name":"intersectInfo","documentation":"contains the settings of the intersection to perform, to setup before calling this method as well as the result, available after a call to this method.","type":"IntersectInfo2D"}],"returnType":"boolean","documentation":"Make an intersection test with the primitive, all inputs/outputs are stored in the IntersectInfo2D class, see its documentation for more information."}],"entryType":"function"},{"name":"moveChild","documentation":"Move a child object into a new position regarding its siblings to change its rendering order.\nYou can also use the shortcut methods to move top/bottom: moveChildToTop, moveChildToBottom, moveToTop, moveToBottom.","type":"(child: Prim2DBase, previous: Prim2DBase) => boolean","functionBody":[{"parameters":[{"name":"child","documentation":"the object to move","type":"Prim2DBase"},{"name":"previous","documentation":"the object which will be before \"child\", if child has to be the first among sibling, set \"previous\" to null.","type":"Prim2DBase"}],"returnType":"boolean","documentation":"Move a child object into a new position regarding its siblings to change its rendering order.\nYou can also use the shortcut methods to move top/bottom: moveChildToTop, moveChildToBottom, moveToTop, moveToBottom."}],"entryType":"function"},{"name":"moveChildToTop","documentation":"Move the given child so it's displayed on the top of all its siblings","type":"(child: Prim2DBase) => boolean","functionBody":[{"parameters":[{"name":"child","documentation":"the primitive to move to the top","type":"Prim2DBase"}],"returnType":"boolean","documentation":"Move the given child so it's displayed on the top of all its siblings"}],"entryType":"function"},{"name":"moveChildToBottom","documentation":"Move the given child so it's displayed on the bottom of all its siblings","type":"(child: Prim2DBase) => boolean","functionBody":[{"parameters":[{"name":"child","documentation":"the primitive to move to the top","type":"Prim2DBase"}],"returnType":"boolean","documentation":"Move the given child so it's displayed on the bottom of all its siblings"}],"entryType":"function"},{"name":"moveToTop","documentation":"Move this primitive to be at the top among all its sibling","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Move this primitive to be at the top among all its sibling"}],"entryType":"function"},{"name":"moveToBottom","documentation":"Move this primitive to be at the bottom among all its sibling","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Move this primitive to be at the bottom among all its sibling"}],"entryType":"function"},{"name":"addChild","documentation":"","type":"(child: any) => any","functionBody":[{"parameters":[{"name":"child","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"Dispose the primitive, remove it from its parent.","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Dispose the primitive, remove it from its parent."}],"entryType":"function"},{"name":"onPrimBecomesDirty","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_needPrepare","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_prepareRender","documentation":"","type":"(context: PrepareRender2DContext) => void","functionBody":[{"parameters":[{"name":"context","documentation":"","type":"PrepareRender2DContext"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_prepareRenderPre","documentation":"","type":"(context: PrepareRender2DContext) => void","functionBody":[{"parameters":[{"name":"context","documentation":"","type":"PrepareRender2DContext"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_prepareRenderPost","documentation":"","type":"(context: PrepareRender2DContext) => void","functionBody":[{"parameters":[{"name":"context","documentation":"","type":"PrepareRender2DContext"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_canvasPreInit","documentation":"","type":"(settings: any) => void","functionBody":[{"parameters":[{"name":"settings","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"CheckParent","documentation":"","type":"(parent: Prim2DBase) => void","functionBody":[{"parameters":[{"name":"parent","documentation":"","type":"Prim2DBase"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateCachedStatesOf","documentation":"","type":"(list: Prim2DBase[], recurse: boolean) => void","functionBody":[{"parameters":[{"name":"list","documentation":"","type":"Prim2DBase[]"},{"name":"recurse","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_parentLayoutDirty","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_setLayoutDirty","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_checkPositionChange","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_positioningDirty","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_spreadActualOpacityChanged","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_changeLayoutEngine","documentation":"","type":"(engine: any) => any","functionBody":[{"parameters":[{"name":"engine","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updateLocalTransform","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"updateCachedStates","documentation":"","type":"(recurse: boolean) => void","functionBody":[{"parameters":[{"name":"recurse","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updatePositioning","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_patchHierarchy","documentation":"","type":"(owner: Canvas2D) => void","functionBody":[{"parameters":[{"name":"owner","documentation":"","type":"Canvas2D"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateZOrder","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updatePrimitiveLinearPosition","documentation":"","type":"(prevLinPos: any) => any","functionBody":[{"parameters":[{"name":"prevLinPos","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updatePrimitiveZOrder","documentation":"","type":"(startPos: any, startZ: any, deltaZ: any) => any","functionBody":[{"parameters":[{"name":"startPos","documentation":"","type":"any"},{"name":"startZ","documentation":"","type":"any"},{"name":"deltaZ","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updatePrimitiveFlatZOrder","documentation":"","type":"(newZ: any) => any","functionBody":[{"parameters":[{"name":"newZ","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_setZOrder","documentation":"","type":"(newZ: any, directEmit: any) => any","functionBody":[{"parameters":[{"name":"newZ","documentation":"","type":"any"},{"name":"directEmit","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updateRenderMode","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getInitialContentAreaToRef","documentation":"This method is used to alter the contentArea of the Primitive before margin is applied.\nIn most of the case you won't need to override this method, but it can prove some usefulness, check the Rectangle2D class for a concrete application.","type":"(primSize: Size, initialContentPosition: Vector2, initialContentArea: Size) => void","functionBody":[{"parameters":[{"name":"primSize","documentation":"the current size of the primitive","type":"Size"},{"name":"initialContentPosition","documentation":"the position of the initial content area to compute, a valid object is passed, you have to set its properties. PLEASE ROUND the values, we're talking about pixels and fraction of them is not a good thing!","type":"Vector2"},{"name":"initialContentArea","documentation":"the size of the initial content area to compute, a valid object is passed, you have to set its properties. PLEASE ROUND the values, we're talking about pixels and fraction of them is not a good thing!","type":"Size"}],"returnType":"void","documentation":"This method is used to alter the contentArea of the Primitive before margin is applied.\nIn most of the case you won't need to override this method, but it can prove some usefulness, check the Rectangle2D class for a concrete application."}],"entryType":"function"},{"name":"_getActualSizeFromContentToRef","documentation":"This method is used to calculate the new size of the primitive based on the content which must stay the same\nCheck the Rectangle2D implementation for a concrete application.","type":"(primSize: Size, newPrimSize: Size) => void","functionBody":[{"parameters":[{"name":"primSize","documentation":"the current size of the primitive","type":"Size"},{"name":"newPrimSize","documentation":"the new size of the primitive. PLEASE ROUND THE values, we're talking about pixels and fraction of them are not our friends!","type":"Size"}],"returnType":"void","documentation":"This method is used to calculate the new size of the primitive based on the content which must stay the same\nCheck the Rectangle2D implementation for a concrete application."}],"entryType":"function"}],"properties":[{"name":"PRIM2DBASE_PROPCOUNT","documentation":"","type":"number","entryType":"property"},{"name":"_bigInt","documentation":"","type":"number","entryType":"property"},{"name":"actionManager","documentation":"","type":"ActionManager","entryType":"property"},{"name":"owner","documentation":"Retrieve the owner Canvas2D","type":"Canvas2D","entryType":"property"},{"name":"parent","documentation":"Get the parent primitive (can be the Canvas, only the Canvas has no parent)","type":"Prim2DBase","entryType":"property"},{"name":"children","documentation":"The array of direct children primitives","type":"Prim2DBase[]","entryType":"property"},{"name":"id","documentation":"The identifier of this primitive, may not be unique, it's for information purpose only","type":"string","entryType":"property"},{"name":"positionProperty","documentation":"Metadata of the position property","type":"Prim2DPropInfo","entryType":"property"},{"name":"actualPositionProperty","documentation":"Metadata of the actualPosition property","type":"Prim2DPropInfo","entryType":"property"},{"name":"sizeProperty","documentation":"Metadata of the size property","type":"Prim2DPropInfo","entryType":"property"},{"name":"rotationProperty","documentation":"Metadata of the rotation property","type":"Prim2DPropInfo","entryType":"property"},{"name":"scaleProperty","documentation":"Metadata of the scale property","type":"Prim2DPropInfo","entryType":"property"},{"name":"originProperty","documentation":"Metadata of the origin property","type":"Prim2DPropInfo","entryType":"property"},{"name":"levelVisibleProperty","documentation":"Metadata of the levelVisible property","type":"Prim2DPropInfo","entryType":"property"},{"name":"isVisibleProperty","documentation":"Metadata of the isVisible property","type":"Prim2DPropInfo","entryType":"property"},{"name":"zOrderProperty","documentation":"Metadata of the zOrder property","type":"Prim2DPropInfo","entryType":"property"},{"name":"marginProperty","documentation":"Metadata of the margin property","type":"Prim2DPropInfo","entryType":"property"},{"name":"paddingProperty","documentation":"Metadata of the margin property","type":"Prim2DPropInfo","entryType":"property"},{"name":"marginAlignmentProperty","documentation":"Metadata of the hAlignment property","type":"Prim2DPropInfo","entryType":"property"},{"name":"opacityProperty","documentation":"Metadata of the opacity property","type":"Prim2DPropInfo","entryType":"property"},{"name":"scaleXProperty","documentation":"Metadata of the scaleX property","type":"Prim2DPropInfo","entryType":"property"},{"name":"scaleYProperty","documentation":"Metadata of the scaleY property","type":"Prim2DPropInfo","entryType":"property"},{"name":"actualPosition","documentation":"DO NOT INVOKE for internal purpose only","type":"Vector2","entryType":"property"},{"name":"_nullPosition","documentation":"","type":"any","entryType":"property"},{"name":"actualX","documentation":"Shortcut to actualPosition.x","type":"number","entryType":"property"},{"name":"actualY","documentation":"Shortcut to actualPosition.y","type":"number","entryType":"property"},{"name":"position","documentation":"Position of the primitive, relative to its parent.\nBEWARE: if you change only position.x or y it won't trigger a property change and you won't have the expected behavior.\nUse this property to set a new Vector2 object, otherwise to change only the x/y use Prim2DBase.x or y properties.\nSetting this property may have no effect is specific alignment are in effect.","type":"Vector2","entryType":"property"},{"name":"x","documentation":"Direct access to the position.x value of the primitive\nUse this property when you only want to change one component of the position property","type":"number","entryType":"property"},{"name":"y","documentation":"Direct access to the position.y value of the primitive\nUse this property when you only want to change one component of the position property","type":"number","entryType":"property"},{"name":"boundinbBoxReentrency","documentation":"","type":"any","entryType":"property"},{"name":"nullSize","documentation":"","type":"Size","entryType":"property"},{"name":"size","documentation":"Size of the primitive or its bounding area\nBEWARE: if you change only size.width or height it won't trigger a property change and you won't have the expected behavior.\nUse this property to set a new Size object, otherwise to change only the width/height use Prim2DBase.width or height properties.","type":"Size","entryType":"property"},{"name":"width","documentation":"Direct access to the size.width value of the primitive\nUse this property when you only want to change one component of the size property","type":"number","entryType":"property"},{"name":"height","documentation":"Direct access to the size.height value of the primitive\nUse this property when you only want to change one component of the size property","type":"number","entryType":"property"},{"name":"rotation","documentation":"","type":"number","entryType":"property"},{"name":"scale","documentation":"","type":"number","entryType":"property"},{"name":"actualSize","documentation":"Return the size of the primitive as it's being rendered into the target.\nThis value may be different of the size property when layout/alignment is used or specific primitive types can implement a custom logic through this property.\nBEWARE: don't use the setter, it's for internal purpose only\nNote to implementers: you have to override this property and declare if necessary a @xxxxInstanceLevel decorator","type":"Size","entryType":"property"},{"name":"actualZOffset","documentation":"","type":"number","entryType":"property"},{"name":"minSize","documentation":"Get or set the minimal size the Layout Engine should respect when computing the primitive's actualSize.\nThe Primitive's size won't be less than specified.\nThe default value depends of the Primitive type","type":"Size","entryType":"property"},{"name":"maxSize","documentation":"Get or set the maximal size the Layout Engine should respect when computing the primitive's actualSize.\nThe Primitive's size won't be more than specified.\nThe default value depends of the Primitive type","type":"Size","entryType":"property"},{"name":"origin","documentation":"The origin defines the normalized coordinate of the center of the primitive, from the bottom/left corner.\nThe origin is used only to compute transformation of the primitive, it has no meaning in the primitive local frame of reference\nFor instance:\n0,0 means the center is bottom/left. Which is the default for Canvas2D instances\n0.5,0.5 means the center is at the center of the primitive, which is default of all types of Primitives\n0,1 means the center is top/left\n@returns The normalized center.","type":"Vector2","entryType":"property"},{"name":"levelVisible","documentation":"","type":"boolean","entryType":"property"},{"name":"isVisible","documentation":"","type":"boolean","entryType":"property"},{"name":"zOrder","documentation":"","type":"number","entryType":"property"},{"name":"isManualZOrder","documentation":"","type":"boolean","entryType":"property"},{"name":"margin","documentation":"","type":"PrimitiveThickness","entryType":"property"},{"name":"_hasMargin","documentation":"","type":"boolean","entryType":"property"},{"name":"padding","documentation":"","type":"PrimitiveThickness","entryType":"property"},{"name":"_hasPadding","documentation":"","type":"any","entryType":"property"},{"name":"marginAlignment","documentation":"","type":"PrimitiveAlignment","entryType":"property"},{"name":"opacity","documentation":"","type":"number","entryType":"property"},{"name":"scaleX","documentation":"","type":"number","entryType":"property"},{"name":"scaleY","documentation":"","type":"number","entryType":"property"},{"name":"actualScale","documentation":"Returns the actual scale of this Primitive, the value is computed from the scale property of this primitive, multiplied by the actualScale of its parent one (if any). The Vector2 object returned contains the scale for both X and Y axis","type":"Vector2","entryType":"property"},{"name":"actualScaleX","documentation":"Get the actual Scale of the X axis, shortcut for this.actualScale.x","type":"number","entryType":"property"},{"name":"actualScaleY","documentation":"Get the actual Scale of the Y axis, shortcut for this.actualScale.y","type":"number","entryType":"property"},{"name":"actualOpacity","documentation":"Get the actual opacity level, this property is computed from the opacity property, multiplied by the actualOpacity of its parent (if any)","type":"number","entryType":"property"},{"name":"layoutEngine","documentation":"Get/set the layout engine to use for this primitive.\nThe default layout engine is the CanvasLayoutEngine.","type":"LayoutEngineBase","entryType":"property"},{"name":"layoutArea","documentation":"Get/set the layout are of this primitive.\nThe Layout area is the zone allocated by the Layout Engine for this particular primitive. Margins/Alignment will be computed based on this area.\nThe setter should only be called by a Layout Engine class.","type":"Size","entryType":"property"},{"name":"layoutAreaPos","documentation":"Get/set the layout area position (relative to the parent primitive).\nThe setter should only be called by a Layout Engine class.","type":"Vector2","entryType":"property"},{"name":"isPickable","documentation":"Define if the Primitive can be subject to intersection test or not (default is true)","type":"boolean","entryType":"property"},{"name":"isContainer","documentation":"Define if the Primitive acts as a container or not\nA container will encapsulate its children for interaction event.\nIf it's not a container events will be process down to children if the primitive is not pickable.\nDefault value is true","type":"boolean","entryType":"property"},{"name":"hierarchyDepth","documentation":"Return the depth level of the Primitive into the Canvas' Graph. A Canvas will be 0, its direct children 1, and so on.","type":"number","entryType":"property"},{"name":"renderGroup","documentation":"Retrieve the Group that is responsible to render this primitive","type":"Group2D","entryType":"property"},{"name":"globalTransform","documentation":"Get the global transformation matrix of the primitive","type":"Matrix","entryType":"property"},{"name":"invGlobalTransform","documentation":"Get invert of the global transformation matrix of the primitive","type":"Matrix","entryType":"property"},{"name":"localTransform","documentation":"Get the local transformation of the primitive","type":"Matrix","entryType":"property"},{"name":"_bMax","documentation":"","type":"any","entryType":"property"},{"name":"_tpsBB","documentation":"","type":"any","entryType":"property"},{"name":"boundingInfo","documentation":"Get the boundingInfo associated to the primitive and its children.\nThe value is supposed to be always up to date","type":"BoundingInfo2D","entryType":"property"},{"name":"layoutBoundingInfo","documentation":"Get the boundingInfo of the primitive's content arranged by a layout Engine\nIf a particular child is not arranged by layout, it's boundingInfo is used instead to produce something as accurate as possible","type":"BoundingInfo2D","entryType":"property"},{"name":"isSizeAuto","documentation":"Determine if the size is automatically computed or fixed because manually specified.\nUse the actualSize property to get the final/real size of the primitive\n@returns true if the size is automatically computed, false if it were manually specified.","type":"boolean","entryType":"property"},{"name":"isSizedByContent","documentation":"Return true if this prim has an auto size which is set by the children's global bounding box","type":"boolean","entryType":"property"},{"name":"isPositionAuto","documentation":"Determine if the position is automatically computed or fixed because manually specified.\nUse the actualPosition property to get the final/real position of the primitive\n@returns true if the position is automatically computed, false if it were manually specified.","type":"boolean","entryType":"property"},{"name":"pointerEventObservable","documentation":"Interaction with the primitive can be create using this Observable. See the PrimitivePointerInfo class for more information","type":"Observable<PrimitivePointerInfo>","entryType":"property"},{"name":"zActualOrderChangedObservable","documentation":"","type":"Observable<number>","entryType":"property"},{"name":"_isCanvasInit","documentation":"","type":"boolean","entryType":"property"},{"name":"_t0","documentation":"","type":"any","entryType":"property"},{"name":"_t1","documentation":"","type":"any","entryType":"property"},{"name":"_t2","documentation":"","type":"any","entryType":"property"},{"name":"_v0","documentation":"","type":"any","entryType":"property"},{"name":"_transMtx","documentation":"","type":"any","entryType":"property"},{"name":"_icPos","documentation":"","type":"any","entryType":"property"},{"name":"_icArea","documentation":"","type":"any","entryType":"property"},{"name":"_size","documentation":"","type":"any","entryType":"property"},{"name":"contentArea","documentation":"Get the content are of this primitive, this area is computed using the padding property and also possibly the primitive type itself.\nChildren of this primitive will be positioned relative to the bottom/left corner of this area.","type":"Size","entryType":"property"},{"name":"_zOrderChangedNotifList","documentation":"","type":"any","entryType":"property"},{"name":"_zRebuildReentrency","documentation":"","type":"any","entryType":"property"},{"name":"_totalCount","documentation":"","type":"any","entryType":"property"},{"name":"_owner","documentation":"","type":"any","entryType":"property"},{"name":"_parent","documentation":"","type":"any","entryType":"property"},{"name":"_actionManager","documentation":"","type":"any","entryType":"property"},{"name":"_children","documentation":"","type":"Prim2DBase[]","entryType":"property"},{"name":"_renderGroup","documentation":"","type":"any","entryType":"property"},{"name":"_hierarchyDepth","documentation":"","type":"number","entryType":"property"},{"name":"_zOrder","documentation":"","type":"number","entryType":"property"},{"name":"_manualZOrder","documentation":"","type":"any","entryType":"property"},{"name":"_zMax","documentation":"","type":"number","entryType":"property"},{"name":"_firstZDirtyIndex","documentation":"","type":"any","entryType":"property"},{"name":"_primLinearPosition","documentation":"","type":"any","entryType":"property"},{"name":"_margin","documentation":"","type":"any","entryType":"property"},{"name":"_padding","documentation":"","type":"any","entryType":"property"},{"name":"_marginAlignment","documentation":"","type":"any","entryType":"property"},{"name":"_pointerEventObservable","documentation":"","type":"Observable<PrimitivePointerInfo>","entryType":"property"},{"name":"_actualZOrderChangedObservable","documentation":"","type":"any","entryType":"property"},{"name":"_id","documentation":"","type":"any","entryType":"property"},{"name":"_position","documentation":"","type":"any","entryType":"property"},{"name":"_actualPosition","documentation":"","type":"any","entryType":"property"},{"name":"_size","documentation":"","type":"Size","entryType":"property"},{"name":"_actualSize","documentation":"","type":"Size","entryType":"property"},{"name":"_boundingSize","documentation":"","type":"Size","entryType":"property"},{"name":"_minSize","documentation":"","type":"Size","entryType":"property"},{"name":"_maxSize","documentation":"","type":"Size","entryType":"property"},{"name":"_desiredSize","documentation":"","type":"Size","entryType":"property"},{"name":"_layoutEngine","documentation":"","type":"any","entryType":"property"},{"name":"_marginOffset","documentation":"","type":"any","entryType":"property"},{"name":"_paddingOffset","documentation":"","type":"any","entryType":"property"},{"name":"_parentPaddingOffset","documentation":"","type":"any","entryType":"property"},{"name":"_parentContentArea","documentation":"","type":"any","entryType":"property"},{"name":"_lastAutoSizeArea","documentation":"","type":"any","entryType":"property"},{"name":"_layoutAreaPos","documentation":"","type":"any","entryType":"property"},{"name":"_layoutArea","documentation":"","type":"any","entryType":"property"},{"name":"_contentArea","documentation":"","type":"any","entryType":"property"},{"name":"_rotation","documentation":"","type":"any","entryType":"property"},{"name":"_scale","documentation":"","type":"any","entryType":"property"},{"name":"_origin","documentation":"","type":"any","entryType":"property"},{"name":"_opacity","documentation":"","type":"number","entryType":"property"},{"name":"_actualOpacity","documentation":"","type":"any","entryType":"property"},{"name":"_actualScale","documentation":"","type":"any","entryType":"property"},{"name":"_parentTransformStep","documentation":"","type":"number","entryType":"property"},{"name":"_globalTransformStep","documentation":"","type":"number","entryType":"property"},{"name":"_globalTransformProcessStep","documentation":"","type":"number","entryType":"property"},{"name":"_localTransform","documentation":"","type":"Matrix","entryType":"property"},{"name":"_globalTransform","documentation":"","type":"Matrix","entryType":"property"},{"name":"_invGlobalTransform","documentation":"","type":"Matrix","entryType":"property"}],"heritageClauses":["BABYLON.SmartPropertyPrim"]},{"name":"Rectangle2DRenderCache","documentation":"","type":"typeof Rectangle2DRenderCache","constructors":[{"parameters":[{"name":"engine","documentation":"","type":"Engine"},{"name":"modelKey","documentation":"","type":"string"}],"returnType":"Rectangle2DRenderCache","documentation":""}],"entryType":"class","functions":[{"name":"render","documentation":"","type":"(instanceInfo: GroupInstanceInfo, context: Render2DContext) => boolean","functionBody":[{"parameters":[{"name":"instanceInfo","documentation":"","type":"GroupInstanceInfo"},{"name":"context","documentation":"","type":"Render2DContext"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"effectsReady","documentation":"","type":"boolean","entryType":"property"},{"name":"fillVB","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"fillIB","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"fillIndicesCount","documentation":"","type":"number","entryType":"property"},{"name":"instancingFillAttributes","documentation":"","type":"InstancingAttributeInfo[]","entryType":"property"},{"name":"effectFill","documentation":"","type":"Effect","entryType":"property"},{"name":"effectFillInstanced","documentation":"","type":"Effect","entryType":"property"},{"name":"borderVB","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"borderIB","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"borderIndicesCount","documentation":"","type":"number","entryType":"property"},{"name":"instancingBorderAttributes","documentation":"","type":"InstancingAttributeInfo[]","entryType":"property"},{"name":"effectBorder","documentation":"","type":"Effect","entryType":"property"},{"name":"effectBorderInstanced","documentation":"","type":"Effect","entryType":"property"}],"heritageClauses":["BABYLON.ModelRenderCache"]},{"name":"Rectangle2DInstanceData","documentation":"","type":"typeof Rectangle2DInstanceData","constructors":[{"parameters":[{"name":"partId","documentation":"","type":"number"}],"returnType":"Rectangle2DInstanceData","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"properties","documentation":"","type":"Vector3","entryType":"property"}],"heritageClauses":["BABYLON.Shape2DInstanceData"]},{"name":"Rectangle2D","documentation":"","type":"typeof Rectangle2D","constructors":[{"parameters":[{"name":"settings","documentation":"a combination of settings, possible ones are\n- parent: the parent primitive/canvas, must be specified if the primitive is not constructed as a child of another one (i.e. as part of the children array setting)\n- children: an array of direct children\n- id a text identifier, for information purpose\n- position: the X & Y positions relative to its parent. Alternatively the x and y settings can be set. Default is [0;0]\n- rotation: the initial rotation (in radian) of the primitive. default is 0\n- scale: the initial scale of the primitive. default is 1. You can alternatively use scaleX &| scaleY to apply non uniform scale\n- dontInheritParentScale: if set the parent's scale won't be taken into consideration to compute the actualScale property\n- opacity: set the overall opacity of the primitive, 1 to be opaque (default), less than 1 to be transparent.\n- zOrder: override the zOrder with the specified value\n- origin: define the normalized origin point location, default [0.5;0.5]\n- size: the size of the group. Alternatively the width and height settings can be set. Default will be [10;10].\n- roundRadius: if the rectangle has rounded corner, set their radius, default is 0 (to get a sharp edges rectangle).\n- fill: the brush used to draw the fill content of the rectangle, you can set null to draw nothing (but you will have to set a border brush), default is a SolidColorBrush of plain white. can also be a string value (see Canvas2D.GetBrushFromString)\n- border: the brush used to draw the border of the rectangle, you can set null to draw nothing (but you will have to set a fill brush), default is null. can also be a string value (see Canvas2D.GetBrushFromString)\n- borderThickness: the thickness of the drawn border, default is 1.\n- isVisible: true if the primitive must be visible, false for hidden. Default is true.\n- isPickable: if true the Primitive can be used with interaction mode and will issue Pointer Event. If false it will be ignored for interaction/intersection test. Default value is true.\n- isContainer: if true the Primitive acts as a container for interaction, if the primitive is not pickable or doesn't intersection, no further test will be perform on its children. If set to false, children will always be considered for intersection/interaction. Default value is true.\n- childrenFlatZOrder: if true all the children (direct and indirect) will share the same Z-Order. Use this when there's a lot of children which don't overlap. The drawing order IS NOT GUARANTED!\n- marginTop: top margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginLeft: left margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginRight: right margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginBottom: bottom margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- margin: top, left, right and bottom margin formatted as a single string (see PrimitiveThickness.fromString)\n- marginHAlignment: one value of the PrimitiveAlignment type's static properties\n- marginVAlignment: one value of the PrimitiveAlignment type's static properties\n- marginAlignment: a string defining the alignment, see PrimitiveAlignment.fromString\n- paddingTop: top padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingLeft: left padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingRight: right padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingBottom: bottom padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- padding: top, left, right and bottom padding formatted as a single string (see PrimitiveThickness.fromString)","type":"{ parent?: Prim2DBase; children?: Prim2DBase[]; id?: string; position?: Vector2; x?: number; y?: ..."}],"returnType":"Rectangle2D","documentation":"Create an Rectangle 2D Shape primitive. May be a sharp rectangle (with sharp corners), or a rounded one."}],"entryType":"class","functions":[{"name":"levelIntersect","documentation":"","type":"(intersectInfo: IntersectInfo2D) => boolean","functionBody":[{"parameters":[{"name":"intersectInfo","documentation":"","type":"IntersectInfo2D"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"updateLevelBoundingInfo","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createModelRenderCache","documentation":"","type":"(modelKey: string) => ModelRenderCache","functionBody":[{"parameters":[{"name":"modelKey","documentation":"","type":"string"}],"returnType":"ModelRenderCache","documentation":""}],"entryType":"function"},{"name":"setupModelRenderCache","documentation":"","type":"(modelRenderCache: ModelRenderCache) => Rectangle2DRenderCache","functionBody":[{"parameters":[{"name":"modelRenderCache","documentation":"","type":"ModelRenderCache"}],"returnType":"Rectangle2DRenderCache","documentation":""}],"entryType":"function"},{"name":"_getInitialContentAreaToRef","documentation":"","type":"(primSize: Size, initialContentPosition: Vector2, initialContentArea: Size) => void","functionBody":[{"parameters":[{"name":"primSize","documentation":"","type":"Size"},{"name":"initialContentPosition","documentation":"","type":"Vector2"},{"name":"initialContentArea","documentation":"","type":"Size"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getActualSizeFromContentToRef","documentation":"","type":"(primSize: Size, newPrimSize: Size) => void","functionBody":[{"parameters":[{"name":"primSize","documentation":"","type":"Size"},{"name":"newPrimSize","documentation":"","type":"Size"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createInstanceDataParts","documentation":"","type":"() => InstanceDataBase[]","functionBody":[{"parameters":[],"returnType":"InstanceDataBase[]","documentation":""}],"entryType":"function"},{"name":"refreshInstanceDataPart","documentation":"","type":"(part: InstanceDataBase) => boolean","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"}],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"actualSizeProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"notRoundedProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"roundRadiusProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"actualSize","documentation":"","type":"Size","entryType":"property"},{"name":"notRounded","documentation":"","type":"boolean","entryType":"property"},{"name":"roundRadius","documentation":"","type":"number","entryType":"property"},{"name":"_i0","documentation":"","type":"any","entryType":"property"},{"name":"_i1","documentation":"","type":"any","entryType":"property"},{"name":"_i2","documentation":"","type":"any","entryType":"property"},{"name":"roundSubdivisions","documentation":"","type":"number","entryType":"property"},{"name":"_notRounded","documentation":"","type":"any","entryType":"property"},{"name":"_roundRadius","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Shape2D"]},{"name":"InstanceClassInfo","documentation":"","type":"typeof InstanceClassInfo","constructors":[{"parameters":[{"name":"base","documentation":"","type":"InstanceClassInfo"}],"returnType":"InstanceClassInfo","documentation":""}],"entryType":"class","functions":[{"name":"mapProperty","documentation":"","type":"(propInfo: InstancePropInfo, push: boolean) => void","functionBody":[{"parameters":[{"name":"propInfo","documentation":"","type":"InstancePropInfo"},{"name":"push","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getInstancingAttributeInfos","documentation":"","type":"(effect: Effect, categories: string[]) => InstancingAttributeInfo[]","functionBody":[{"parameters":[{"name":"effect","documentation":"","type":"Effect"},{"name":"categories","documentation":"","type":"string[]"}],"returnType":"InstancingAttributeInfo[]","documentation":""}],"entryType":"function"},{"name":"getShaderAttributes","documentation":"","type":"(categories: string[]) => string[]","functionBody":[{"parameters":[{"name":"categories","documentation":"","type":"string[]"}],"returnType":"string[]","documentation":""}],"entryType":"function"},{"name":"_getBaseOffset","documentation":"","type":"(categories: any) => any","functionBody":[{"parameters":[{"name":"categories","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_CurCategories","documentation":"","type":"string","entryType":"property"},{"name":"_baseInfo","documentation":"","type":"any","entryType":"property"},{"name":"_nextOffset","documentation":"","type":"any","entryType":"property"},{"name":"_attributes","documentation":"","type":"any","entryType":"property"}]},{"name":"InstancePropInfo","documentation":"","type":"typeof InstancePropInfo","constructors":[{"parameters":[],"returnType":"InstancePropInfo","documentation":""}],"entryType":"class","functions":[{"name":"setSize","documentation":"","type":"(val: any) => void","functionBody":[{"parameters":[{"name":"val","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"writeData","documentation":"","type":"(array: Float32Array, offset: number, val: any) => void","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"Float32Array"},{"name":"offset","documentation":"","type":"number"},{"name":"val","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"attributeName","documentation":"","type":"string","entryType":"property"},{"name":"category","documentation":"","type":"string","entryType":"property"},{"name":"size","documentation":"","type":"number","entryType":"property"},{"name":"shaderOffset","documentation":"","type":"number","entryType":"property"},{"name":"instanceOffset","documentation":"","type":"StringDictionary<number>","entryType":"property"},{"name":"dataType","documentation":"","type":"ShaderDataType","entryType":"property"},{"name":"delimitedCategory","documentation":"","type":"string","entryType":"property"}]},{"name":"InstanceDataBase","documentation":"","type":"typeof InstanceDataBase","constructors":[{"parameters":[{"name":"partId","documentation":"","type":"number"},{"name":"dataElementCount","documentation":"","type":"number"}],"returnType":"InstanceDataBase","documentation":""}],"entryType":"class","functions":[{"name":"getClassTreeInfo","documentation":"","type":"() => ClassTreeInfo<InstanceClassInfo, InstancePropInfo>","functionBody":[{"parameters":[],"returnType":"ClassTreeInfo<InstanceClassInfo, InstancePropInfo>","documentation":""}],"entryType":"function"},{"name":"allocElements","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"freeElements","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"id","documentation":"","type":"number","entryType":"property"},{"name":"isVisible","documentation":"","type":"boolean","entryType":"property"},{"name":"zBias","documentation":"","type":"Vector2","entryType":"property"},{"name":"transformX","documentation":"","type":"Vector4","entryType":"property"},{"name":"transformY","documentation":"","type":"Vector4","entryType":"property"},{"name":"opacity","documentation":"","type":"number","entryType":"property"},{"name":"dataElementCount","documentation":"","type":"number","entryType":"property"},{"name":"groupInstanceInfo","documentation":"","type":"GroupInstanceInfo","entryType":"property"},{"name":"arrayLengthChanged","documentation":"","type":"boolean","entryType":"property"},{"name":"curElement","documentation":"","type":"number","entryType":"property"},{"name":"renderMode","documentation":"","type":"number","entryType":"property"},{"name":"dataElements","documentation":"","type":"DynamicFloatArrayElementInfo[]","entryType":"property"},{"name":"dataBuffer","documentation":"","type":"DynamicFloatArray","entryType":"property"},{"name":"typeInfo","documentation":"","type":"ClassTreeInfo<InstanceClassInfo, InstancePropInfo>","entryType":"property"},{"name":"_dataElementCount","documentation":"","type":"any","entryType":"property"}]},{"name":"RenderablePrim2D","documentation":"","type":"typeof RenderablePrim2D","constructors":[{"parameters":[{"name":"settings","documentation":"","type":"{ parent?: Prim2DBase; id?: string; origin?: Vector2; isVisible?: boolean; }"}],"returnType":"RenderablePrim2D","documentation":""}],"entryType":"class","functions":[{"name":"dispose","documentation":"Dispose the primitive and its resources, remove it from its parent","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Dispose the primitive and its resources, remove it from its parent"}],"entryType":"function"},{"name":"_cleanupInstanceDataParts","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_prepareRenderPre","documentation":"","type":"(context: PrepareRender2DContext) => void","functionBody":[{"parameters":[{"name":"context","documentation":"","type":"PrepareRender2DContext"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_createModelRenderCache","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createModelDataParts","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_setupModelRenderCache","documentation":"","type":"(parts: any) => any","functionBody":[{"parameters":[{"name":"parts","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"onZOrderChanged","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_mustUpdateInstance","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_useTextureAlpha","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_shouldUseAlphaFromTexture","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_isPrimAlphaTest","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_isPrimTransparent","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_updateInstanceDataParts","documentation":"","type":"(gii: any) => any","functionBody":[{"parameters":[{"name":"gii","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updateTransparentSegmentIndices","documentation":"","type":"(ts: TransparentSegment) => void","functionBody":[{"parameters":[{"name":"ts","documentation":"","type":"TransparentSegment"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getNextPrimZOrder","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"_getPrevPrimZOrder","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"transformPointWithOriginByRef","documentation":"Transform a given point using the Primitive's origin setting.\nThis method requires the Primitive's actualSize to be accurate","type":"(p: Vector2, originOffset: Vector2, res: Vector2) => void","functionBody":[{"parameters":[{"name":"p","documentation":"the point to transform","type":"Vector2"},{"name":"originOffset","documentation":"an offset applied on the current origin before performing the transformation. Depending on which frame of reference your data is expressed you may have to apply a offset. (if you data is expressed from the bottom/left, no offset is required. If it's expressed from the center the a [-0.5;-0.5] offset has to be applied.","type":"Vector2"},{"name":"res","documentation":"an allocated Vector2 that will receive the transformed content","type":"Vector2"}],"returnType":"void","documentation":"Transform a given point using the Primitive's origin setting.\nThis method requires the Primitive's actualSize to be accurate"}],"entryType":"function"},{"name":"transformPointWithOriginToRef","documentation":"","type":"(p: Vector2, originOffset: Vector2, res: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"p","documentation":"","type":"Vector2"},{"name":"originOffset","documentation":"","type":"Vector2"},{"name":"res","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"getDataPartEffectInfo","documentation":"Get the info for a given effect based on the dataPart metadata","type":"(dataPartId: number, vertexBufferAttributes: string[], uniforms?: string[], useInstanced?: boolea...","functionBody":[{"parameters":[{"name":"dataPartId","documentation":"partId in part list to get the info","type":"number"},{"name":"vertexBufferAttributes","documentation":"vertex buffer attributes to manually add","type":"string[]"},{"name":"uniforms","documentation":"uniforms to manually add","type":"string[]"},{"name":"useInstanced","documentation":"specified if Instanced Array should be used, if null the engine caps will be used (so true if WebGL supports it, false otherwise), but you have the possibility to override the engine capability. However, if you manually set true but the engine does not support Instanced Array, this method will return null","type":"boolean"}],"returnType":"{ attributes: string[]; uniforms: string[]; defines: string; }","documentation":"Get the info for a given effect based on the dataPart metadata"}],"entryType":"function"},{"name":"createModelRenderCache","documentation":"","type":"(modelKey: string) => ModelRenderCache","functionBody":[{"parameters":[{"name":"modelKey","documentation":"","type":"string"}],"returnType":"ModelRenderCache","documentation":""}],"entryType":"function"},{"name":"setupModelRenderCache","documentation":"","type":"(modelRenderCache: ModelRenderCache) => void","functionBody":[{"parameters":[{"name":"modelRenderCache","documentation":"","type":"ModelRenderCache"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createInstanceDataParts","documentation":"","type":"() => InstanceDataBase[]","functionBody":[{"parameters":[],"returnType":"InstanceDataBase[]","documentation":""}],"entryType":"function"},{"name":"getUsedShaderCategories","documentation":"","type":"(dataPart: InstanceDataBase) => string[]","functionBody":[{"parameters":[{"name":"dataPart","documentation":"","type":"InstanceDataBase"}],"returnType":"string[]","documentation":""}],"entryType":"function"},{"name":"beforeRefreshForLayoutConstruction","documentation":"","type":"(part: InstanceDataBase) => any","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"afterRefreshForLayoutConstruction","documentation":"","type":"(part: InstanceDataBase, obj: any) => void","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"},{"name":"obj","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"applyActualScaleOnTransform","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"refreshInstanceDataPart","documentation":"","type":"(part: InstanceDataBase) => boolean","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"updateInstanceDataPart","documentation":"Update the instanceDataBase level properties of a part","type":"(part: InstanceDataBase, positionOffset?: Vector2) => void","functionBody":[{"parameters":[{"name":"part","documentation":"the part to update","type":"InstanceDataBase"},{"name":"positionOffset","documentation":"to use in multi part per primitive (e.g. the Text2D has N parts for N letter to display), this give the offset to apply (e.g. the position of the letter from the bottom/left corner of the text).","type":"Vector2"}],"returnType":"void","documentation":"Update the instanceDataBase level properties of a part"}],"entryType":"function"},{"name":"_updateRenderMode","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"RENDERABLEPRIM2D_PROPCOUNT","documentation":"","type":"number","entryType":"property"},{"name":"isAlphaTestProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"isTransparentProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"isAlphaTest","documentation":"","type":"boolean","entryType":"property"},{"name":"isTransparent","documentation":"","type":"boolean","entryType":"property"},{"name":"renderMode","documentation":"","type":"number","entryType":"property"},{"name":"modelRenderCache","documentation":"","type":"ModelRenderCache","entryType":"property"},{"name":"_uV","documentation":"","type":"any","entryType":"property"},{"name":"_modelRenderCache","documentation":"","type":"any","entryType":"property"},{"name":"_transparentPrimitiveInfo","documentation":"","type":"any","entryType":"property"},{"name":"_instanceDataParts","documentation":"","type":"InstanceDataBase[]","entryType":"property"},{"name":"_renderMode","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Prim2DBase"]},{"name":"Shape2D","documentation":"","type":"typeof Shape2D","constructors":[{"parameters":[{"name":"settings","documentation":"","type":"{ fill?: IBrush2D | string; border?: IBrush2D | string; borderThickness?: number; }"}],"returnType":"Shape2D","documentation":""}],"entryType":"class","functions":[{"name":"getUsedShaderCategories","documentation":"","type":"(dataPart: InstanceDataBase) => string[]","functionBody":[{"parameters":[{"name":"dataPart","documentation":"","type":"InstanceDataBase"}],"returnType":"string[]","documentation":""}],"entryType":"function"},{"name":"applyActualScaleOnTransform","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"refreshInstanceDataPart","documentation":"","type":"(part: InstanceDataBase) => boolean","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_updateTransparencyStatus","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_mustUpdateInstance","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_isPrimTransparent","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"SHAPE2D_BORDERPARTID","documentation":"","type":"number","entryType":"property"},{"name":"SHAPE2D_FILLPARTID","documentation":"","type":"number","entryType":"property"},{"name":"SHAPE2D_CATEGORY_BORDER","documentation":"","type":"string","entryType":"property"},{"name":"SHAPE2D_CATEGORY_BORDERSOLID","documentation":"","type":"string","entryType":"property"},{"name":"SHAPE2D_CATEGORY_BORDERGRADIENT","documentation":"","type":"string","entryType":"property"},{"name":"SHAPE2D_CATEGORY_FILLSOLID","documentation":"","type":"string","entryType":"property"},{"name":"SHAPE2D_CATEGORY_FILLGRADIENT","documentation":"","type":"string","entryType":"property"},{"name":"SHAPE2D_PROPCOUNT","documentation":"","type":"number","entryType":"property"},{"name":"borderProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"fillProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"borderThicknessProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"border","documentation":"","type":"IBrush2D","entryType":"property"},{"name":"fill","documentation":"Get/set the brush to render the Fill part of the Primitive","type":"IBrush2D","entryType":"property"},{"name":"borderThickness","documentation":"","type":"number","entryType":"property"},{"name":"_oldTransparent","documentation":"","type":"any","entryType":"property"},{"name":"_isTransparent","documentation":"","type":"any","entryType":"property"},{"name":"_border","documentation":"","type":"any","entryType":"property"},{"name":"_borderThickness","documentation":"","type":"any","entryType":"property"},{"name":"_fill","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.RenderablePrim2D"]},{"name":"Shape2DInstanceData","documentation":"","type":"typeof Shape2DInstanceData","constructors":[{"parameters":[{"name":"partId","documentation":"","type":"number"},{"name":"dataElementCount","documentation":"","type":"number"}],"returnType":"Shape2DInstanceData","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"fillSolidColor","documentation":"","type":"Color4","entryType":"property"},{"name":"fillGradientColor1","documentation":"","type":"Color4","entryType":"property"},{"name":"fillGradientColor2","documentation":"","type":"Color4","entryType":"property"},{"name":"fillGradientTY","documentation":"","type":"Vector4","entryType":"property"},{"name":"borderThickness","documentation":"","type":"number","entryType":"property"},{"name":"borderSolidColor","documentation":"","type":"Color4","entryType":"property"},{"name":"borderGradientColor1","documentation":"","type":"Color4","entryType":"property"},{"name":"borderGradientColor2","documentation":"","type":"Color4","entryType":"property"},{"name":"borderGradientTY","documentation":"","type":"Vector4","entryType":"property"}],"heritageClauses":["BABYLON.InstanceDataBase"]},{"name":"Prim2DClassInfo","documentation":"","type":"typeof Prim2DClassInfo","constructors":[{"parameters":[],"returnType":"Prim2DClassInfo","documentation":""}],"entryType":"class","functions":[],"properties":[]},{"name":"Prim2DPropInfo","documentation":"","type":"typeof Prim2DPropInfo","constructors":[{"parameters":[],"returnType":"Prim2DPropInfo","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"PROPKIND_MODEL","documentation":"","type":"number","entryType":"property"},{"name":"PROPKIND_INSTANCE","documentation":"","type":"number","entryType":"property"},{"name":"PROPKIND_DYNAMIC","documentation":"","type":"number","entryType":"property"},{"name":"id","documentation":"","type":"number","entryType":"property"},{"name":"flagId","documentation":"","type":"number","entryType":"property"},{"name":"kind","documentation":"","type":"number","entryType":"property"},{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"dirtyBoundingInfo","documentation":"","type":"boolean","entryType":"property"},{"name":"dirtyParentBoundingInfo","documentation":"","type":"boolean","entryType":"property"},{"name":"typeLevelCompare","documentation":"","type":"boolean","entryType":"property"}]},{"name":"PropertyChangedInfo","documentation":"Custom type of the propertyChanged observable","type":"typeof PropertyChangedInfo","constructors":[{"parameters":[],"returnType":"PropertyChangedInfo","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"oldValue","documentation":"Previous value of the property","type":"any","entryType":"property"},{"name":"newValue","documentation":"New value of the property","type":"any","entryType":"property"},{"name":"propertyName","documentation":"Name of the property that changed its value","type":"string","entryType":"property"}]},{"name":"ClassTreeInfo","documentation":"","type":"typeof ClassTreeInfo","constructors":[{"parameters":[{"name":"baseClass","documentation":"","type":"ClassTreeInfo<TClass, TProp>"},{"name":"type","documentation":"","type":"Object"},{"name":"classContentFactory","documentation":"","type":"(base: TClass) => TClass"}],"returnType":"ClassTreeInfo<TClass, TProp>","documentation":""}],"entryType":"class","functions":[{"name":"getLevelOf","documentation":"","type":"(type: Object) => ClassTreeInfo<TClass, TProp>","functionBody":[{"parameters":[{"name":"type","documentation":"","type":"Object"}],"returnType":"ClassTreeInfo<TClass, TProp>","documentation":""}],"entryType":"function"},{"name":"getOrAddType","documentation":"","type":"(baseType: Object, type: Object) => ClassTreeInfo<TClass, TProp>","functionBody":[{"parameters":[{"name":"baseType","documentation":"","type":"Object"},{"name":"type","documentation":"","type":"Object"}],"returnType":"ClassTreeInfo<TClass, TProp>","documentation":""}],"entryType":"function"},{"name":"get","documentation":"","type":"<TClass, TProp>(type: Object) => ClassTreeInfo<TClass, TProp>","functionBody":[{"parameters":[{"name":"type","documentation":"","type":"Object"}],"returnType":"ClassTreeInfo<TClass, TProp>","documentation":""}],"entryType":"function"},{"name":"getOrRegister","documentation":"","type":"<TClass, TProp>(type: Object, classContentFactory: (base: TClass) => TClass) => ClassTreeInfo<TCl...","functionBody":[{"parameters":[{"name":"type","documentation":"","type":"Object"},{"name":"classContentFactory","documentation":"","type":"(base: TClass) => TClass"}],"returnType":"ClassTreeInfo<TClass, TProp>","documentation":""}],"entryType":"function"}],"properties":[{"name":"classContent","documentation":"","type":"TClass","entryType":"property"},{"name":"type","documentation":"","type":"Object","entryType":"property"},{"name":"levelContent","documentation":"","type":"StringDictionary<TProp>","entryType":"property"},{"name":"fullContent","documentation":"","type":"StringDictionary<TProp>","entryType":"property"},{"name":"_type","documentation":"","type":"any","entryType":"property"},{"name":"_classContent","documentation":"","type":"any","entryType":"property"},{"name":"_baseClass","documentation":"","type":"any","entryType":"property"},{"name":"_subClasses","documentation":"","type":"any","entryType":"property"},{"name":"_levelContent","documentation":"","type":"any","entryType":"property"},{"name":"_fullContent","documentation":"","type":"any","entryType":"property"},{"name":"_classContentFactory","documentation":"","type":"any","entryType":"property"}]},{"name":"SmartPropertyPrim","documentation":"","type":"typeof SmartPropertyPrim","constructors":[{"parameters":[],"returnType":"SmartPropertyPrim","documentation":""}],"entryType":"class","functions":[{"name":"dispose","documentation":"Disposable pattern, this method must be overloaded by derived types in order to clean up hardware related resources.\n@returns false if the object is already dispose, true otherwise. Your implementation must call super.dispose() and check for a false return and return immediately if it's the case.","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Disposable pattern, this method must be overloaded by derived types in order to clean up hardware related resources.\n@returns false if the object is already dispose, true otherwise. Your implementation must call super.dispose() and check for a false return and return immediately if it's the case."}],"entryType":"function"},{"name":"getAnimatables","documentation":"Returns as a new array populated with the Animatable used by the primitive. Must be overloaded by derived primitives.\nLook at Sprite2D for more information","type":"() => IAnimatable[]","functionBody":[{"parameters":[],"returnType":"IAnimatable[]","documentation":"Returns as a new array populated with the Animatable used by the primitive. Must be overloaded by derived primitives.\nLook at Sprite2D for more information"}],"entryType":"function"},{"name":"_createPropInfo","documentation":"","type":"(target: any, propName: any, propId: any, dirtyBoundingInfo: any, dirtyParentBoundingBox: any, ty...","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"any"},{"name":"propName","documentation":"","type":"any"},{"name":"propId","documentation":"","type":"any"},{"name":"dirtyBoundingInfo","documentation":"","type":"any"},{"name":"dirtyParentBoundingBox","documentation":"","type":"any"},{"name":"typeLevelCompare","documentation":"","type":"any"},{"name":"kind","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_checkUnchanged","documentation":"","type":"(curValue: any, newValue: any) => any","functionBody":[{"parameters":[{"name":"curValue","documentation":"","type":"any"},{"name":"newValue","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_triggerPropertyChanged","documentation":"","type":"(propInfo: Prim2DPropInfo, newValue: any) => void","functionBody":[{"parameters":[{"name":"propInfo","documentation":"","type":"Prim2DPropInfo"},{"name":"newValue","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_boundingBoxDirty","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_handlePropChanged","documentation":"","type":"<T>(curValue: any, newValue: any, propName: any, propInfo: any, typeLevelCompare: any) => any","functionBody":[{"parameters":[{"name":"curValue","documentation":"","type":"any"},{"name":"newValue","documentation":"","type":"any"},{"name":"propName","documentation":"","type":"any"},{"name":"propInfo","documentation":"","type":"any"},{"name":"typeLevelCompare","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"onPrimitivePropertyDirty","documentation":"","type":"(propFlagId: number) => void","functionBody":[{"parameters":[{"name":"propFlagId","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"handleGroupChanged","documentation":"","type":"(prop: Prim2DPropInfo) => void","functionBody":[{"parameters":[{"name":"prop","documentation":"","type":"Prim2DPropInfo"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"checkPropertiesDirty","documentation":"Check if a given set of properties are dirty or not.\n@return true if at least one property is dirty, false if none of them are.","type":"(flags: number) => boolean","functionBody":[{"parameters":[{"name":"flags","documentation":"a ORed combination of Prim2DPropInfo.flagId values","type":"number"}],"returnType":"boolean","documentation":"Check if a given set of properties are dirty or not.\n@return true if at least one property is dirty, false if none of them are."}],"entryType":"function"},{"name":"clearPropertiesDirty","documentation":"Clear a given set of properties.\n@return the new set of property still marked as dirty","type":"(flags: number) => number","functionBody":[{"parameters":[{"name":"flags","documentation":"a ORed combination of Prim2DPropInfo.flagId values","type":"number"}],"returnType":"number","documentation":"Clear a given set of properties.\n@return the new set of property still marked as dirty"}],"entryType":"function"},{"name":"_resetPropertiesDirty","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateLevelBoundingInfo","documentation":"This method must be overridden by a given Primitive implementation to compute its boundingInfo","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"This method must be overridden by a given Primitive implementation to compute its boundingInfo"}],"entryType":"function"},{"name":"onPrimBecomesDirty","documentation":"Property method called when the Primitive becomes dirty","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Property method called when the Primitive becomes dirty"}],"entryType":"function"},{"name":"_hookProperty","documentation":"","type":"<T>(propId: number, piStore: (pi: Prim2DPropInfo) => void, typeLevelCompare: boolean, dirtyBoundi...","functionBody":[{"parameters":[{"name":"propId","documentation":"","type":"number"},{"name":"piStore","documentation":"","type":"(pi: Prim2DPropInfo) => void"},{"name":"typeLevelCompare","documentation":"","type":"boolean"},{"name":"dirtyBoundingInfo","documentation":"","type":"boolean"},{"name":"dirtyParentBoundingBox","documentation":"","type":"boolean"},{"name":"kind","documentation":"","type":"number"}],"returnType":"(target: Object, propName: string | symbol, descriptor: TypedPropertyDescriptor<T>) => void","documentation":""}],"entryType":"function"},{"name":"addExternalData","documentation":"Add an externally attached data from its key.\nThis method call will fail and return false, if such key already exists.\nIf you don't care and just want to get the data no matter what, use the more convenient getOrAddExternalDataWithFactory() method.\n@return true if no such key were already present and the data was added successfully, false otherwise","type":"<T>(key: string, data: T) => boolean","functionBody":[{"parameters":[{"name":"key","documentation":"the unique key that identifies the data","type":"string"},{"name":"data","documentation":"the data object to associate to the key for this Engine instance","type":"T"}],"returnType":"boolean","documentation":"Add an externally attached data from its key.\nThis method call will fail and return false, if such key already exists.\nIf you don't care and just want to get the data no matter what, use the more convenient getOrAddExternalDataWithFactory() method.\n@return true if no such key were already present and the data was added successfully, false otherwise"}],"entryType":"function"},{"name":"getExternalData","documentation":"Get an externally attached data from its key\n@return the associated data, if present (can be null), or undefined if not present","type":"<T>(key: string) => T","functionBody":[{"parameters":[{"name":"key","documentation":"the unique key that identifies the data","type":"string"}],"returnType":"T","documentation":"Get an externally attached data from its key\n@return the associated data, if present (can be null), or undefined if not present"}],"entryType":"function"},{"name":"getOrAddExternalDataWithFactory","documentation":"Get an externally attached data from its key, create it using a factory if it's not already present\n@return the associated data, can be null if the factory returned null.","type":"<T>(key: string, factory: (k: string) => T) => T","functionBody":[{"parameters":[{"name":"key","documentation":"the unique key that identifies the data","type":"string"},{"name":"factory","documentation":"the factory that will be called to create the instance if and only if it doesn't exists","type":"(k: string) => T"}],"returnType":"T","documentation":"Get an externally attached data from its key, create it using a factory if it's not already present\n@return the associated data, can be null if the factory returned null."}],"entryType":"function"},{"name":"removeExternalData","documentation":"Remove an externally attached data from the Engine instance\n@return true if the data was successfully removed, false if it doesn't exist","type":"(key: any) => boolean","functionBody":[{"parameters":[{"name":"key","documentation":"the unique key that identifies the data","type":"any"}],"returnType":"boolean","documentation":"Remove an externally attached data from the Engine instance\n@return true if the data was successfully removed, false if it doesn't exist"}],"entryType":"function"},{"name":"_isFlagSet","documentation":"Check if a given flag is set\n@return true if set, false otherwise","type":"(flag: number) => boolean","functionBody":[{"parameters":[{"name":"flag","documentation":"the flag value","type":"number"}],"returnType":"boolean","documentation":"Check if a given flag is set\n@return true if set, false otherwise"}],"entryType":"function"},{"name":"_areAllFlagsSet","documentation":"Check if all given flags are set\n@return true if all the flags are set, false otherwise","type":"(flags: number) => boolean","functionBody":[{"parameters":[{"name":"flags","documentation":"the flags ORed","type":"number"}],"returnType":"boolean","documentation":"Check if all given flags are set\n@return true if all the flags are set, false otherwise"}],"entryType":"function"},{"name":"_areSomeFlagsSet","documentation":"Check if at least one flag of the given flags is set\n@return true if at least one flag is set, false otherwise","type":"(flags: number) => boolean","functionBody":[{"parameters":[{"name":"flags","documentation":"the flags ORed","type":"number"}],"returnType":"boolean","documentation":"Check if at least one flag of the given flags is set\n@return true if at least one flag is set, false otherwise"}],"entryType":"function"},{"name":"_clearFlags","documentation":"Clear the given flags","type":"(flags: number) => void","functionBody":[{"parameters":[{"name":"flags","documentation":"the flags to clear","type":"number"}],"returnType":"void","documentation":"Clear the given flags"}],"entryType":"function"},{"name":"_setFlags","documentation":"Set the given flags to true state\n@return the flags state before this call","type":"(flags: number) => number","functionBody":[{"parameters":[{"name":"flags","documentation":"the flags ORed to set","type":"number"}],"returnType":"number","documentation":"Set the given flags to true state\n@return the flags state before this call"}],"entryType":"function"},{"name":"_changeFlags","documentation":"Change the state of the given flags","type":"(flags: number, state: boolean) => void","functionBody":[{"parameters":[{"name":"flags","documentation":"the flags ORed to change","type":"number"},{"name":"state","documentation":"true to set them, false to clear them","type":"boolean"}],"returnType":"void","documentation":"Change the state of the given flags"}],"entryType":"function"}],"properties":[{"name":"propertyChanged","documentation":"An observable that is triggered when a property (using of the XXXXLevelProperty decorator) has its value changing.\nYou can add an observer that will be triggered only for a given set of Properties using the Mask feature of the Observable and the corresponding Prim2DPropInfo.flagid value (e.g. Prim2DBase.positionProperty.flagid|Prim2DBase.rotationProperty.flagid to be notified only about position or rotation change)","type":"Observable<PropertyChangedInfo>","entryType":"property"},{"name":"isDisposed","documentation":"Check if the object is disposed or not.\n@returns true if the object is dispose, false otherwise.","type":"boolean","entryType":"property"},{"name":"animations","documentation":"Animation array, more info: http://doc.babylonjs.com/tutorials/Animations","type":"Animation[]","entryType":"property"},{"name":"modelKey","documentation":"Property giving the Model Key associated to the property.\nThis value is constructed from the type of the primitive and all the name/value of its properties declared with the modelLevelProperty decorator\n@returns the model key string.","type":"string","entryType":"property"},{"name":"isDirty","documentation":"States if the Primitive is dirty and should be rendered again next time.\n@returns true is dirty, false otherwise","type":"boolean","entryType":"property"},{"name":"propDic","documentation":"Access the dictionary of properties metadata. Only properties decorated with XXXXLevelProperty are concerned\n@returns the dictionary, the key is the property name as declared in Javascript, the value is the metadata object","type":"any","entryType":"property"},{"name":"propChangedInfo","documentation":"","type":"any","entryType":"property"},{"name":"levelBoundingInfo","documentation":"Retrieve the boundingInfo for this Primitive, computed based on the primitive itself and NOT its children","type":"BoundingInfo2D","entryType":"property"},{"name":"flagIsDisposed","documentation":"","type":"number","entryType":"property"},{"name":"flagLevelBoundingInfoDirty","documentation":"","type":"number","entryType":"property"},{"name":"flagModelDirty","documentation":"","type":"number","entryType":"property"},{"name":"flagLayoutDirty","documentation":"","type":"number","entryType":"property"},{"name":"flagLevelVisible","documentation":"","type":"number","entryType":"property"},{"name":"flagBoundingInfoDirty","documentation":"","type":"number","entryType":"property"},{"name":"flagIsPickable","documentation":"","type":"number","entryType":"property"},{"name":"flagIsVisible","documentation":"","type":"number","entryType":"property"},{"name":"flagVisibilityChanged","documentation":"","type":"number","entryType":"property"},{"name":"flagPositioningDirty","documentation":"","type":"number","entryType":"property"},{"name":"flagTrackedGroup","documentation":"","type":"number","entryType":"property"},{"name":"flagWorldCacheChanged","documentation":"","type":"number","entryType":"property"},{"name":"flagChildrenFlatZOrder","documentation":"","type":"number","entryType":"property"},{"name":"flagZOrderDirty","documentation":"","type":"number","entryType":"property"},{"name":"flagActualOpacityDirty","documentation":"","type":"number","entryType":"property"},{"name":"flagPrimInDirtyList","documentation":"","type":"number","entryType":"property"},{"name":"flagIsContainer","documentation":"","type":"number","entryType":"property"},{"name":"flagNeedRefresh","documentation":"","type":"number","entryType":"property"},{"name":"flagActualScaleDirty","documentation":"","type":"number","entryType":"property"},{"name":"flagDontInheritParentScale","documentation":"","type":"number","entryType":"property"},{"name":"flagGlobalTransformDirty","documentation":"","type":"number","entryType":"property"},{"name":"flagLayoutBoundingInfoDirty","documentation":"","type":"number","entryType":"property"},{"name":"_flags","documentation":"","type":"any","entryType":"property"},{"name":"_externalData","documentation":"","type":"any","entryType":"property"},{"name":"_modelKey","documentation":"","type":"any","entryType":"property"},{"name":"_propInfo","documentation":"","type":"any","entryType":"property"},{"name":"_levelBoundingInfo","documentation":"","type":"BoundingInfo2D","entryType":"property"},{"name":"_boundingInfo","documentation":"","type":"BoundingInfo2D","entryType":"property"},{"name":"_layoutBoundingInfo","documentation":"","type":"BoundingInfo2D","entryType":"property"},{"name":"_instanceDirtyFlags","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.IPropertyChanged"]},{"name":"Sprite2DRenderCache","documentation":"","type":"typeof Sprite2DRenderCache","constructors":[{"parameters":[{"name":"engine","documentation":"","type":"Engine"},{"name":"modelKey","documentation":"","type":"string"}],"returnType":"Sprite2DRenderCache","documentation":""}],"entryType":"class","functions":[{"name":"render","documentation":"","type":"(instanceInfo: GroupInstanceInfo, context: Render2DContext) => boolean","functionBody":[{"parameters":[{"name":"instanceInfo","documentation":"","type":"GroupInstanceInfo"},{"name":"context","documentation":"","type":"Render2DContext"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"effectsReady","documentation":"","type":"boolean","entryType":"property"},{"name":"vb","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"ib","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"instancingAttributes","documentation":"","type":"InstancingAttributeInfo[]","entryType":"property"},{"name":"texture","documentation":"","type":"Texture","entryType":"property"},{"name":"effect","documentation":"","type":"Effect","entryType":"property"},{"name":"effectInstanced","documentation":"","type":"Effect","entryType":"property"}],"heritageClauses":["BABYLON.ModelRenderCache"]},{"name":"Sprite2DInstanceData","documentation":"","type":"typeof Sprite2DInstanceData","constructors":[{"parameters":[{"name":"partId","documentation":"","type":"number"}],"returnType":"Sprite2DInstanceData","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"topLeftUV","documentation":"","type":"Vector2","entryType":"property"},{"name":"sizeUV","documentation":"","type":"Vector2","entryType":"property"},{"name":"scaleFactor","documentation":"","type":"Vector2","entryType":"property"},{"name":"textureSize","documentation":"","type":"Vector2","entryType":"property"},{"name":"properties","documentation":"","type":"Vector3","entryType":"property"}],"heritageClauses":["BABYLON.InstanceDataBase"]},{"name":"Sprite2D","documentation":"","type":"typeof Sprite2D","constructors":[{"parameters":[{"name":"texture","documentation":"the texture that stores the sprite to render","type":"Texture"},{"name":"settings","documentation":"a combination of settings, possible ones are\n- parent: the parent primitive/canvas, must be specified if the primitive is not constructed as a child of another one (i.e. as part of the children array setting)\n- children: an array of direct children\n- id a text identifier, for information purpose\n- position: the X & Y positions relative to its parent. Alternatively the x and y properties can be set. Default is [0;0]\n- rotation: the initial rotation (in radian) of the primitive. default is 0\n- scale: the initial scale of the primitive. default is 1. You can alternatively use scaleX &| scaleY to apply non uniform scale\n- dontInheritParentScale: if set the parent's scale won't be taken into consideration to compute the actualScale property\n- opacity: set the overall opacity of the primitive, 1 to be opaque (default), less than 1 to be transparent.\n- zOrder: override the zOrder with the specified value\n- origin: define the normalized origin point location, default [0.5;0.5]\n- spriteSize: the size of the sprite (in pixels), if null the size of the given texture will be used, default is null.\n- spriteLocation: the location (in pixels) in the texture of the top/left corner of the Sprite to display, default is null (0,0)\n- spriteScaleFactor: say you want to display a sprite twice as big as its bitmap which is 64,64, you set the spriteSize to 128,128 and have to set the spriteScaleFactory to 0.5,0.5 in order to address only the 64,64 pixels of the bitmaps. Default is 1,1.\n- invertY: if true the texture Y will be inverted, default is false.\n- alignToPixel: if true the sprite's texels will be aligned to the rendering viewport pixels, ensuring the best rendering quality but slow animations won't be done as smooth as if you set false. If false a texel could lies between two pixels, being blended by the texture sampling mode you choose, the rendering result won't be as good, but very slow animation will be overall better looking. Default is true: content will be aligned.\n- isVisible: true if the sprite must be visible, false for hidden. Default is true.\n- isPickable: if true the Primitive can be used with interaction mode and will issue Pointer Event. If false it will be ignored for interaction/intersection test. Default value is true.\n- isContainer: if true the Primitive acts as a container for interaction, if the primitive is not pickable or doesn't intersection, no further test will be perform on its children. If set to false, children will always be considered for intersection/interaction. Default value is true.\n- childrenFlatZOrder: if true all the children (direct and indirect) will share the same Z-Order. Use this when there's a lot of children which don't overlap. The drawing order IS NOT GUARANTED!\n- marginTop: top margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginLeft: left margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginRight: right margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginBottom: bottom margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- margin: top, left, right and bottom margin formatted as a single string (see PrimitiveThickness.fromString)\n- marginHAlignment: one value of the PrimitiveAlignment type's static properties\n- marginVAlignment: one value of the PrimitiveAlignment type's static properties\n- marginAlignment: a string defining the alignment, see PrimitiveAlignment.fromString\n- paddingTop: top padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingLeft: left padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingRight: right padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingBottom: bottom padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- padding: top, left, right and bottom padding formatted as a single string (see PrimitiveThickness.fromString)","type":"{ parent?: Prim2DBase; children?: Prim2DBase[]; id?: string; position?: Vector2; x?: number; y?: ..."}],"returnType":"Sprite2D","documentation":"Create an 2D Sprite primitive"}],"entryType":"class","functions":[{"name":"scaleToSize","documentation":"Sets the scale of the sprite using a BABYLON.Size(w,h).\nKeeps proportion by taking the maximum of the two scale for x and y.","type":"(size: Size) => void","functionBody":[{"parameters":[{"name":"size","documentation":"Size(width,height)","type":"Size"}],"returnType":"void","documentation":"Sets the scale of the sprite using a BABYLON.Size(w,h).\nKeeps proportion by taking the maximum of the two scale for x and y."}],"entryType":"function"},{"name":"updateLevelBoundingInfo","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getAnimatables","documentation":"Get the animatable array (see http://doc.babylonjs.com/tutorials/Animations)","type":"() => IAnimatable[]","functionBody":[{"parameters":[],"returnType":"IAnimatable[]","documentation":"Get the animatable array (see http://doc.babylonjs.com/tutorials/Animations)"}],"entryType":"function"},{"name":"levelIntersect","documentation":"","type":"(intersectInfo: IntersectInfo2D) => boolean","functionBody":[{"parameters":[{"name":"intersectInfo","documentation":"","type":"IntersectInfo2D"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_createCachedCanvasSprite","documentation":"","type":"(owner: Canvas2D, texture: MapTexture, size: Size, pos: Vector2) => Sprite2D","functionBody":[{"parameters":[{"name":"owner","documentation":"","type":"Canvas2D"},{"name":"texture","documentation":"","type":"MapTexture"},{"name":"size","documentation":"","type":"Size"},{"name":"pos","documentation":"","type":"Vector2"}],"returnType":"Sprite2D","documentation":""}],"entryType":"function"},{"name":"createModelRenderCache","documentation":"","type":"(modelKey: string) => ModelRenderCache","functionBody":[{"parameters":[{"name":"modelKey","documentation":"","type":"string"}],"returnType":"ModelRenderCache","documentation":""}],"entryType":"function"},{"name":"setupModelRenderCache","documentation":"","type":"(modelRenderCache: ModelRenderCache) => Sprite2DRenderCache","functionBody":[{"parameters":[{"name":"modelRenderCache","documentation":"","type":"ModelRenderCache"}],"returnType":"Sprite2DRenderCache","documentation":""}],"entryType":"function"},{"name":"createInstanceDataParts","documentation":"","type":"() => InstanceDataBase[]","functionBody":[{"parameters":[],"returnType":"InstanceDataBase[]","documentation":""}],"entryType":"function"},{"name":"beforeRefreshForLayoutConstruction","documentation":"","type":"(part: InstanceDataBase) => any","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"afterRefreshForLayoutConstruction","documentation":"","type":"(part: InstanceDataBase, obj: any) => void","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"},{"name":"obj","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"refreshInstanceDataPart","documentation":"","type":"(part: InstanceDataBase) => boolean","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_mustUpdateInstance","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_useTextureAlpha","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_shouldUseAlphaFromTexture","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"SPRITE2D_MAINPARTID","documentation":"","type":"number","entryType":"property"},{"name":"textureProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"useAlphaFromTextureProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"actualSizeProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"spriteLocationProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"spriteFrameProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"invertYProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"spriteScaleFactorProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"texture","documentation":"","type":"Texture","entryType":"property"},{"name":"useAlphaFromTexture","documentation":"","type":"boolean","entryType":"property"},{"name":"actualSize","documentation":"","type":"Size","entryType":"property"},{"name":"spriteLocation","documentation":"","type":"Vector2","entryType":"property"},{"name":"spriteFrame","documentation":"","type":"number","entryType":"property"},{"name":"invertY","documentation":"","type":"boolean","entryType":"property"},{"name":"spriteScaleFactor","documentation":"","type":"Vector2","entryType":"property"},{"name":"alignToPixel","documentation":"Get/set if the sprite rendering should be aligned to the target rendering device pixel or not","type":"boolean","entryType":"property"},{"name":"_prop","documentation":"","type":"any","entryType":"property"},{"name":"layoutConstructMode","documentation":"","type":"any","entryType":"property"},{"name":"_texture","documentation":"","type":"any","entryType":"property"},{"name":"_oldTextureHasAlpha","documentation":"","type":"any","entryType":"property"},{"name":"_useAlphaFromTexture","documentation":"","type":"any","entryType":"property"},{"name":"_location","documentation":"","type":"any","entryType":"property"},{"name":"_spriteScaleFactor","documentation":"","type":"any","entryType":"property"},{"name":"_spriteFrame","documentation":"","type":"any","entryType":"property"},{"name":"_invertY","documentation":"","type":"any","entryType":"property"},{"name":"_alignToPixel","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.RenderablePrim2D"]},{"name":"Text2DRenderCache","documentation":"","type":"typeof Text2DRenderCache","constructors":[{"parameters":[{"name":"engine","documentation":"","type":"Engine"},{"name":"modelKey","documentation":"","type":"string"}],"returnType":"Text2DRenderCache","documentation":""}],"entryType":"class","functions":[{"name":"render","documentation":"","type":"(instanceInfo: GroupInstanceInfo, context: Render2DContext) => boolean","functionBody":[{"parameters":[{"name":"instanceInfo","documentation":"","type":"GroupInstanceInfo"},{"name":"context","documentation":"","type":"Render2DContext"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"effectsReady","documentation":"","type":"boolean","entryType":"property"},{"name":"vb","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"ib","documentation":"","type":"WebGLBuffer","entryType":"property"},{"name":"instancingAttributes","documentation":"","type":"InstancingAttributeInfo[]","entryType":"property"},{"name":"fontTexture","documentation":"","type":"FontTexture","entryType":"property"},{"name":"effect","documentation":"","type":"Effect","entryType":"property"},{"name":"effectInstanced","documentation":"","type":"Effect","entryType":"property"}],"heritageClauses":["BABYLON.ModelRenderCache"]},{"name":"Text2DInstanceData","documentation":"","type":"typeof Text2DInstanceData","constructors":[{"parameters":[{"name":"partId","documentation":"","type":"number"},{"name":"dataElementCount","documentation":"","type":"number"}],"returnType":"Text2DInstanceData","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"topLeftUV","documentation":"","type":"Vector2","entryType":"property"},{"name":"sizeUV","documentation":"","type":"Vector2","entryType":"property"},{"name":"textureSize","documentation":"","type":"Vector2","entryType":"property"},{"name":"color","documentation":"","type":"Color4","entryType":"property"},{"name":"superSampleFactor","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.InstanceDataBase"]},{"name":"Text2D","documentation":"","type":"typeof Text2D","constructors":[{"parameters":[{"name":"text","documentation":"the text to display","type":"string"},{"name":"settings","documentation":"a combination of settings, possible ones are\n- parent: the parent primitive/canvas, must be specified if the primitive is not constructed as a child of another one (i.e. as part of the children array setting)\n- children: an array of direct children\n- id a text identifier, for information purpose\n- position: the X & Y positions relative to its parent. Alternatively the x and y properties can be set. Default is [0;0]\n- rotation: the initial rotation (in radian) of the primitive. default is 0\n- scale: the initial scale of the primitive. default is 1. You can alternatively use scaleX &| scaleY to apply non uniform scale\n- dontInheritParentScale: if set the parent's scale won't be taken into consideration to compute the actualScale property\n- opacity: set the overall opacity of the primitive, 1 to be opaque (default), less than 1 to be transparent.\n- zOrder: override the zOrder with the specified value\n- origin: define the normalized origin point location, default [0.5;0.5]\n- fontName: the name/size/style of the font to use, following the CSS notation. Default is \"12pt Arial\".\n- fontSuperSample: if true the text will be rendered with a superSampled font (the font is twice the given size). Use this settings if the text lies in world space or if it's scaled in.\n- defaultFontColor: the color by default to apply on each letter of the text to display, default is plain white.\n- areaSize: the size of the area in which to display the text, default is auto-fit from text content.\n- tabulationSize: number of space character to insert when a tabulation is encountered, default is 4\n- isVisible: true if the text must be visible, false for hidden. Default is true.\n- isPickable: if true the Primitive can be used with interaction mode and will issue Pointer Event. If false it will be ignored for interaction/intersection test. Default value is true.\n- isContainer: if true the Primitive acts as a container for interaction, if the primitive is not pickable or doesn't intersection, no further test will be perform on its children. If set to false, children will always be considered for intersection/interaction. Default value is true.\n- childrenFlatZOrder: if true all the children (direct and indirect) will share the same Z-Order. Use this when there's a lot of children which don't overlap. The drawing order IS NOT GUARANTED!\n- marginTop: top margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginLeft: left margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginRight: right margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- marginBottom: bottom margin, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- margin: top, left, right and bottom margin formatted as a single string (see PrimitiveThickness.fromString)\n- marginHAlignment: one value of the PrimitiveAlignment type's static properties\n- marginVAlignment: one value of the PrimitiveAlignment type's static properties\n- marginAlignment: a string defining the alignment, see PrimitiveAlignment.fromString\n- paddingTop: top padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingLeft: left padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingRight: right padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- paddingBottom: bottom padding, can be a number (will be pixels) or a string (see PrimitiveThickness.fromString)\n- padding: top, left, right and bottom padding formatted as a single string (see PrimitiveThickness.fromString)","type":"{ parent?: Prim2DBase; children?: Prim2DBase[]; id?: string; position?: Vector2; x?: number; y?: ..."}],"returnType":"Text2D","documentation":"Create a Text primitive"}],"entryType":"class","functions":[{"name":"dispose","documentation":"Dispose the primitive, remove it from its parent","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Dispose the primitive, remove it from its parent"}],"entryType":"function"},{"name":"updateLevelBoundingInfo","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"levelIntersect","documentation":"","type":"(intersectInfo: IntersectInfo2D) => boolean","functionBody":[{"parameters":[{"name":"intersectInfo","documentation":"","type":"IntersectInfo2D"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"createModelRenderCache","documentation":"","type":"(modelKey: string) => ModelRenderCache","functionBody":[{"parameters":[{"name":"modelKey","documentation":"","type":"string"}],"returnType":"ModelRenderCache","documentation":""}],"entryType":"function"},{"name":"setupModelRenderCache","documentation":"","type":"(modelRenderCache: ModelRenderCache) => Text2DRenderCache","functionBody":[{"parameters":[{"name":"modelRenderCache","documentation":"","type":"ModelRenderCache"}],"returnType":"Text2DRenderCache","documentation":""}],"entryType":"function"},{"name":"createInstanceDataParts","documentation":"","type":"() => InstanceDataBase[]","functionBody":[{"parameters":[],"returnType":"InstanceDataBase[]","documentation":""}],"entryType":"function"},{"name":"beforeRefreshForLayoutConstruction","documentation":"","type":"(part: InstanceDataBase) => any","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"afterRefreshForLayoutConstruction","documentation":"","type":"(part: InstanceDataBase, obj: any) => void","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"},{"name":"obj","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"refreshInstanceDataPart","documentation":"","type":"(part: InstanceDataBase) => boolean","functionBody":[{"parameters":[{"name":"part","documentation":"","type":"InstanceDataBase"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_updateCharCount","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_useTextureAlpha","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_shouldUseAlphaFromTexture","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"TEXT2D_MAINPARTID","documentation":"","type":"number","entryType":"property"},{"name":"fontProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"defaultFontColorProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"textProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"sizeProperty","documentation":"","type":"Prim2DPropInfo","entryType":"property"},{"name":"fontName","documentation":"","type":"string","entryType":"property"},{"name":"defaultFontColor","documentation":"","type":"Color4","entryType":"property"},{"name":"text","documentation":"","type":"string","entryType":"property"},{"name":"size","documentation":"","type":"Size","entryType":"property"},{"name":"actualSize","documentation":"Get the actual size of the Text2D primitive","type":"Size","entryType":"property"},{"name":"textSize","documentation":"Get the area that bounds the text associated to the primitive","type":"Size","entryType":"property"},{"name":"fontTexture","documentation":"","type":"FontTexture","entryType":"property"},{"name":"_fontTexture","documentation":"","type":"any","entryType":"property"},{"name":"_tabulationSize","documentation":"","type":"any","entryType":"property"},{"name":"_charCount","documentation":"","type":"any","entryType":"property"},{"name":"_fontName","documentation":"","type":"any","entryType":"property"},{"name":"_fontSuperSample","documentation":"","type":"any","entryType":"property"},{"name":"_defaultFontColor","documentation":"","type":"any","entryType":"property"},{"name":"_text","documentation":"","type":"any","entryType":"property"},{"name":"_textSize","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.RenderablePrim2D"]},{"name":"WorldSpaceCanvas2DNode","documentation":"This is the class that is used to display a World Space Canvas into a 3D scene","type":"typeof WorldSpaceCanvas2DNode","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"canvas","documentation":"","type":"Canvas2D"}],"returnType":"WorldSpaceCanvas2DNode","documentation":""}],"entryType":"class","functions":[{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_canvas","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Mesh"]},{"name":"BoundingBox","documentation":"","type":"typeof BoundingBox","constructors":[{"parameters":[{"name":"minimum","documentation":"","type":"Vector3"},{"name":"maximum","documentation":"","type":"Vector3"}],"returnType":"BoundingBox","documentation":""}],"entryType":"class","functions":[{"name":"getWorldMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"setWorldMatrix","documentation":"","type":"(matrix: Matrix) => BoundingBox","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"BoundingBox","documentation":""}],"entryType":"function"},{"name":"_update","documentation":"","type":"(world: Matrix) => void","functionBody":[{"parameters":[{"name":"world","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isInFrustum","documentation":"","type":"(frustumPlanes: Plane[]) => boolean","functionBody":[{"parameters":[{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"isCompletelyInFrustum","documentation":"","type":"(frustumPlanes: Plane[]) => boolean","functionBody":[{"parameters":[{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersectsPoint","documentation":"","type":"(point: Vector3) => boolean","functionBody":[{"parameters":[{"name":"point","documentation":"","type":"Vector3"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersectsSphere","documentation":"","type":"(sphere: BoundingSphere) => boolean","functionBody":[{"parameters":[{"name":"sphere","documentation":"","type":"BoundingSphere"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersectsMinMax","documentation":"","type":"(min: Vector3, max: Vector3) => boolean","functionBody":[{"parameters":[{"name":"min","documentation":"","type":"Vector3"},{"name":"max","documentation":"","type":"Vector3"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"Intersects","documentation":"","type":"(box0: BoundingBox, box1: BoundingBox) => boolean","functionBody":[{"parameters":[{"name":"box0","documentation":"","type":"BoundingBox"},{"name":"box1","documentation":"","type":"BoundingBox"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"IntersectsSphere","documentation":"","type":"(minPoint: Vector3, maxPoint: Vector3, sphereCenter: Vector3, sphereRadius: number) => boolean","functionBody":[{"parameters":[{"name":"minPoint","documentation":"","type":"Vector3"},{"name":"maxPoint","documentation":"","type":"Vector3"},{"name":"sphereCenter","documentation":"","type":"Vector3"},{"name":"sphereRadius","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"IsCompletelyInFrustum","documentation":"","type":"(boundingVectors: Vector3[], frustumPlanes: Plane[]) => boolean","functionBody":[{"parameters":[{"name":"boundingVectors","documentation":"","type":"Vector3[]"},{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"IsInFrustum","documentation":"","type":"(boundingVectors: Vector3[], frustumPlanes: Plane[]) => boolean","functionBody":[{"parameters":[{"name":"boundingVectors","documentation":"","type":"Vector3[]"},{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"minimum","documentation":"","type":"Vector3","entryType":"property"},{"name":"maximum","documentation":"","type":"Vector3","entryType":"property"},{"name":"vectors","documentation":"","type":"Vector3[]","entryType":"property"},{"name":"center","documentation":"","type":"Vector3","entryType":"property"},{"name":"extendSize","documentation":"","type":"Vector3","entryType":"property"},{"name":"directions","documentation":"","type":"Vector3[]","entryType":"property"},{"name":"vectorsWorld","documentation":"","type":"Vector3[]","entryType":"property"},{"name":"minimumWorld","documentation":"","type":"Vector3","entryType":"property"},{"name":"maximumWorld","documentation":"","type":"Vector3","entryType":"property"},{"name":"_worldMatrix","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.ICullable"]},{"name":"BoundingInfo","documentation":"","type":"typeof BoundingInfo","constructors":[{"parameters":[{"name":"minimum","documentation":"","type":"Vector3"},{"name":"maximum","documentation":"","type":"Vector3"}],"returnType":"BoundingInfo","documentation":""}],"entryType":"class","functions":[{"name":"update","documentation":"","type":"(world: Matrix) => void","functionBody":[{"parameters":[{"name":"world","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isInFrustum","documentation":"","type":"(frustumPlanes: Plane[]) => boolean","functionBody":[{"parameters":[{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"isCompletelyInFrustum","documentation":"","type":"(frustumPlanes: Plane[]) => boolean","functionBody":[{"parameters":[{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_checkCollision","documentation":"","type":"(collider: Collider) => boolean","functionBody":[{"parameters":[{"name":"collider","documentation":"","type":"Collider"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersectsPoint","documentation":"","type":"(point: Vector3) => boolean","functionBody":[{"parameters":[{"name":"point","documentation":"","type":"Vector3"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersects","documentation":"","type":"(boundingInfo: BoundingInfo, precise: boolean) => boolean","functionBody":[{"parameters":[{"name":"boundingInfo","documentation":"","type":"BoundingInfo"},{"name":"precise","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"minimum","documentation":"","type":"Vector3","entryType":"property"},{"name":"maximum","documentation":"","type":"Vector3","entryType":"property"},{"name":"boundingBox","documentation":"","type":"BoundingBox","entryType":"property"},{"name":"boundingSphere","documentation":"","type":"BoundingSphere","entryType":"property"},{"name":"_isLocked","documentation":"","type":"any","entryType":"property"},{"name":"isLocked","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.ICullable"]},{"name":"BoundingSphere","documentation":"","type":"typeof BoundingSphere","constructors":[{"parameters":[{"name":"minimum","documentation":"","type":"Vector3"},{"name":"maximum","documentation":"","type":"Vector3"}],"returnType":"BoundingSphere","documentation":""}],"entryType":"class","functions":[{"name":"_update","documentation":"","type":"(world: Matrix) => void","functionBody":[{"parameters":[{"name":"world","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isInFrustum","documentation":"","type":"(frustumPlanes: Plane[]) => boolean","functionBody":[{"parameters":[{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersectsPoint","documentation":"","type":"(point: Vector3) => boolean","functionBody":[{"parameters":[{"name":"point","documentation":"","type":"Vector3"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"Intersects","documentation":"","type":"(sphere0: BoundingSphere, sphere1: BoundingSphere) => boolean","functionBody":[{"parameters":[{"name":"sphere0","documentation":"","type":"BoundingSphere"},{"name":"sphere1","documentation":"","type":"BoundingSphere"}],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"minimum","documentation":"","type":"Vector3","entryType":"property"},{"name":"maximum","documentation":"","type":"Vector3","entryType":"property"},{"name":"center","documentation":"","type":"Vector3","entryType":"property"},{"name":"radius","documentation":"","type":"number","entryType":"property"},{"name":"centerWorld","documentation":"","type":"Vector3","entryType":"property"},{"name":"radiusWorld","documentation":"","type":"number","entryType":"property"},{"name":"_tempRadiusVector","documentation":"","type":"any","entryType":"property"}]},{"name":"Ray","documentation":"","type":"typeof Ray","constructors":[{"parameters":[{"name":"origin","documentation":"","type":"Vector3"},{"name":"direction","documentation":"","type":"Vector3"},{"name":"length","documentation":"","type":"number"}],"returnType":"Ray","documentation":""}],"entryType":"class","functions":[{"name":"intersectsBoxMinMax","documentation":"","type":"(minimum: Vector3, maximum: Vector3) => boolean","functionBody":[{"parameters":[{"name":"minimum","documentation":"","type":"Vector3"},{"name":"maximum","documentation":"","type":"Vector3"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersectsBox","documentation":"","type":"(box: BoundingBox) => boolean","functionBody":[{"parameters":[{"name":"box","documentation":"","type":"BoundingBox"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersectsSphere","documentation":"","type":"(sphere: BoundingSphere) => boolean","functionBody":[{"parameters":[{"name":"sphere","documentation":"","type":"BoundingSphere"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersectsTriangle","documentation":"","type":"(vertex0: Vector3, vertex1: Vector3, vertex2: Vector3) => IntersectionInfo","functionBody":[{"parameters":[{"name":"vertex0","documentation":"","type":"Vector3"},{"name":"vertex1","documentation":"","type":"Vector3"},{"name":"vertex2","documentation":"","type":"Vector3"}],"returnType":"IntersectionInfo","documentation":""}],"entryType":"function"},{"name":"intersectsPlane","documentation":"","type":"(plane: Plane) => number","functionBody":[{"parameters":[{"name":"plane","documentation":"","type":"Plane"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"intersectionSegment","documentation":"Intersection test between the ray and a given segment whithin a given tolerance (threshold)\n@return the distance from the ray origin to the intersection point if there's intersection, or -1 if there's no intersection","type":"(sega: Vector3, segb: Vector3, threshold: number) => number","functionBody":[{"parameters":[{"name":"sega","documentation":"the first point of the segment to test the intersection against","type":"Vector3"},{"name":"segb","documentation":"the second point of the segment to test the intersection against","type":"Vector3"},{"name":"threshold","documentation":"the tolerance margin, if the ray doesn't intersect the segment but is close to the given threshold, the intersection is successful","type":"number"}],"returnType":"number","documentation":"Intersection test between the ray and a given segment whithin a given tolerance (threshold)\n@return the distance from the ray origin to the intersection point if there's intersection, or -1 if there's no intersection"}],"entryType":"function"},{"name":"CreateNew","documentation":"","type":"(x: number, y: number, viewportWidth: number, viewportHeight: number, world: Matrix, view: Matrix...","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"viewportWidth","documentation":"","type":"number"},{"name":"viewportHeight","documentation":"","type":"number"},{"name":"world","documentation":"","type":"Matrix"},{"name":"view","documentation":"","type":"Matrix"},{"name":"projection","documentation":"","type":"Matrix"}],"returnType":"Ray","documentation":""}],"entryType":"function"},{"name":"CreateNewFromTo","documentation":"Function will create a new transformed ray starting from origin and ending at the end point. Ray's length will be set, and ray will be\ntransformed to the given world matrix.","type":"(origin: Vector3, end: Vector3, world?: Matrix) => Ray","functionBody":[{"parameters":[{"name":"origin","documentation":"The origin point","type":"Vector3"},{"name":"end","documentation":"The end point","type":"Vector3"},{"name":"world","documentation":"a matrix to transform the ray to. Default is the identity matrix.","type":"Matrix"}],"returnType":"Ray","documentation":"Function will create a new transformed ray starting from origin and ending at the end point. Ray's length will be set, and ray will be\ntransformed to the given world matrix."}],"entryType":"function"},{"name":"Transform","documentation":"","type":"(ray: Ray, matrix: Matrix) => Ray","functionBody":[{"parameters":[{"name":"ray","documentation":"","type":"Ray"},{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"Ray","documentation":""}],"entryType":"function"}],"properties":[{"name":"origin","documentation":"","type":"Vector3","entryType":"property"},{"name":"direction","documentation":"","type":"Vector3","entryType":"property"},{"name":"length","documentation":"","type":"number","entryType":"property"},{"name":"_edge1","documentation":"","type":"any","entryType":"property"},{"name":"_edge2","documentation":"","type":"any","entryType":"property"},{"name":"_pvec","documentation":"","type":"any","entryType":"property"},{"name":"_tvec","documentation":"","type":"any","entryType":"property"},{"name":"_qvec","documentation":"","type":"any","entryType":"property"},{"name":"smallnum","documentation":"","type":"any","entryType":"property"},{"name":"rayl","documentation":"","type":"any","entryType":"property"}]},{"name":"DebugLayer","documentation":"","type":"typeof DebugLayer","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"}],"returnType":"DebugLayer","documentation":""}],"entryType":"class","functions":[{"name":"_refreshMeshesTreeContent","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_renderSingleAxis","documentation":"","type":"(zero: any, unit: any, unitText: any, label: any, color: any) => any","functionBody":[{"parameters":[{"name":"zero","documentation":"","type":"any"},{"name":"unit","documentation":"","type":"any"},{"name":"unitText","documentation":"","type":"any"},{"name":"label","documentation":"","type":"any"},{"name":"color","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_renderAxis","documentation":"","type":"(projectedPosition: any, mesh: any, globalViewport: any) => any","functionBody":[{"parameters":[{"name":"projectedPosition","documentation":"","type":"any"},{"name":"mesh","documentation":"","type":"any"},{"name":"globalViewport","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_renderLabel","documentation":"","type":"(text: any, projectedPosition: any, labelOffset: any, onClick: any, getFillStyle: any) => any","functionBody":[{"parameters":[{"name":"text","documentation":"","type":"any"},{"name":"projectedPosition","documentation":"","type":"any"},{"name":"labelOffset","documentation":"","type":"any"},{"name":"onClick","documentation":"","type":"any"},{"name":"getFillStyle","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_isClickInsideRect","documentation":"","type":"(x: any, y: any, width: any, height: any) => any","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"any"},{"name":"y","documentation":"","type":"any"},{"name":"width","documentation":"","type":"any"},{"name":"height","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"isVisible","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"hide","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_clearSkeletonViewers","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"show","documentation":"","type":"(showUI?: boolean, camera?: Camera, rootElement?: HTMLElement) => void","functionBody":[{"parameters":[{"name":"showUI","documentation":"","type":"boolean"},{"name":"camera","documentation":"","type":"Camera"},{"name":"rootElement","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_clearLabels","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_generateheader","documentation":"","type":"(root: any, text: any) => any","functionBody":[{"parameters":[{"name":"root","documentation":"","type":"any"},{"name":"text","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_generateTexBox","documentation":"","type":"(root: any, title: any, color: any) => any","functionBody":[{"parameters":[{"name":"root","documentation":"","type":"any"},{"name":"title","documentation":"","type":"any"},{"name":"color","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_generateAdvancedCheckBox","documentation":"","type":"(root: any, leftTitle: any, rightTitle: any, initialState: any, task: any, tag?: any) => any","functionBody":[{"parameters":[{"name":"root","documentation":"","type":"any"},{"name":"leftTitle","documentation":"","type":"any"},{"name":"rightTitle","documentation":"","type":"any"},{"name":"initialState","documentation":"","type":"any"},{"name":"task","documentation":"","type":"any"},{"name":"tag","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_generateCheckBox","documentation":"","type":"(root: any, title: any, initialState: any, task: any, tag?: any) => any","functionBody":[{"parameters":[{"name":"root","documentation":"","type":"any"},{"name":"title","documentation":"","type":"any"},{"name":"initialState","documentation":"","type":"any"},{"name":"task","documentation":"","type":"any"},{"name":"tag","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_generateButton","documentation":"","type":"(root: any, title: any, task: any, tag?: any) => any","functionBody":[{"parameters":[{"name":"root","documentation":"","type":"any"},{"name":"title","documentation":"","type":"any"},{"name":"task","documentation":"","type":"any"},{"name":"tag","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_generateRadio","documentation":"","type":"(root: any, title: any, name: any, initialState: any, task: any, tag?: any) => any","functionBody":[{"parameters":[{"name":"root","documentation":"","type":"any"},{"name":"title","documentation":"","type":"any"},{"name":"name","documentation":"","type":"any"},{"name":"initialState","documentation":"","type":"any"},{"name":"task","documentation":"","type":"any"},{"name":"tag","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_generateDOMelements","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_displayStats","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_camera","documentation":"","type":"any","entryType":"property"},{"name":"_transformationMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_enabled","documentation":"","type":"any","entryType":"property"},{"name":"_labelsEnabled","documentation":"","type":"any","entryType":"property"},{"name":"_displayStatistics","documentation":"","type":"any","entryType":"property"},{"name":"_displayTree","documentation":"","type":"any","entryType":"property"},{"name":"_displayLogs","documentation":"","type":"any","entryType":"property"},{"name":"_globalDiv","documentation":"","type":"any","entryType":"property"},{"name":"_statsDiv","documentation":"","type":"any","entryType":"property"},{"name":"_statsSubsetDiv","documentation":"","type":"any","entryType":"property"},{"name":"_optionsDiv","documentation":"","type":"any","entryType":"property"},{"name":"_optionsSubsetDiv","documentation":"","type":"any","entryType":"property"},{"name":"_logDiv","documentation":"","type":"any","entryType":"property"},{"name":"_logSubsetDiv","documentation":"","type":"any","entryType":"property"},{"name":"_treeDiv","documentation":"","type":"any","entryType":"property"},{"name":"_treeSubsetDiv","documentation":"","type":"any","entryType":"property"},{"name":"_drawingCanvas","documentation":"","type":"any","entryType":"property"},{"name":"_drawingContext","documentation":"","type":"any","entryType":"property"},{"name":"_rootElement","documentation":"","type":"any","entryType":"property"},{"name":"_skeletonViewers","documentation":"","type":"any","entryType":"property"},{"name":"_syncPositions","documentation":"","type":"() => void","entryType":"property"},{"name":"_syncData","documentation":"","type":"any","entryType":"property"},{"name":"_syncUI","documentation":"","type":"any","entryType":"property"},{"name":"_onCanvasClick","documentation":"","type":"any","entryType":"property"},{"name":"_clickPosition","documentation":"","type":"any","entryType":"property"},{"name":"_ratio","documentation":"","type":"any","entryType":"property"},{"name":"_identityMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_showUI","documentation":"","type":"any","entryType":"property"},{"name":"_needToRefreshMeshesTree","documentation":"","type":"any","entryType":"property"},{"name":"shouldDisplayLabel","documentation":"","type":"(node: Node) => boolean","entryType":"property"},{"name":"shouldDisplayAxis","documentation":"","type":"(mesh: Mesh) => boolean","entryType":"property"},{"name":"axisRatio","documentation":"","type":"number","entryType":"property"},{"name":"accentColor","documentation":"","type":"string","entryType":"property"},{"name":"customStatsFunction","documentation":"","type":"() => string","entryType":"property"}]},{"name":"HighlightLayer","documentation":"The highlight layer Helps adding a glow effect around a mesh.\n\nOnce instantiated in a scene, simply use the pushMesh or removeMesh method to add or remove\nglowy meshes to your scene.\n\n!!! THIS REQUIRES AN ACTIVE STENCIL BUFFER ON THE CANVAS !!!","type":"typeof HighlightLayer","constructors":[{"parameters":[{"name":"name","documentation":"The name of the layer","type":"string"},{"name":"scene","documentation":"The scene to use the layer in","type":"Scene"},{"name":"options","documentation":"Sets of none mandatory options to use with the layer (see IHighlightLayerOptions for more information)","type":"IHighlightLayerOptions"}],"returnType":"HighlightLayer","documentation":"Instantiates a new highlight Layer and references it to the scene.."}],"entryType":"class","functions":[{"name":"createTextureAndPostProcesses","documentation":"Creates the render target textures and post processes used in the highlight layer.","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":"Creates the render target textures and post processes used in the highlight layer."}],"entryType":"function"},{"name":"isReady","documentation":"Checks for the readiness of the element composing the layer.\n@return true if ready otherwise, false","type":"(subMesh: any, useInstances: any, emissiveTexture: any) => any","functionBody":[{"parameters":[{"name":"subMesh","documentation":"the mesh to check for","type":"any"},{"name":"useInstances","documentation":"specify wether or not to use instances to render the mesh","type":"any"},{"name":"emissiveTexture","documentation":"the associated emissive texture used to generate the glow","type":"any"}],"returnType":"any","documentation":"Checks for the readiness of the element composing the layer.\n@return true if ready otherwise, false"}],"entryType":"function"},{"name":"render","documentation":"Renders the glowing part of the scene by blending the blurred glowing meshes on top of the rendered scene.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Renders the glowing part of the scene by blending the blurred glowing meshes on top of the rendered scene."}],"entryType":"function"},{"name":"addMesh","documentation":"Add a mesh in the highlight layer in order to make it glow with the chosen color.","type":"(mesh: Mesh, color: Color3, glowEmissiveOnly?: boolean) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"The mesh to highlight","type":"Mesh"},{"name":"color","documentation":"The color of the highlight","type":"Color3"},{"name":"glowEmissiveOnly","documentation":"Extract the glow from the emissive texture","type":"boolean"}],"returnType":"void","documentation":"Add a mesh in the highlight layer in order to make it glow with the chosen color."}],"entryType":"function"},{"name":"removeMesh","documentation":"Remove a mesh from the highlight layer in order to make it stop glowing.","type":"(mesh: Mesh) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"The mesh to highlight","type":"Mesh"}],"returnType":"void","documentation":"Remove a mesh from the highlight layer in order to make it stop glowing."}],"entryType":"function"},{"name":"shouldRender","documentation":"Returns true if the layer contains information to display, otherwise false.","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Returns true if the layer contains information to display, otherwise false."}],"entryType":"function"},{"name":"setMainTextureSize","documentation":"Sets the main texture desired size which is the closest power of two\nof the engine canvas size.","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":"Sets the main texture desired size which is the closest power of two\nof the engine canvas size."}],"entryType":"function"},{"name":"defaultStencilReference","documentation":"Force the stencil to the normal expected value for none glowing parts","type":"(mesh: any) => any","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"any"}],"returnType":"any","documentation":"Force the stencil to the normal expected value for none glowing parts"}],"entryType":"function"},{"name":"disposeTextureAndPostProcesses","documentation":"Dispose only the render target textures and post process.","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":"Dispose only the render target textures and post process."}],"entryType":"function"},{"name":"dispose","documentation":"Dispose the highlight layer and free resources.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Dispose the highlight layer and free resources."}],"entryType":"function"}],"properties":[{"name":"neutralColor","documentation":"The neutral color used during the preparation of the glow effect.\nThis is black by default as the blend operation is a blend operation.","type":"Color4","entryType":"property"},{"name":"glowingMeshStencilReference","documentation":"Stencil value used for glowing meshes.","type":"number","entryType":"property"},{"name":"normalMeshStencilReference","documentation":"Stencil value used for the other meshes in the scene.","type":"number","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_engine","documentation":"","type":"any","entryType":"property"},{"name":"_options","documentation":"","type":"any","entryType":"property"},{"name":"_vertexBuffers","documentation":"","type":"any","entryType":"property"},{"name":"_indexBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_downSamplePostprocess","documentation":"","type":"any","entryType":"property"},{"name":"_horizontalBlurPostprocess","documentation":"","type":"any","entryType":"property"},{"name":"_verticalBlurPostprocess","documentation":"","type":"any","entryType":"property"},{"name":"_cachedDefines","documentation":"","type":"any","entryType":"property"},{"name":"_glowMapGenerationEffect","documentation":"","type":"any","entryType":"property"},{"name":"_glowMapMergeEffect","documentation":"","type":"any","entryType":"property"},{"name":"_blurTexture","documentation":"","type":"any","entryType":"property"},{"name":"_mainTexture","documentation":"","type":"any","entryType":"property"},{"name":"_mainTextureDesiredSize","documentation":"","type":"any","entryType":"property"},{"name":"_meshes","documentation":"","type":"any","entryType":"property"},{"name":"_maxSize","documentation":"","type":"any","entryType":"property"},{"name":"_shouldRender","documentation":"","type":"any","entryType":"property"},{"name":"_instanceGlowingMeshStencilReference","documentation":"","type":"any","entryType":"property"},{"name":"innerGlow","documentation":"Specifies whether or not the inner glow is ACTIVE in the layer.","type":"boolean","entryType":"property"},{"name":"outerGlow","documentation":"Specifies whether or not the outer glow is ACTIVE in the layer.","type":"boolean","entryType":"property"},{"name":"blurHorizontalSize","documentation":"Gets the horizontal size of the blur.\nSpecifies the horizontal size of the blur.","type":"number","entryType":"property"},{"name":"blurVerticalSize","documentation":"Gets the vertical size of the blur.\nSpecifies the vertical size of the blur.","type":"number","entryType":"property"},{"name":"onDisposeObservable","documentation":"An event triggered when the highlight layer has been disposed.\n@type {BABYLON.Observable}","type":"Observable<HighlightLayer>","entryType":"property"},{"name":"onBeforeRenderMainTextureObservable","documentation":"An event triggered when the highlight layer is about rendering the main texture with the glowy parts.\n@type {BABYLON.Observable}","type":"Observable<HighlightLayer>","entryType":"property"},{"name":"onBeforeBlurObservable","documentation":"An event triggered when the highlight layer is being blurred.\n@type {BABYLON.Observable}","type":"Observable<HighlightLayer>","entryType":"property"},{"name":"onAfterBlurObservable","documentation":"An event triggered when the highlight layer has been blurred.\n@type {BABYLON.Observable}","type":"Observable<HighlightLayer>","entryType":"property"},{"name":"onBeforeComposeObservable","documentation":"An event triggered when the glowing blurred texture is being merged in the scene.\n@type {BABYLON.Observable}","type":"Observable<HighlightLayer>","entryType":"property"},{"name":"onAfterComposeObservable","documentation":"An event triggered when the glowing blurred texture has been merged in the scene.\n@type {BABYLON.Observable}","type":"Observable<HighlightLayer>","entryType":"property"},{"name":"onSizeChangedObservable","documentation":"An event triggered when the highlight layer changes its size.\n@type {BABYLON.Observable}","type":"Observable<HighlightLayer>","entryType":"property"}]},{"name":"Layer","documentation":"","type":"typeof Layer","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"imgUrl","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"isBackground","documentation":"","type":"boolean"},{"name":"color","documentation":"","type":"Color4"}],"returnType":"Layer","documentation":""}],"entryType":"class","functions":[{"name":"render","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"texture","documentation":"","type":"Texture","entryType":"property"},{"name":"isBackground","documentation":"","type":"boolean","entryType":"property"},{"name":"color","documentation":"","type":"Color4","entryType":"property"},{"name":"scale","documentation":"","type":"Vector2","entryType":"property"},{"name":"offset","documentation":"","type":"Vector2","entryType":"property"},{"name":"alphaBlendingMode","documentation":"","type":"number","entryType":"property"},{"name":"alphaTest","documentation":"","type":"boolean","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_vertexBuffers","documentation":"","type":"any","entryType":"property"},{"name":"_indexBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_effect","documentation":"","type":"any","entryType":"property"},{"name":"_alphaTestEffect","documentation":"","type":"any","entryType":"property"},{"name":"onDisposeObservable","documentation":"An event triggered when the layer is disposed.\n@type {BABYLON.Observable}","type":"Observable<Layer>","entryType":"property"},{"name":"_onDisposeObserver","documentation":"","type":"any","entryType":"property"},{"name":"onDispose","documentation":"","type":"() => void","entryType":"property"},{"name":"onBeforeRenderObservable","documentation":"An event triggered before rendering the scene\n@type {BABYLON.Observable}","type":"Observable<Layer>","entryType":"property"},{"name":"_onBeforeRenderObserver","documentation":"","type":"any","entryType":"property"},{"name":"onBeforeRender","documentation":"","type":"() => void","entryType":"property"},{"name":"onAfterRenderObservable","documentation":"An event triggered after rendering the scene\n@type {BABYLON.Observable}","type":"Observable<Layer>","entryType":"property"},{"name":"_onAfterRenderObserver","documentation":"","type":"any","entryType":"property"},{"name":"onAfterRender","documentation":"","type":"() => void","entryType":"property"}]},{"name":"LensFlare","documentation":"","type":"typeof LensFlare","constructors":[{"parameters":[{"name":"size","documentation":"","type":"number"},{"name":"position","documentation":"","type":"number"},{"name":"color","documentation":"","type":"any"},{"name":"imgUrl","documentation":"","type":"string"},{"name":"system","documentation":"","type":"LensFlareSystem"}],"returnType":"LensFlare","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"size","documentation":"","type":"number","entryType":"property"},{"name":"position","documentation":"","type":"number","entryType":"property"},{"name":"color","documentation":"","type":"Color3","entryType":"property"},{"name":"texture","documentation":"","type":"Texture","entryType":"property"},{"name":"alphaMode","documentation":"","type":"number","entryType":"property"},{"name":"_system","documentation":"","type":"any","entryType":"property"},{"name":"dispose","documentation":"","type":"() => void","entryType":"property"}]},{"name":"LensFlareSystem","documentation":"","type":"typeof LensFlareSystem","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"emitter","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"LensFlareSystem","documentation":""}],"entryType":"class","functions":[{"name":"getScene","documentation":"","type":"() => Scene","functionBody":[{"parameters":[],"returnType":"Scene","documentation":""}],"entryType":"function"},{"name":"getEmitter","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setEmitter","documentation":"","type":"(newEmitter: any) => void","functionBody":[{"parameters":[{"name":"newEmitter","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getEmitterPosition","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"computeEffectivePosition","documentation":"","type":"(globalViewport: Viewport) => boolean","functionBody":[{"parameters":[{"name":"globalViewport","documentation":"","type":"Viewport"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_isVisible","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"render","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedLensFlareSystem: any, scene: Scene, rootUrl: string) => LensFlareSystem","functionBody":[{"parameters":[{"name":"parsedLensFlareSystem","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"LensFlareSystem","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"lensFlares","documentation":"","type":"LensFlare[]","entryType":"property"},{"name":"borderLimit","documentation":"","type":"number","entryType":"property"},{"name":"viewportBorder","documentation":"","type":"number","entryType":"property"},{"name":"meshesSelectionPredicate","documentation":"","type":"(mesh: Mesh) => boolean","entryType":"property"},{"name":"layerMask","documentation":"","type":"number","entryType":"property"},{"name":"id","documentation":"","type":"string","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_emitter","documentation":"","type":"any","entryType":"property"},{"name":"_vertexBuffers","documentation":"","type":"any","entryType":"property"},{"name":"_indexBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_effect","documentation":"","type":"any","entryType":"property"},{"name":"_positionX","documentation":"","type":"any","entryType":"property"},{"name":"_positionY","documentation":"","type":"any","entryType":"property"},{"name":"_isEnabled","documentation":"","type":"any","entryType":"property"},{"name":"isEnabled","documentation":"","type":"boolean","entryType":"property"}]},{"name":"DirectionalLight","documentation":"","type":"typeof DirectionalLight","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"direction","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"DirectionalLight","documentation":""}],"entryType":"class","functions":[{"name":"getAbsolutePosition","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"setDirectionToTarget","documentation":"","type":"(target: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"setShadowProjectionMatrix","documentation":"","type":"(matrix: Matrix, viewMatrix: Matrix, renderList: AbstractMesh[]) => void","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"},{"name":"viewMatrix","documentation":"","type":"Matrix"},{"name":"renderList","documentation":"","type":"AbstractMesh[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"supportsVSM","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"needRefreshPerFrame","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"needCube","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getShadowDirection","documentation":"","type":"(faceIndex?: number) => Vector3","functionBody":[{"parameters":[{"name":"faceIndex","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"computeTransformedPosition","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"transferToEffect","documentation":"","type":"(effect: Effect, directionUniformName: string) => void","functionBody":[{"parameters":[{"name":"effect","documentation":"","type":"Effect"},{"name":"directionUniformName","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getWorldMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getTypeID","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"position","documentation":"","type":"Vector3","entryType":"property"},{"name":"direction","documentation":"","type":"Vector3","entryType":"property"},{"name":"_transformedDirection","documentation":"","type":"any","entryType":"property"},{"name":"transformedPosition","documentation":"","type":"Vector3","entryType":"property"},{"name":"_worldMatrix","documentation":"","type":"any","entryType":"property"},{"name":"shadowOrthoScale","documentation":"","type":"number","entryType":"property"},{"name":"autoUpdateExtends","documentation":"","type":"boolean","entryType":"property"},{"name":"_orthoLeft","documentation":"","type":"any","entryType":"property"},{"name":"_orthoRight","documentation":"","type":"any","entryType":"property"},{"name":"_orthoTop","documentation":"","type":"any","entryType":"property"},{"name":"_orthoBottom","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Light","BABYLON.IShadowLight"]},{"name":"HemisphericLight","documentation":"","type":"typeof HemisphericLight","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"direction","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"HemisphericLight","documentation":""}],"entryType":"class","functions":[{"name":"setDirectionToTarget","documentation":"","type":"(target: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"getShadowGenerator","documentation":"","type":"() => ShadowGenerator","functionBody":[{"parameters":[],"returnType":"ShadowGenerator","documentation":""}],"entryType":"function"},{"name":"transferToEffect","documentation":"","type":"(effect: Effect, directionUniformName: string, groundColorUniformName: string) => void","functionBody":[{"parameters":[{"name":"effect","documentation":"","type":"Effect"},{"name":"directionUniformName","documentation":"","type":"string"},{"name":"groundColorUniformName","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getWorldMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getTypeID","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"groundColor","documentation":"","type":"Color3","entryType":"property"},{"name":"direction","documentation":"","type":"Vector3","entryType":"property"},{"name":"_worldMatrix","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Light"]},{"name":"Light","documentation":"","type":"typeof Light","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Light","documentation":""}],"entryType":"class","functions":[{"name":"toString","documentation":"","type":"(fullDetails?: boolean) => string","functionBody":[{"parameters":[{"name":"fullDetails","documentation":"- support for multiple levels of logging within scene loading","type":"boolean"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getShadowGenerator","documentation":"","type":"() => IShadowGenerator","functionBody":[{"parameters":[],"returnType":"IShadowGenerator","documentation":""}],"entryType":"function"},{"name":"getAbsolutePosition","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"transferToEffect","documentation":"","type":"(effect: Effect, uniformName0?: string, uniformName1?: string) => void","functionBody":[{"parameters":[{"name":"effect","documentation":"","type":"Effect"},{"name":"uniformName0","documentation":"","type":"string"},{"name":"uniformName1","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getWorldMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"canAffectMesh","documentation":"","type":"(mesh: AbstractMesh) => boolean","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getWorldMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeID","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(name: string) => Light","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"Light","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"GetConstructorFromName","documentation":"","type":"(type: number, name: string, scene: Scene) => () => Light","functionBody":[{"parameters":[{"name":"type","documentation":"","type":"number"},{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"() => Light","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedLight: any, scene: Scene) => Light","functionBody":[{"parameters":[{"name":"parsedLight","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Light","documentation":""}],"entryType":"function"}],"properties":[{"name":"_LIGHTMAP_DEFAULT","documentation":"","type":"any","entryType":"property"},{"name":"_LIGHTMAP_SPECULAR","documentation":"","type":"any","entryType":"property"},{"name":"_LIGHTMAP_SHADOWSONLY","documentation":"","type":"any","entryType":"property"},{"name":"LIGHTMAP_DEFAULT","documentation":"If every light affecting the material is in this lightmapMode,\nmaterial.lightmapTexture adds or multiplies\n(depends on material.useLightmapAsShadowmap)\nafter every other light calculations.","type":"number","entryType":"property"},{"name":"LIGHTMAP_SPECULAR","documentation":"material.lightmapTexture as only diffuse lighting from this light\nadds pnly specular lighting from this light\nadds dynamic shadows","type":"number","entryType":"property"},{"name":"LIGHTMAP_SHADOWSONLY","documentation":"material.lightmapTexture as only lighting\nno light calculation from this light\nonly adds dynamic shadows from this light","type":"number","entryType":"property"},{"name":"diffuse","documentation":"","type":"Color3","entryType":"property"},{"name":"specular","documentation":"","type":"Color3","entryType":"property"},{"name":"intensity","documentation":"","type":"number","entryType":"property"},{"name":"range","documentation":"","type":"number","entryType":"property"},{"name":"includeOnlyWithLayerMask","documentation":"","type":"number","entryType":"property"},{"name":"includedOnlyMeshes","documentation":"","type":"AbstractMesh[]","entryType":"property"},{"name":"excludedMeshes","documentation":"","type":"AbstractMesh[]","entryType":"property"},{"name":"excludeWithLayerMask","documentation":"","type":"number","entryType":"property"},{"name":"lightmapMode","documentation":"","type":"number","entryType":"property"},{"name":"radius","documentation":"","type":"number","entryType":"property"},{"name":"_shadowGenerator","documentation":"","type":"IShadowGenerator","entryType":"property"},{"name":"_parentedWorldMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_excludedMeshesIds","documentation":"","type":"string[]","entryType":"property"},{"name":"_includedOnlyMeshesIds","documentation":"","type":"string[]","entryType":"property"}],"heritageClauses":["BABYLON.Node"]},{"name":"PointLight","documentation":"","type":"typeof PointLight","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"PointLight","documentation":""}],"entryType":"class","functions":[{"name":"getAbsolutePosition","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"computeTransformedPosition","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"transferToEffect","documentation":"","type":"(effect: Effect, positionUniformName: string) => void","functionBody":[{"parameters":[{"name":"effect","documentation":"","type":"Effect"},{"name":"positionUniformName","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"needCube","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"supportsVSM","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"needRefreshPerFrame","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getShadowDirection","documentation":"","type":"(faceIndex?: number) => Vector3","functionBody":[{"parameters":[{"name":"faceIndex","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"setShadowProjectionMatrix","documentation":"","type":"(matrix: Matrix, viewMatrix: Matrix, renderList: AbstractMesh[]) => void","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"},{"name":"viewMatrix","documentation":"","type":"Matrix"},{"name":"renderList","documentation":"","type":"AbstractMesh[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getWorldMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getTypeID","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"_worldMatrix","documentation":"","type":"any","entryType":"property"},{"name":"transformedPosition","documentation":"","type":"Vector3","entryType":"property"},{"name":"position","documentation":"","type":"Vector3","entryType":"property"}],"heritageClauses":["BABYLON.Light","BABYLON.IShadowLight"]},{"name":"SpotLight","documentation":"","type":"typeof SpotLight","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"direction","documentation":"","type":"Vector3"},{"name":"angle","documentation":"","type":"number"},{"name":"exponent","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"SpotLight","documentation":""}],"entryType":"class","functions":[{"name":"getAbsolutePosition","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"setShadowProjectionMatrix","documentation":"","type":"(matrix: Matrix, viewMatrix: Matrix, renderList: AbstractMesh[]) => void","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"},{"name":"viewMatrix","documentation":"","type":"Matrix"},{"name":"renderList","documentation":"","type":"AbstractMesh[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"needCube","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"supportsVSM","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"needRefreshPerFrame","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getShadowDirection","documentation":"","type":"(faceIndex?: number) => Vector3","functionBody":[{"parameters":[{"name":"faceIndex","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"setDirectionToTarget","documentation":"","type":"(target: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"target","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"computeTransformedPosition","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"transferToEffect","documentation":"","type":"(effect: Effect, positionUniformName: string, directionUniformName: string) => void","functionBody":[{"parameters":[{"name":"effect","documentation":"","type":"Effect"},{"name":"positionUniformName","documentation":"","type":"string"},{"name":"directionUniformName","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getWorldMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getTypeID","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"position","documentation":"","type":"Vector3","entryType":"property"},{"name":"direction","documentation":"","type":"Vector3","entryType":"property"},{"name":"angle","documentation":"","type":"number","entryType":"property"},{"name":"exponent","documentation":"","type":"number","entryType":"property"},{"name":"transformedPosition","documentation":"","type":"Vector3","entryType":"property"},{"name":"_transformedDirection","documentation":"","type":"any","entryType":"property"},{"name":"_worldMatrix","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Light","BABYLON.IShadowLight"]},{"name":"SceneLoader","documentation":"","type":"typeof SceneLoader","constructors":[{"parameters":[],"returnType":"SceneLoader","documentation":""}],"entryType":"class","functions":[{"name":"_getDefaultPlugin","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getPluginForExtension","documentation":"","type":"(extension: any) => any","functionBody":[{"parameters":[{"name":"extension","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getPluginForFilename","documentation":"","type":"(sceneFilename: any) => any","functionBody":[{"parameters":[{"name":"sceneFilename","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getDirectLoad","documentation":"","type":"(sceneFilename: any) => any","functionBody":[{"parameters":[{"name":"sceneFilename","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"GetPluginForExtension","documentation":"","type":"(extension: string) => ISceneLoaderPlugin | ISceneLoaderPluginAsync","functionBody":[{"parameters":[{"name":"extension","documentation":"","type":"string"}],"returnType":"ISceneLoaderPlugin | ISceneLoaderPluginAsync","documentation":""}],"entryType":"function"},{"name":"RegisterPlugin","documentation":"","type":"(plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync) => void","functionBody":[{"parameters":[{"name":"plugin","documentation":"","type":"ISceneLoaderPlugin | ISceneLoaderPluginAsync"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"ImportMesh","documentation":"","type":"(meshesNames: any, rootUrl: string, sceneFilename: string, scene: Scene, onsuccess?: (meshes: Abs...","functionBody":[{"parameters":[{"name":"meshesNames","documentation":"","type":"any"},{"name":"rootUrl","documentation":"","type":"string"},{"name":"sceneFilename","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"onsuccess","documentation":"","type":"(meshes: AbstractMesh[], particleSystems: ParticleSystem[], skeletons: Skeleton[]) => void"},{"name":"progressCallBack","documentation":"","type":"() => void"},{"name":"onerror","documentation":"","type":"(scene: Scene, message: string, exception?: any) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Load","documentation":"Load a scene","type":"(rootUrl: string, sceneFilename: any, engine: Engine, onsuccess?: (scene: Scene) => void, progres...","functionBody":[{"parameters":[{"name":"rootUrl","documentation":"a string that defines the root url for scene and resources","type":"string"},{"name":"sceneFilename","documentation":"a string that defines the name of the scene file. can start with \"data:\" following by the stringified version of the scene","type":"any"},{"name":"engine","documentation":"is the instance of BABYLON.Engine to use to create the scene","type":"Engine"},{"name":"onsuccess","documentation":"","type":"(scene: Scene) => void"},{"name":"progressCallBack","documentation":"","type":"any"},{"name":"onerror","documentation":"","type":"(scene: Scene) => void"}],"returnType":"void","documentation":"Load a scene"}],"entryType":"function"},{"name":"Append","documentation":"Append a scene","type":"(rootUrl: string, sceneFilename: any, scene: Scene, onsuccess?: (scene: Scene) => void, progressC...","functionBody":[{"parameters":[{"name":"rootUrl","documentation":"a string that defines the root url for scene and resources","type":"string"},{"name":"sceneFilename","documentation":"a string that defines the name of the scene file. can start with \"data:\" following by the stringified version of the scene","type":"any"},{"name":"scene","documentation":"is the instance of BABYLON.Scene to append to","type":"Scene"},{"name":"onsuccess","documentation":"","type":"(scene: Scene) => void"},{"name":"progressCallBack","documentation":"","type":"any"},{"name":"onerror","documentation":"","type":"(scene: Scene) => void"}],"returnType":"void","documentation":"Append a scene"}],"entryType":"function"}],"properties":[{"name":"_ForceFullSceneLoadingForIncremental","documentation":"","type":"any","entryType":"property"},{"name":"_ShowLoadingScreen","documentation":"","type":"any","entryType":"property"},{"name":"NO_LOGGING","documentation":"","type":"number","entryType":"property"},{"name":"MINIMAL_LOGGING","documentation":"","type":"number","entryType":"property"},{"name":"SUMMARY_LOGGING","documentation":"","type":"number","entryType":"property"},{"name":"DETAILED_LOGGING","documentation":"","type":"number","entryType":"property"},{"name":"_loggingLevel","documentation":"","type":"any","entryType":"property"},{"name":"ForceFullSceneLoadingForIncremental","documentation":"","type":"boolean","entryType":"property"},{"name":"ShowLoadingScreen","documentation":"","type":"boolean","entryType":"property"},{"name":"loggingLevel","documentation":"","type":"number","entryType":"property"},{"name":"_registeredPlugins","documentation":"","type":"any","entryType":"property"}]},{"name":"ColorCurves","documentation":"The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\nThey allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\nThese are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\ncorresponding to low luminance, medium luminance, and high luminance areas respectively.","type":"typeof ColorCurves","constructors":[{"parameters":[],"returnType":"ColorCurves","documentation":""}],"entryType":"class","functions":[{"name":"Bind","documentation":"Binds the color curves to the shader.","type":"(colorCurves: ColorCurves, effect: Effect) => void","functionBody":[{"parameters":[{"name":"colorCurves","documentation":"The color curve to bind","type":"ColorCurves"},{"name":"effect","documentation":"The effect to bind to","type":"Effect"}],"returnType":"void","documentation":"Binds the color curves to the shader."}],"entryType":"function"},{"name":"PrepareUniforms","documentation":"Prepare the list of uniforms associated with the ColorCurves effects.","type":"(uniformsList: string[]) => void","functionBody":[{"parameters":[{"name":"uniformsList","documentation":"The list of uniforms used in the effect","type":"string[]"}],"returnType":"void","documentation":"Prepare the list of uniforms associated with the ColorCurves effects."}],"entryType":"function"},{"name":"getColorGradingDataToRef","documentation":"Returns color grading data based on a hue, density, saturation and exposure value.","type":"(hue: any, density: any, saturation: any, exposure: any, result: any) => any","functionBody":[{"parameters":[{"name":"hue","documentation":"","type":"any"},{"name":"density","documentation":"","type":"any"},{"name":"saturation","documentation":"The saturation.","type":"any"},{"name":"exposure","documentation":"The exposure.","type":"any"},{"name":"result","documentation":"The result data container.","type":"any"}],"returnType":"any","documentation":"Returns color grading data based on a hue, density, saturation and exposure value."}],"entryType":"function"},{"name":"applyColorGradingSliderNonlinear","documentation":"Takes an input slider value and returns an adjusted value that provides extra control near the centre.\n@returns Adjusted value.","type":"(value: any) => any","functionBody":[{"parameters":[{"name":"value","documentation":"The input slider value in range [-100,100].","type":"any"}],"returnType":"any","documentation":"Takes an input slider value and returns an adjusted value that provides extra control near the centre.\n@returns Adjusted value."}],"entryType":"function"},{"name":"fromHSBToRef","documentation":"Returns an RGBA Color4 based on Hue, Saturation and Brightness (also referred to as value, HSV).\n@result An RGBA color represented as Vector4.","type":"(hue: any, saturation: any, brightness: any, result: any) => any","functionBody":[{"parameters":[{"name":"hue","documentation":"The hue (H) input.","type":"any"},{"name":"saturation","documentation":"The saturation (S) input.","type":"any"},{"name":"brightness","documentation":"The brightness (B) input.","type":"any"},{"name":"result","documentation":"","type":"any"}],"returnType":"any","documentation":"Returns an RGBA Color4 based on Hue, Saturation and Brightness (also referred to as value, HSV).\n@result An RGBA color represented as Vector4."}],"entryType":"function"},{"name":"clamp","documentation":"Returns a value clamped between min and max\n@returns The clamped value.","type":"(value: any, min: any, max: any) => any","functionBody":[{"parameters":[{"name":"value","documentation":"The value to clamp","type":"any"},{"name":"min","documentation":"The minimum of value","type":"any"},{"name":"max","documentation":"The maximum of value","type":"any"}],"returnType":"any","documentation":"Returns a value clamped between min and max\n@returns The clamped value."}],"entryType":"function"},{"name":"clone","documentation":"Clones the current color curve instance.\n@return The cloned curves","type":"() => ColorCurves","functionBody":[{"parameters":[],"returnType":"ColorCurves","documentation":"Clones the current color curve instance.\n@return The cloned curves"}],"entryType":"function"},{"name":"serialize","documentation":"Serializes the current color curve instance to a json representation.\n@return a JSON representation","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":"Serializes the current color curve instance to a json representation.\n@return a JSON representation"}],"entryType":"function"},{"name":"Parse","documentation":"Parses the color curve from a json representation.\n@return The parsed curves","type":"(source: any) => ColorCurves","functionBody":[{"parameters":[{"name":"source","documentation":"the JSON source to parse","type":"any"}],"returnType":"ColorCurves","documentation":"Parses the color curve from a json representation.\n@return The parsed curves"}],"entryType":"function"}],"properties":[{"name":"_dirty","documentation":"","type":"any","entryType":"property"},{"name":"_tempColor","documentation":"","type":"any","entryType":"property"},{"name":"_globalCurve","documentation":"","type":"any","entryType":"property"},{"name":"_highlightsCurve","documentation":"","type":"any","entryType":"property"},{"name":"_midtonesCurve","documentation":"","type":"any","entryType":"property"},{"name":"_shadowsCurve","documentation":"","type":"any","entryType":"property"},{"name":"_positiveCurve","documentation":"","type":"any","entryType":"property"},{"name":"_negativeCurve","documentation":"","type":"any","entryType":"property"},{"name":"_globalHue","documentation":"","type":"any","entryType":"property"},{"name":"_globalDensity","documentation":"","type":"any","entryType":"property"},{"name":"_globalSaturation","documentation":"","type":"any","entryType":"property"},{"name":"_globalExposure","documentation":"","type":"any","entryType":"property"},{"name":"GlobalHue","documentation":"Gets the global Hue value.\nThe hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\nSets the global Hue value.\nThe hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).","type":"number","entryType":"property"},{"name":"GlobalDensity","documentation":"Gets the global Density value.\nThe density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\nValues less than zero provide a filter of opposite hue.\nSets the global Density value.\nThe density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\nValues less than zero provide a filter of opposite hue.","type":"number","entryType":"property"},{"name":"GlobalSaturation","documentation":"Gets the global Saturation value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\nSets the global Saturation value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.","type":"number","entryType":"property"},{"name":"_highlightsHue","documentation":"","type":"any","entryType":"property"},{"name":"_highlightsDensity","documentation":"","type":"any","entryType":"property"},{"name":"_highlightsSaturation","documentation":"","type":"any","entryType":"property"},{"name":"_highlightsExposure","documentation":"","type":"any","entryType":"property"},{"name":"HighlightsHue","documentation":"Gets the highlights Hue value.\nThe hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\nSets the highlights Hue value.\nThe hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).","type":"number","entryType":"property"},{"name":"HighlightsDensity","documentation":"Gets the highlights Density value.\nThe density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\nValues less than zero provide a filter of opposite hue.\nSets the highlights Density value.\nThe density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\nValues less than zero provide a filter of opposite hue.","type":"number","entryType":"property"},{"name":"HighlightsSaturation","documentation":"Gets the highlights Saturation value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\nSets the highlights Saturation value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.","type":"number","entryType":"property"},{"name":"HighlightsExposure","documentation":"Gets the highlights Exposure value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\nSets the highlights Exposure value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.","type":"number","entryType":"property"},{"name":"_midtonesHue","documentation":"","type":"any","entryType":"property"},{"name":"_midtonesDensity","documentation":"","type":"any","entryType":"property"},{"name":"_midtonesSaturation","documentation":"","type":"any","entryType":"property"},{"name":"_midtonesExposure","documentation":"","type":"any","entryType":"property"},{"name":"MidtonesHue","documentation":"Gets the midtones Hue value.\nThe hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\nSets the midtones Hue value.\nThe hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).","type":"number","entryType":"property"},{"name":"MidtonesDensity","documentation":"Gets the midtones Density value.\nThe density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\nValues less than zero provide a filter of opposite hue.\nSets the midtones Density value.\nThe density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\nValues less than zero provide a filter of opposite hue.","type":"number","entryType":"property"},{"name":"MidtonesSaturation","documentation":"Gets the midtones Saturation value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\nSets the midtones Saturation value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.","type":"number","entryType":"property"},{"name":"MidtonesExposure","documentation":"Gets the midtones Exposure value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\nSets the midtones Exposure value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.","type":"number","entryType":"property"},{"name":"_shadowsHue","documentation":"","type":"any","entryType":"property"},{"name":"_shadowsDensity","documentation":"","type":"any","entryType":"property"},{"name":"_shadowsSaturation","documentation":"","type":"any","entryType":"property"},{"name":"_shadowsExposure","documentation":"","type":"any","entryType":"property"},{"name":"ShadowsHue","documentation":"Gets the shadows Hue value.\nThe hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\nSets the shadows Hue value.\nThe hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).","type":"number","entryType":"property"},{"name":"ShadowsDensity","documentation":"Gets the shadows Density value.\nThe density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\nValues less than zero provide a filter of opposite hue.\nSets the shadows Density value.\nThe density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\nValues less than zero provide a filter of opposite hue.","type":"number","entryType":"property"},{"name":"ShadowsSaturation","documentation":"Gets the shadows Saturation value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\nSets the shadows Saturation value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.","type":"number","entryType":"property"},{"name":"ShadowsExposure","documentation":"Gets the shadows Exposure value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\nSets the shadows Exposure value.\nThis is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.","type":"number","entryType":"property"}]},{"name":"EffectFallbacks","documentation":"","type":"typeof EffectFallbacks","constructors":[{"parameters":[],"returnType":"EffectFallbacks","documentation":""}],"entryType":"class","functions":[{"name":"addFallback","documentation":"","type":"(rank: number, define: string) => void","functionBody":[{"parameters":[{"name":"rank","documentation":"","type":"number"},{"name":"define","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addCPUSkinningFallback","documentation":"","type":"(rank: number, mesh: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"rank","documentation":"","type":"number"},{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"reduce","documentation":"","type":"(currentDefines: string) => string","functionBody":[{"parameters":[{"name":"currentDefines","documentation":"","type":"string"}],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"_defines","documentation":"","type":"any","entryType":"property"},{"name":"_currentRank","documentation":"","type":"any","entryType":"property"},{"name":"_maxRank","documentation":"","type":"any","entryType":"property"},{"name":"_mesh","documentation":"","type":"any","entryType":"property"},{"name":"_meshRank","documentation":"","type":"any","entryType":"property"},{"name":"isMoreFallbacks","documentation":"","type":"boolean","entryType":"property"}]},{"name":"Effect","documentation":"","type":"typeof Effect","constructors":[{"parameters":[{"name":"baseName","documentation":"","type":"any"},{"name":"attributesNames","documentation":"","type":"string[]"},{"name":"uniformsNames","documentation":"","type":"string[]"},{"name":"samplers","documentation":"","type":"string[]"},{"name":"engine","documentation":"","type":"any"},{"name":"defines","documentation":"","type":"string"},{"name":"fallbacks","documentation":"","type":"EffectFallbacks"},{"name":"onCompiled","documentation":"","type":"(effect: Effect) => void"},{"name":"onError","documentation":"","type":"(effect: Effect, errors: string) => void"},{"name":"indexParameters","documentation":"","type":"any"}],"returnType":"Effect","documentation":""}],"entryType":"class","functions":[{"name":"isReady","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getProgram","documentation":"","type":"() => WebGLProgram","functionBody":[{"parameters":[],"returnType":"WebGLProgram","documentation":""}],"entryType":"function"},{"name":"getAttributesNames","documentation":"","type":"() => string[]","functionBody":[{"parameters":[],"returnType":"string[]","documentation":""}],"entryType":"function"},{"name":"getAttributeLocation","documentation":"","type":"(index: number) => number","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getAttributeLocationByName","documentation":"","type":"(name: string) => number","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getAttributesCount","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getUniformIndex","documentation":"","type":"(uniformName: string) => number","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getUniform","documentation":"","type":"(uniformName: string) => WebGLUniformLocation","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"}],"returnType":"WebGLUniformLocation","documentation":""}],"entryType":"function"},{"name":"getSamplers","documentation":"","type":"() => string[]","functionBody":[{"parameters":[],"returnType":"string[]","documentation":""}],"entryType":"function"},{"name":"getCompilationError","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"_loadVertexShader","documentation":"","type":"(vertex: any, callback: (data: any) => void) => void","functionBody":[{"parameters":[{"name":"vertex","documentation":"","type":"any"},{"name":"callback","documentation":"","type":"(data: any) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_loadFragmentShader","documentation":"","type":"(fragment: any, callback: (data: any) => void) => void","functionBody":[{"parameters":[{"name":"fragment","documentation":"","type":"any"},{"name":"callback","documentation":"","type":"(data: any) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_dumpShadersName","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_processIncludes","documentation":"","type":"(sourceCode: any, callback: any) => any","functionBody":[{"parameters":[{"name":"sourceCode","documentation":"","type":"any"},{"name":"callback","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_processPrecision","documentation":"","type":"(source: any) => any","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_prepareEffect","documentation":"","type":"(vertexSourceCode: any, fragmentSourceCode: any, attributesNames: any, defines: any, fallbacks?: ...","functionBody":[{"parameters":[{"name":"vertexSourceCode","documentation":"","type":"any"},{"name":"fragmentSourceCode","documentation":"","type":"any"},{"name":"attributesNames","documentation":"","type":"any"},{"name":"defines","documentation":"","type":"any"},{"name":"fallbacks","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_bindTexture","documentation":"","type":"(channel: string, texture: WebGLTexture) => void","functionBody":[{"parameters":[{"name":"channel","documentation":"","type":"string"},{"name":"texture","documentation":"","type":"WebGLTexture"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setTexture","documentation":"","type":"(channel: string, texture: BaseTexture) => void","functionBody":[{"parameters":[{"name":"channel","documentation":"","type":"string"},{"name":"texture","documentation":"","type":"BaseTexture"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setTextureArray","documentation":"","type":"(channel: string, textures: BaseTexture[]) => void","functionBody":[{"parameters":[{"name":"channel","documentation":"","type":"string"},{"name":"textures","documentation":"","type":"BaseTexture[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setTextureFromPostProcess","documentation":"","type":"(channel: string, postProcess: PostProcess) => void","functionBody":[{"parameters":[{"name":"channel","documentation":"","type":"string"},{"name":"postProcess","documentation":"","type":"PostProcess"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_cacheMatrix","documentation":"","type":"(uniformName: string, matrix: Matrix) => boolean","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_cacheFloat2","documentation":"","type":"(uniformName: string, x: number, y: number) => boolean","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_cacheFloat3","documentation":"","type":"(uniformName: string, x: number, y: number, z: number) => boolean","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_cacheFloat4","documentation":"","type":"(uniformName: string, x: number, y: number, z: number, w: number) => boolean","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"w","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"setIntArray","documentation":"","type":"(uniformName: string, array: Int32Array) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"array","documentation":"","type":"Int32Array"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setIntArray2","documentation":"","type":"(uniformName: string, array: Int32Array) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"array","documentation":"","type":"Int32Array"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setIntArray3","documentation":"","type":"(uniformName: string, array: Int32Array) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"array","documentation":"","type":"Int32Array"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setIntArray4","documentation":"","type":"(uniformName: string, array: Int32Array) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"array","documentation":"","type":"Int32Array"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setFloatArray","documentation":"","type":"(uniformName: string, array: Float32Array) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"array","documentation":"","type":"Float32Array"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setFloatArray2","documentation":"","type":"(uniformName: string, array: Float32Array) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"array","documentation":"","type":"Float32Array"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setFloatArray3","documentation":"","type":"(uniformName: string, array: Float32Array) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"array","documentation":"","type":"Float32Array"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setFloatArray4","documentation":"","type":"(uniformName: string, array: Float32Array) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"array","documentation":"","type":"Float32Array"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setArray","documentation":"","type":"(uniformName: string, array: number[]) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"array","documentation":"","type":"number[]"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setArray2","documentation":"","type":"(uniformName: string, array: number[]) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"array","documentation":"","type":"number[]"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setArray3","documentation":"","type":"(uniformName: string, array: number[]) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"array","documentation":"","type":"number[]"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setArray4","documentation":"","type":"(uniformName: string, array: number[]) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"array","documentation":"","type":"number[]"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setMatrices","documentation":"","type":"(uniformName: string, matrices: Float32Array) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"matrices","documentation":"","type":"Float32Array"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setMatrix","documentation":"","type":"(uniformName: string, matrix: Matrix) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setMatrix3x3","documentation":"","type":"(uniformName: string, matrix: Float32Array) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"matrix","documentation":"","type":"Float32Array"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setMatrix2x2","documentation":"","type":"(uniformName: string, matrix: Float32Array) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"matrix","documentation":"","type":"Float32Array"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setFloat","documentation":"","type":"(uniformName: string, value: number) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"value","documentation":"","type":"number"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setBool","documentation":"","type":"(uniformName: string, bool: boolean) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"bool","documentation":"","type":"boolean"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setVector2","documentation":"","type":"(uniformName: string, vector2: Vector2) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"vector2","documentation":"","type":"Vector2"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setFloat2","documentation":"","type":"(uniformName: string, x: number, y: number) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setVector3","documentation":"","type":"(uniformName: string, vector3: Vector3) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"vector3","documentation":"","type":"Vector3"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setFloat3","documentation":"","type":"(uniformName: string, x: number, y: number, z: number) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setVector4","documentation":"","type":"(uniformName: string, vector4: Vector4) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"vector4","documentation":"","type":"Vector4"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setFloat4","documentation":"","type":"(uniformName: string, x: number, y: number, z: number, w: number) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"w","documentation":"","type":"number"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setColor3","documentation":"","type":"(uniformName: string, color3: Color3) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"color3","documentation":"","type":"Color3"}],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"setColor4","documentation":"","type":"(uniformName: string, color3: Color3, alpha: number) => Effect","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"string"},{"name":"color3","documentation":"","type":"Color3"},{"name":"alpha","documentation":"","type":"number"}],"returnType":"Effect","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"any","entryType":"property"},{"name":"defines","documentation":"","type":"string","entryType":"property"},{"name":"onCompiled","documentation":"","type":"(effect: Effect) => void","entryType":"property"},{"name":"onError","documentation":"","type":"(effect: Effect, errors: string) => void","entryType":"property"},{"name":"onBind","documentation":"","type":"(effect: Effect) => void","entryType":"property"},{"name":"_engine","documentation":"","type":"any","entryType":"property"},{"name":"_uniformsNames","documentation":"","type":"any","entryType":"property"},{"name":"_samplers","documentation":"","type":"any","entryType":"property"},{"name":"_isReady","documentation":"","type":"any","entryType":"property"},{"name":"_compilationError","documentation":"","type":"any","entryType":"property"},{"name":"_attributesNames","documentation":"","type":"any","entryType":"property"},{"name":"_attributes","documentation":"","type":"any","entryType":"property"},{"name":"_uniforms","documentation":"","type":"any","entryType":"property"},{"name":"_key","documentation":"","type":"string","entryType":"property"},{"name":"_indexParameters","documentation":"","type":"any","entryType":"property"},{"name":"_program","documentation":"","type":"any","entryType":"property"},{"name":"_valueCache","documentation":"","type":"any","entryType":"property"},{"name":"isSupported","documentation":"","type":"boolean","entryType":"property"},{"name":"ShadersStore","documentation":"","type":"{}","entryType":"property"},{"name":"IncludesShadersStore","documentation":"","type":"{}","entryType":"property"}]},{"name":"FresnelParameters","documentation":"","type":"typeof FresnelParameters","constructors":[{"parameters":[],"returnType":"FresnelParameters","documentation":""}],"entryType":"class","functions":[{"name":"clone","documentation":"","type":"() => FresnelParameters","functionBody":[{"parameters":[],"returnType":"FresnelParameters","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedFresnelParameters: any) => FresnelParameters","functionBody":[{"parameters":[{"name":"parsedFresnelParameters","documentation":"","type":"any"}],"returnType":"FresnelParameters","documentation":""}],"entryType":"function"}],"properties":[{"name":"isEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"leftColor","documentation":"","type":"Color3","entryType":"property"},{"name":"rightColor","documentation":"","type":"Color3","entryType":"property"},{"name":"bias","documentation":"","type":"number","entryType":"property"},{"name":"power","documentation":"","type":"number","entryType":"property"}]},{"name":"MaterialDefines","documentation":"","type":"typeof MaterialDefines","constructors":[{"parameters":[],"returnType":"MaterialDefines","documentation":""}],"entryType":"class","functions":[{"name":"rebuild","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isEqual","documentation":"","type":"(other: MaterialDefines) => boolean","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"MaterialDefines"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"cloneTo","documentation":"","type":"(other: MaterialDefines) => void","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"MaterialDefines"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"reset","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"toString","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"_keys","documentation":"","type":"string[]","entryType":"property"}]},{"name":"Material","documentation":"","type":"typeof Material","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"doNotAdd","documentation":"","type":"boolean"}],"returnType":"Material","documentation":""}],"entryType":"class","functions":[{"name":"toString","documentation":"","type":"(fullDetails?: boolean) => string","functionBody":[{"parameters":[{"name":"fullDetails","documentation":"- support for multiple levels of logging within scene loading\nsubclasses should override adding information pertainent to themselves","type":"boolean"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"freeze","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"unfreeze","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"","type":"(mesh?: AbstractMesh, useInstances?: boolean) => boolean","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"useInstances","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getEffect","documentation":"","type":"() => Effect","functionBody":[{"parameters":[],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"getScene","documentation":"","type":"() => Scene","functionBody":[{"parameters":[],"returnType":"Scene","documentation":""}],"entryType":"function"},{"name":"needAlphaBlending","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"needAlphaTesting","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getAlphaTestTexture","documentation":"","type":"() => BaseTexture","functionBody":[{"parameters":[],"returnType":"BaseTexture","documentation":""}],"entryType":"function"},{"name":"markDirty","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_preBind","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"bind","documentation":"","type":"(world: Matrix, mesh?: Mesh) => void","functionBody":[{"parameters":[{"name":"world","documentation":"","type":"Matrix"},{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"bindOnlyWorldMatrix","documentation":"","type":"(world: Matrix) => void","functionBody":[{"parameters":[{"name":"world","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"unbind","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(name: string) => Material","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"Material","documentation":""}],"entryType":"function"},{"name":"getBindedMeshes","documentation":"","type":"() => AbstractMesh[]","functionBody":[{"parameters":[],"returnType":"AbstractMesh[]","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean) => void","functionBody":[{"parameters":[{"name":"forceDisposeEffect","documentation":"","type":"boolean"},{"name":"forceDisposeTextures","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"ParseMultiMaterial","documentation":"","type":"(parsedMultiMaterial: any, scene: Scene) => MultiMaterial","functionBody":[{"parameters":[{"name":"parsedMultiMaterial","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"MultiMaterial","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedMaterial: any, scene: Scene, rootUrl: string) => any","functionBody":[{"parameters":[{"name":"parsedMaterial","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"_TriangleFillMode","documentation":"","type":"any","entryType":"property"},{"name":"_WireFrameFillMode","documentation":"","type":"any","entryType":"property"},{"name":"_PointFillMode","documentation":"","type":"any","entryType":"property"},{"name":"TriangleFillMode","documentation":"","type":"number","entryType":"property"},{"name":"WireFrameFillMode","documentation":"","type":"number","entryType":"property"},{"name":"PointFillMode","documentation":"","type":"number","entryType":"property"},{"name":"_ClockWiseSideOrientation","documentation":"","type":"any","entryType":"property"},{"name":"_CounterClockWiseSideOrientation","documentation":"","type":"any","entryType":"property"},{"name":"ClockWiseSideOrientation","documentation":"","type":"number","entryType":"property"},{"name":"CounterClockWiseSideOrientation","documentation":"","type":"number","entryType":"property"},{"name":"id","documentation":"","type":"string","entryType":"property"},{"name":"checkReadyOnEveryCall","documentation":"","type":"boolean","entryType":"property"},{"name":"checkReadyOnlyOnce","documentation":"","type":"boolean","entryType":"property"},{"name":"state","documentation":"","type":"string","entryType":"property"},{"name":"alpha","documentation":"","type":"number","entryType":"property"},{"name":"backFaceCulling","documentation":"","type":"boolean","entryType":"property"},{"name":"sideOrientation","documentation":"","type":"number","entryType":"property"},{"name":"onCompiled","documentation":"","type":"(effect: Effect) => void","entryType":"property"},{"name":"onError","documentation":"","type":"(effect: Effect, errors: string) => void","entryType":"property"},{"name":"getRenderTargetTextures","documentation":"","type":"() => SmartArray<RenderTargetTexture>","entryType":"property"},{"name":"onDisposeObservable","documentation":"An event triggered when the material is disposed.\n@type {BABYLON.Observable}","type":"Observable<Material>","entryType":"property"},{"name":"_onDisposeObserver","documentation":"","type":"any","entryType":"property"},{"name":"onDispose","documentation":"","type":"() => void","entryType":"property"},{"name":"onBindObservable","documentation":"An event triggered when the material is bound.\n@type {BABYLON.Observable}","type":"Observable<AbstractMesh>","entryType":"property"},{"name":"_onBindObserver","documentation":"","type":"any","entryType":"property"},{"name":"onBind","documentation":"","type":"(Mesh: AbstractMesh) => void","entryType":"property"},{"name":"onUnBindObservable","documentation":"An event triggered when the material is unbound.\n@type {BABYLON.Observable}","type":"Observable<Material>","entryType":"property"},{"name":"alphaMode","documentation":"","type":"number","entryType":"property"},{"name":"disableDepthWrite","documentation":"","type":"boolean","entryType":"property"},{"name":"fogEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"pointSize","documentation":"","type":"number","entryType":"property"},{"name":"zOffset","documentation":"","type":"number","entryType":"property"},{"name":"wireframe","documentation":"","type":"boolean","entryType":"property"},{"name":"pointsCloud","documentation":"","type":"boolean","entryType":"property"},{"name":"fillMode","documentation":"","type":"number","entryType":"property"},{"name":"_effect","documentation":"","type":"Effect","entryType":"property"},{"name":"_wasPreviouslyReady","documentation":"","type":"boolean","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_fillMode","documentation":"","type":"any","entryType":"property"},{"name":"_cachedDepthWriteState","documentation":"","type":"any","entryType":"property"},{"name":"isFrozen","documentation":"","type":"boolean","entryType":"property"}]},{"name":"MaterialHelper","documentation":"","type":"typeof MaterialHelper","constructors":[{"parameters":[],"returnType":"MaterialHelper","documentation":""}],"entryType":"class","functions":[{"name":"PrepareDefinesForLights","documentation":"","type":"(scene: Scene, mesh: AbstractMesh, defines: MaterialDefines, maxSimultaneousLights?: number) => b...","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"defines","documentation":"","type":"MaterialDefines"},{"name":"maxSimultaneousLights","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"PrepareUniformsAndSamplersList","documentation":"","type":"(uniformsList: string[], samplersList: string[], defines: MaterialDefines, maxSimultaneousLights?...","functionBody":[{"parameters":[{"name":"uniformsList","documentation":"","type":"string[]"},{"name":"samplersList","documentation":"","type":"string[]"},{"name":"defines","documentation":"","type":"MaterialDefines"},{"name":"maxSimultaneousLights","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"HandleFallbacksForShadows","documentation":"","type":"(defines: MaterialDefines, fallbacks: EffectFallbacks, maxSimultaneousLights?: number) => void","functionBody":[{"parameters":[{"name":"defines","documentation":"","type":"MaterialDefines"},{"name":"fallbacks","documentation":"","type":"EffectFallbacks"},{"name":"maxSimultaneousLights","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"PrepareAttributesForBones","documentation":"","type":"(attribs: string[], mesh: AbstractMesh, defines: MaterialDefines, fallbacks: EffectFallbacks) => ...","functionBody":[{"parameters":[{"name":"attribs","documentation":"","type":"string[]"},{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"defines","documentation":"","type":"MaterialDefines"},{"name":"fallbacks","documentation":"","type":"EffectFallbacks"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"PrepareAttributesForInstances","documentation":"","type":"(attribs: string[], defines: MaterialDefines) => void","functionBody":[{"parameters":[{"name":"attribs","documentation":"","type":"string[]"},{"name":"defines","documentation":"","type":"MaterialDefines"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"BindLightShadow","documentation":"","type":"(light: Light, scene: Scene, mesh: AbstractMesh, lightIndex: number, effect: Effect, depthValuesA...","functionBody":[{"parameters":[{"name":"light","documentation":"","type":"Light"},{"name":"scene","documentation":"","type":"Scene"},{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"lightIndex","documentation":"","type":"number"},{"name":"effect","documentation":"","type":"Effect"},{"name":"depthValuesAlreadySet","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"BindLightProperties","documentation":"","type":"(light: Light, effect: Effect, lightIndex: number) => void","functionBody":[{"parameters":[{"name":"light","documentation":"","type":"Light"},{"name":"effect","documentation":"","type":"Effect"},{"name":"lightIndex","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"BindLights","documentation":"","type":"(scene: Scene, mesh: AbstractMesh, effect: Effect, defines: MaterialDefines, maxSimultaneousLight...","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"effect","documentation":"","type":"Effect"},{"name":"defines","documentation":"","type":"MaterialDefines"},{"name":"maxSimultaneousLights","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"BindFogParameters","documentation":"","type":"(scene: Scene, mesh: AbstractMesh, effect: Effect) => void","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"effect","documentation":"","type":"Effect"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"BindBonesParameters","documentation":"","type":"(mesh: AbstractMesh, effect: Effect) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"effect","documentation":"","type":"Effect"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"BindLogDepth","documentation":"","type":"(defines: MaterialDefines, effect: Effect, scene: Scene) => void","functionBody":[{"parameters":[{"name":"defines","documentation":"","type":"MaterialDefines"},{"name":"effect","documentation":"","type":"Effect"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"BindClipPlane","documentation":"","type":"(effect: Effect, scene: Scene) => void","functionBody":[{"parameters":[{"name":"effect","documentation":"","type":"Effect"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"MultiMaterial","documentation":"","type":"typeof MultiMaterial","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"MultiMaterial","documentation":""}],"entryType":"class","functions":[{"name":"getSubMaterial","documentation":"","type":"(index: any) => Material","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"any"}],"returnType":"Material","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"","type":"(mesh?: AbstractMesh) => boolean","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(name: string, cloneChildren?: boolean) => MultiMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"cloneChildren","documentation":"","type":"boolean"}],"returnType":"MultiMaterial","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"subMaterials","documentation":"","type":"Material[]","entryType":"property"}],"heritageClauses":["BABYLON.Material"]},{"name":"PBRMaterial","documentation":"The Physically based material of BJS.\n\nThis offers the main features of a standard PBR material.\nFor more information, please refer to the documentation :\nhttp://doc.babylonjs.com/extensions/Physically_Based_Rendering","type":"typeof PBRMaterial","constructors":[{"parameters":[{"name":"name","documentation":"The material name","type":"string"},{"name":"scene","documentation":"The scene the material will be use in.","type":"Scene"}],"returnType":"PBRMaterial","documentation":"Instantiates a new PBRMaterial instance."}],"entryType":"class","functions":[{"name":"needAlphaBlending","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"needAlphaTesting","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_shouldUseAlphaFromAlbedoTexture","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getAlphaTestTexture","documentation":"","type":"() => BaseTexture","functionBody":[{"parameters":[],"returnType":"BaseTexture","documentation":""}],"entryType":"function"},{"name":"_checkCache","documentation":"","type":"(scene: any, mesh?: any, useInstances?: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"mesh","documentation":"","type":"any"},{"name":"useInstances","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"convertColorToLinearSpaceToRef","documentation":"","type":"(color: any, ref: any) => any","functionBody":[{"parameters":[{"name":"color","documentation":"","type":"any"},{"name":"ref","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"convertColorToLinearSpaceToRef","documentation":"","type":"(color: any, ref: any, useScalarInLinear: any) => any","functionBody":[{"parameters":[{"name":"color","documentation":"","type":"any"},{"name":"ref","documentation":"","type":"any"},{"name":"useScalarInLinear","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"BindLights","documentation":"","type":"(scene: Scene, mesh: AbstractMesh, effect: Effect, defines: MaterialDefines, useScalarInLinearSpa...","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"effect","documentation":"","type":"Effect"},{"name":"defines","documentation":"","type":"MaterialDefines"},{"name":"useScalarInLinearSpace","documentation":"","type":"boolean"},{"name":"maxSimultaneousLights","documentation":"","type":"number"},{"name":"usePhysicalLightFalloff","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"","type":"(mesh?: AbstractMesh, useInstances?: boolean) => boolean","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"useInstances","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"unbind","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"bindOnlyWorldMatrix","documentation":"","type":"(world: Matrix) => void","functionBody":[{"parameters":[{"name":"world","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"bind","documentation":"","type":"(world: Matrix, mesh?: Mesh) => void","functionBody":[{"parameters":[{"name":"world","documentation":"","type":"Matrix"},{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getAnimatables","documentation":"","type":"() => IAnimatable[]","functionBody":[{"parameters":[],"returnType":"IAnimatable[]","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean) => void","functionBody":[{"parameters":[{"name":"forceDisposeEffect","documentation":"","type":"boolean"},{"name":"forceDisposeTextures","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(name: string) => PBRMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"PBRMaterial","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(source: any, scene: Scene, rootUrl: string) => PBRMaterial","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"PBRMaterial","documentation":""}],"entryType":"function"}],"properties":[{"name":"directIntensity","documentation":"Intensity of the direct lights e.g. the four lights available in your scene.\nThis impacts both the direct diffuse and specular highlights.","type":"number","entryType":"property"},{"name":"emissiveIntensity","documentation":"Intensity of the emissive part of the material.\nThis helps controlling the emissive effect without modifying the emissive color.","type":"number","entryType":"property"},{"name":"environmentIntensity","documentation":"Intensity of the environment e.g. how much the environment will light the object\neither through harmonics for rough material or through the refelction for shiny ones.","type":"number","entryType":"property"},{"name":"specularIntensity","documentation":"This is a special control allowing the reduction of the specular highlights coming from the\nfour lights of the scene. Those highlights may not be needed in full environment lighting.","type":"number","entryType":"property"},{"name":"_lightingInfos","documentation":"","type":"any","entryType":"property"},{"name":"disableBumpMap","documentation":"Debug Control allowing disabling the bump map on this material.","type":"boolean","entryType":"property"},{"name":"overloadedShadowIntensity","documentation":"Debug Control helping enforcing or dropping the darkness of shadows.\n1.0 means the shadows have their normal darkness, 0.0 means the shadows are not visible.","type":"number","entryType":"property"},{"name":"overloadedShadeIntensity","documentation":"Debug Control helping dropping the shading effect coming from the diffuse lighting.\n1.0 means the shade have their normal impact, 0.0 means no shading at all.","type":"number","entryType":"property"},{"name":"_overloadedShadowInfos","documentation":"","type":"any","entryType":"property"},{"name":"cameraExposure","documentation":"The camera exposure used on this material.\nThis property is here and not in the camera to allow controlling exposure without full screen post process.\nThis corresponds to a photographic exposure.","type":"number","entryType":"property"},{"name":"cameraContrast","documentation":"The camera contrast used on this material.\nThis property is here and not in the camera to allow controlling contrast without full screen post process.","type":"number","entryType":"property"},{"name":"cameraColorGradingTexture","documentation":"Color Grading 2D Lookup Texture.\nThis allows special effects like sepia, black and white to sixties rendering style.","type":"BaseTexture","entryType":"property"},{"name":"cameraColorCurves","documentation":"The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\nThey allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\nThese are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\ncorresponding to low luminance, medium luminance, and high luminance areas respectively.","type":"ColorCurves","entryType":"property"},{"name":"_cameraInfos","documentation":"","type":"any","entryType":"property"},{"name":"_microsurfaceTextureLods","documentation":"","type":"any","entryType":"property"},{"name":"overloadedAmbient","documentation":"Debug Control allowing to overload the ambient color.\nThis as to be use with the overloadedAmbientIntensity parameter.","type":"Color3","entryType":"property"},{"name":"overloadedAmbientIntensity","documentation":"Debug Control indicating how much the overloaded ambient color is used against the default one.","type":"number","entryType":"property"},{"name":"overloadedAlbedo","documentation":"Debug Control allowing to overload the albedo color.\nThis as to be use with the overloadedAlbedoIntensity parameter.","type":"Color3","entryType":"property"},{"name":"overloadedAlbedoIntensity","documentation":"Debug Control indicating how much the overloaded albedo color is used against the default one.","type":"number","entryType":"property"},{"name":"overloadedReflectivity","documentation":"Debug Control allowing to overload the reflectivity color.\nThis as to be use with the overloadedReflectivityIntensity parameter.","type":"Color3","entryType":"property"},{"name":"overloadedReflectivityIntensity","documentation":"Debug Control indicating how much the overloaded reflectivity color is used against the default one.","type":"number","entryType":"property"},{"name":"overloadedEmissive","documentation":"Debug Control allowing to overload the emissive color.\nThis as to be use with the overloadedEmissiveIntensity parameter.","type":"Color3","entryType":"property"},{"name":"overloadedEmissiveIntensity","documentation":"Debug Control indicating how much the overloaded emissive color is used against the default one.","type":"number","entryType":"property"},{"name":"_overloadedIntensity","documentation":"","type":"any","entryType":"property"},{"name":"overloadedReflection","documentation":"Debug Control allowing to overload the reflection color.\nThis as to be use with the overloadedReflectionIntensity parameter.","type":"Color3","entryType":"property"},{"name":"overloadedReflectionIntensity","documentation":"Debug Control indicating how much the overloaded reflection color is used against the default one.","type":"number","entryType":"property"},{"name":"overloadedMicroSurface","documentation":"Debug Control allowing to overload the microsurface.\nThis as to be use with the overloadedMicroSurfaceIntensity parameter.","type":"number","entryType":"property"},{"name":"overloadedMicroSurfaceIntensity","documentation":"Debug Control indicating how much the overloaded microsurface is used against the default one.","type":"number","entryType":"property"},{"name":"_overloadedMicroSurface","documentation":"","type":"any","entryType":"property"},{"name":"albedoTexture","documentation":"AKA Diffuse Texture in standard nomenclature.","type":"BaseTexture","entryType":"property"},{"name":"ambientTexture","documentation":"AKA Occlusion Texture in other nomenclature.","type":"BaseTexture","entryType":"property"},{"name":"opacityTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"reflectionTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"emissiveTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"reflectivityTexture","documentation":"AKA Specular texture in other nomenclature.","type":"BaseTexture","entryType":"property"},{"name":"bumpTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"lightmapTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"refractionTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"ambientColor","documentation":"","type":"Color3","entryType":"property"},{"name":"albedoColor","documentation":"AKA Diffuse Color in other nomenclature.","type":"Color3","entryType":"property"},{"name":"reflectivityColor","documentation":"AKA Specular Color in other nomenclature.","type":"Color3","entryType":"property"},{"name":"reflectionColor","documentation":"","type":"Color3","entryType":"property"},{"name":"emissiveColor","documentation":"","type":"Color3","entryType":"property"},{"name":"microSurface","documentation":"AKA Glossiness in other nomenclature.","type":"number","entryType":"property"},{"name":"indexOfRefraction","documentation":"source material index of refraction (IOR)' / 'destination material IOR.","type":"number","entryType":"property"},{"name":"invertRefractionY","documentation":"Controls if refraction needs to be inverted on Y. This could be usefull for procedural texture.","type":"boolean","entryType":"property"},{"name":"opacityFresnelParameters","documentation":"","type":"FresnelParameters","entryType":"property"},{"name":"emissiveFresnelParameters","documentation":"","type":"FresnelParameters","entryType":"property"},{"name":"linkRefractionWithTransparency","documentation":"This parameters will make the material used its opacity to control how much it is refracting aginst not.\nMaterials half opaque for instance using refraction could benefit from this control.","type":"boolean","entryType":"property"},{"name":"linkEmissiveWithAlbedo","documentation":"The emissive and albedo are linked to never be more than one (Energy conservation).","type":"boolean","entryType":"property"},{"name":"useLightmapAsShadowmap","documentation":"","type":"boolean","entryType":"property"},{"name":"useEmissiveAsIllumination","documentation":"In this mode, the emissive informtaion will always be added to the lighting once.\nA light for instance can be thought as emissive.","type":"boolean","entryType":"property"},{"name":"useAlphaFromAlbedoTexture","documentation":"Secifies that the alpha is coming form the albedo channel alpha channel.","type":"boolean","entryType":"property"},{"name":"useSpecularOverAlpha","documentation":"Specifies that the material will keeps the specular highlights over a transparent surface (only the most limunous ones).\nA car glass is a good exemple of that. When sun reflects on it you can not see what is behind.","type":"boolean","entryType":"property"},{"name":"useMicroSurfaceFromReflectivityMapAlpha","documentation":"Specifies if the reflectivity texture contains the glossiness information in its alpha channel.","type":"boolean","entryType":"property"},{"name":"useAutoMicroSurfaceFromReflectivityMap","documentation":"In case the reflectivity map does not contain the microsurface information in its alpha channel,\nThe material will try to infer what glossiness each pixel should be.","type":"boolean","entryType":"property"},{"name":"useScalarInLinearSpace","documentation":"Allows to work with scalar in linear mode. This is definitely a matter of preferences and tools used during\nthe creation of the material.","type":"boolean","entryType":"property"},{"name":"usePhysicalLightFalloff","documentation":"BJS is using an harcoded light falloff based on a manually sets up range.\nIn PBR, one way to represents the fallof is to use the inverse squared root algorythm.\nThis parameter can help you switch back to the BJS mode in order to create scenes using both materials.","type":"boolean","entryType":"property"},{"name":"useRadianceOverAlpha","documentation":"Specifies that the material will keeps the reflection highlights over a transparent surface (only the most limunous ones).\nA car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.","type":"boolean","entryType":"property"},{"name":"useParallax","documentation":"Allows using the bump map in parallax mode.","type":"boolean","entryType":"property"},{"name":"useParallaxOcclusion","documentation":"Allows using the bump map in parallax occlusion mode.","type":"boolean","entryType":"property"},{"name":"parallaxScaleBias","documentation":"Controls the scale bias of the parallax mode.","type":"number","entryType":"property"},{"name":"disableLighting","documentation":"If sets to true, disables all the lights affecting the material.","type":"boolean","entryType":"property"},{"name":"maxSimultaneousLights","documentation":"Number of Simultaneous lights allowed on the material.","type":"number","entryType":"property"},{"name":"invertNormalMapX","documentation":"If sets to true, x component of normal map value will invert (x = 1.0 - x).","type":"boolean","entryType":"property"},{"name":"invertNormalMapY","documentation":"If sets to true, y component of normal map value will invert (y = 1.0 - y).","type":"boolean","entryType":"property"},{"name":"_renderTargets","documentation":"","type":"any","entryType":"property"},{"name":"_worldViewProjectionMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_globalAmbientColor","documentation":"","type":"any","entryType":"property"},{"name":"_tempColor","documentation":"","type":"any","entryType":"property"},{"name":"_renderId","documentation":"","type":"any","entryType":"property"},{"name":"_defines","documentation":"","type":"any","entryType":"property"},{"name":"_cachedDefines","documentation":"","type":"any","entryType":"property"},{"name":"_useLogarithmicDepth","documentation":"","type":"any","entryType":"property"},{"name":"useLogarithmicDepth","documentation":"","type":"boolean","entryType":"property"},{"name":"_scaledAlbedo","documentation":"","type":"any","entryType":"property"},{"name":"_scaledReflectivity","documentation":"","type":"any","entryType":"property"},{"name":"_scaledEmissive","documentation":"","type":"any","entryType":"property"},{"name":"_scaledReflection","documentation":"","type":"any","entryType":"property"},{"name":"_myScene","documentation":"","type":"any","entryType":"property"},{"name":"_myShadowGenerator","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.BABYLON.Material"]},{"name":"ShaderMaterial","documentation":"","type":"typeof ShaderMaterial","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"shaderPath","documentation":"","type":"any"},{"name":"options","documentation":"","type":"any"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"class","functions":[{"name":"needAlphaBlending","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"needAlphaTesting","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_checkUniform","documentation":"","type":"(uniformName: any) => any","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setTexture","documentation":"","type":"(name: string, texture: Texture) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"texture","documentation":"","type":"Texture"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"setTextureArray","documentation":"","type":"(name: string, textures: Texture[]) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"textures","documentation":"","type":"Texture[]"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"setFloat","documentation":"","type":"(name: string, value: number) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"number"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"setFloats","documentation":"","type":"(name: string, value: number[]) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"number[]"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"setColor3","documentation":"","type":"(name: string, value: Color3) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Color3"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"setColor4","documentation":"","type":"(name: string, value: Color4) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Color4"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"setVector2","documentation":"","type":"(name: string, value: Vector2) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Vector2"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"setVector3","documentation":"","type":"(name: string, value: Vector3) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Vector3"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"setVector4","documentation":"","type":"(name: string, value: Vector4) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Vector4"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"setMatrix","documentation":"","type":"(name: string, value: Matrix) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Matrix"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"setMatrix3x3","documentation":"","type":"(name: string, value: Float32Array) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Float32Array"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"setMatrix2x2","documentation":"","type":"(name: string, value: Float32Array) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Float32Array"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"","type":"(mesh?: AbstractMesh, useInstances?: boolean) => boolean","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"useInstances","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"bindOnlyWorldMatrix","documentation":"","type":"(world: Matrix) => void","functionBody":[{"parameters":[{"name":"world","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"bind","documentation":"","type":"(world: Matrix, mesh?: Mesh) => void","functionBody":[{"parameters":[{"name":"world","documentation":"","type":"Matrix"},{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(name: string) => ShaderMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean) => void","functionBody":[{"parameters":[{"name":"forceDisposeEffect","documentation":"","type":"boolean"},{"name":"forceDisposeTextures","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(source: any, scene: Scene, rootUrl: string) => ShaderMaterial","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"ShaderMaterial","documentation":""}],"entryType":"function"}],"properties":[{"name":"_shaderPath","documentation":"","type":"any","entryType":"property"},{"name":"_options","documentation":"","type":"any","entryType":"property"},{"name":"_textures","documentation":"","type":"any","entryType":"property"},{"name":"_textureArrays","documentation":"","type":"any","entryType":"property"},{"name":"_floats","documentation":"","type":"any","entryType":"property"},{"name":"_floatsArrays","documentation":"","type":"any","entryType":"property"},{"name":"_colors3","documentation":"","type":"any","entryType":"property"},{"name":"_colors4","documentation":"","type":"any","entryType":"property"},{"name":"_vectors2","documentation":"","type":"any","entryType":"property"},{"name":"_vectors3","documentation":"","type":"any","entryType":"property"},{"name":"_vectors4","documentation":"","type":"any","entryType":"property"},{"name":"_matrices","documentation":"","type":"any","entryType":"property"},{"name":"_matrices3x3","documentation":"","type":"any","entryType":"property"},{"name":"_matrices2x2","documentation":"","type":"any","entryType":"property"},{"name":"_cachedWorldViewMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_renderId","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Material"]},{"name":"StandardMaterial","documentation":"","type":"typeof StandardMaterial","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"StandardMaterial","documentation":""}],"entryType":"class","functions":[{"name":"needAlphaBlending","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"needAlphaTesting","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_shouldUseAlphaFromDiffuseTexture","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getAlphaTestTexture","documentation":"","type":"() => BaseTexture","functionBody":[{"parameters":[],"returnType":"BaseTexture","documentation":""}],"entryType":"function"},{"name":"_checkCache","documentation":"","type":"(scene: any, mesh?: any, useInstances?: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"mesh","documentation":"","type":"any"},{"name":"useInstances","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"","type":"(mesh?: AbstractMesh, useInstances?: boolean) => boolean","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"useInstances","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"unbind","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"bindOnlyWorldMatrix","documentation":"","type":"(world: Matrix) => void","functionBody":[{"parameters":[{"name":"world","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"bind","documentation":"","type":"(world: Matrix, mesh?: Mesh) => void","functionBody":[{"parameters":[{"name":"world","documentation":"","type":"Matrix"},{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getAnimatables","documentation":"","type":"() => IAnimatable[]","functionBody":[{"parameters":[],"returnType":"IAnimatable[]","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean) => void","functionBody":[{"parameters":[{"name":"forceDisposeEffect","documentation":"","type":"boolean"},{"name":"forceDisposeTextures","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(name: string) => StandardMaterial","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"StandardMaterial","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(source: any, scene: Scene, rootUrl: string) => StandardMaterial","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"StandardMaterial","documentation":""}],"entryType":"function"}],"properties":[{"name":"diffuseTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"ambientTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"opacityTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"reflectionTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"emissiveTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"specularTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"bumpTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"lightmapTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"refractionTexture","documentation":"","type":"BaseTexture","entryType":"property"},{"name":"ambientColor","documentation":"","type":"Color3","entryType":"property"},{"name":"diffuseColor","documentation":"","type":"Color3","entryType":"property"},{"name":"specularColor","documentation":"","type":"Color3","entryType":"property"},{"name":"emissiveColor","documentation":"","type":"Color3","entryType":"property"},{"name":"specularPower","documentation":"","type":"number","entryType":"property"},{"name":"useAlphaFromDiffuseTexture","documentation":"","type":"boolean","entryType":"property"},{"name":"useEmissiveAsIllumination","documentation":"","type":"boolean","entryType":"property"},{"name":"linkEmissiveWithDiffuse","documentation":"","type":"boolean","entryType":"property"},{"name":"useReflectionFresnelFromSpecular","documentation":"","type":"boolean","entryType":"property"},{"name":"useSpecularOverAlpha","documentation":"","type":"boolean","entryType":"property"},{"name":"useReflectionOverAlpha","documentation":"","type":"boolean","entryType":"property"},{"name":"disableLighting","documentation":"","type":"boolean","entryType":"property"},{"name":"useParallax","documentation":"","type":"boolean","entryType":"property"},{"name":"useParallaxOcclusion","documentation":"","type":"boolean","entryType":"property"},{"name":"parallaxScaleBias","documentation":"","type":"number","entryType":"property"},{"name":"roughness","documentation":"","type":"number","entryType":"property"},{"name":"indexOfRefraction","documentation":"","type":"number","entryType":"property"},{"name":"invertRefractionY","documentation":"","type":"boolean","entryType":"property"},{"name":"useLightmapAsShadowmap","documentation":"","type":"boolean","entryType":"property"},{"name":"diffuseFresnelParameters","documentation":"","type":"FresnelParameters","entryType":"property"},{"name":"opacityFresnelParameters","documentation":"","type":"FresnelParameters","entryType":"property"},{"name":"reflectionFresnelParameters","documentation":"","type":"FresnelParameters","entryType":"property"},{"name":"refractionFresnelParameters","documentation":"","type":"FresnelParameters","entryType":"property"},{"name":"emissiveFresnelParameters","documentation":"","type":"FresnelParameters","entryType":"property"},{"name":"useGlossinessFromSpecularMapAlpha","documentation":"","type":"boolean","entryType":"property"},{"name":"maxSimultaneousLights","documentation":"","type":"number","entryType":"property"},{"name":"invertNormalMapX","documentation":"If sets to true, x component of normal map value will invert (x = 1.0 - x).","type":"boolean","entryType":"property"},{"name":"invertNormalMapY","documentation":"If sets to true, y component of normal map value will invert (y = 1.0 - y).","type":"boolean","entryType":"property"},{"name":"cameraColorGradingTexture","documentation":"Color Grading 2D Lookup Texture.\nThis allows special effects like sepia, black and white to sixties rendering style.","type":"BaseTexture","entryType":"property"},{"name":"cameraColorCurves","documentation":"The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\nThey allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\nThese are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\ncorresponding to low luminance, medium luminance, and high luminance areas respectively.","type":"ColorCurves","entryType":"property"},{"name":"_renderTargets","documentation":"","type":"any","entryType":"property"},{"name":"_worldViewProjectionMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_globalAmbientColor","documentation":"","type":"any","entryType":"property"},{"name":"_renderId","documentation":"","type":"any","entryType":"property"},{"name":"_defines","documentation":"","type":"any","entryType":"property"},{"name":"_cachedDefines","documentation":"","type":"any","entryType":"property"},{"name":"_useLogarithmicDepth","documentation":"","type":"any","entryType":"property"},{"name":"useLogarithmicDepth","documentation":"","type":"boolean","entryType":"property"},{"name":"DiffuseTextureEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"AmbientTextureEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"OpacityTextureEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"ReflectionTextureEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"EmissiveTextureEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"SpecularTextureEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"BumpTextureEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"FresnelEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"LightmapTextureEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"RefractionTextureEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"ColorGradingTextureEnabled","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.Material"]},{"name":"SIMDHelper","documentation":"","type":"typeof SIMDHelper","constructors":[{"parameters":[],"returnType":"SIMDHelper","documentation":""}],"entryType":"class","functions":[{"name":"DisableSIMD","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"EnableSIMD","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_isEnabled","documentation":"","type":"any","entryType":"property"},{"name":"IsEnabled","documentation":"","type":"boolean","entryType":"property"}]},{"name":"MathTools","documentation":"","type":"typeof MathTools","constructors":[{"parameters":[],"returnType":"MathTools","documentation":""}],"entryType":"class","functions":[{"name":"WithinEpsilon","documentation":"","type":"(a: number, b: number, epsilon?: number) => boolean","functionBody":[{"parameters":[{"name":"a","documentation":"","type":"number"},{"name":"b","documentation":"","type":"number"},{"name":"epsilon","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"ToHex","documentation":"","type":"(i: number) => string","functionBody":[{"parameters":[{"name":"i","documentation":"","type":"number"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"Sign","documentation":"","type":"(value: number) => number","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"Clamp","documentation":"","type":"(value: number, min?: number, max?: number) => number","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"number"},{"name":"min","documentation":"","type":"number"},{"name":"max","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"Color3","documentation":"","type":"typeof Color3","constructors":[{"parameters":[{"name":"r","documentation":"","type":"number"},{"name":"g","documentation":"","type":"number"},{"name":"b","documentation":"","type":"number"}],"returnType":"Color3","documentation":""}],"entryType":"class","functions":[{"name":"toString","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getClassName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getHashCode","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"toArray","documentation":"","type":"(array: number[], index?: number) => Color3","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[]"},{"name":"index","documentation":"","type":"number"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"toColor4","documentation":"","type":"(alpha?: number) => Color4","functionBody":[{"parameters":[{"name":"alpha","documentation":"","type":"number"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"asArray","documentation":"","type":"() => number[]","functionBody":[{"parameters":[],"returnType":"number[]","documentation":""}],"entryType":"function"},{"name":"toLuminance","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"multiply","documentation":"","type":"(otherColor: Color3) => Color3","functionBody":[{"parameters":[{"name":"otherColor","documentation":"","type":"Color3"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"multiplyToRef","documentation":"","type":"(otherColor: Color3, result: Color3) => Color3","functionBody":[{"parameters":[{"name":"otherColor","documentation":"","type":"Color3"},{"name":"result","documentation":"","type":"Color3"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"equals","documentation":"","type":"(otherColor: Color3) => boolean","functionBody":[{"parameters":[{"name":"otherColor","documentation":"","type":"Color3"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"equalsFloats","documentation":"","type":"(r: number, g: number, b: number) => boolean","functionBody":[{"parameters":[{"name":"r","documentation":"","type":"number"},{"name":"g","documentation":"","type":"number"},{"name":"b","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"scale","documentation":"","type":"(scale: number) => Color3","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"scaleToRef","documentation":"","type":"(scale: number, result: Color3) => Color3","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Color3"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"add","documentation":"","type":"(otherColor: Color3) => Color3","functionBody":[{"parameters":[{"name":"otherColor","documentation":"","type":"Color3"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"addToRef","documentation":"","type":"(otherColor: Color3, result: Color3) => Color3","functionBody":[{"parameters":[{"name":"otherColor","documentation":"","type":"Color3"},{"name":"result","documentation":"","type":"Color3"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"subtract","documentation":"","type":"(otherColor: Color3) => Color3","functionBody":[{"parameters":[{"name":"otherColor","documentation":"","type":"Color3"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"subtractToRef","documentation":"","type":"(otherColor: Color3, result: Color3) => Color3","functionBody":[{"parameters":[{"name":"otherColor","documentation":"","type":"Color3"},{"name":"result","documentation":"","type":"Color3"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => Color3","functionBody":[{"parameters":[],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"copyFrom","documentation":"","type":"(source: Color3) => Color3","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"Color3"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"copyFromFloats","documentation":"","type":"(r: number, g: number, b: number) => Color3","functionBody":[{"parameters":[{"name":"r","documentation":"","type":"number"},{"name":"g","documentation":"","type":"number"},{"name":"b","documentation":"","type":"number"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"toHexString","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"toLinearSpace","documentation":"","type":"() => Color3","functionBody":[{"parameters":[],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"toLinearSpaceToRef","documentation":"","type":"(convertedColor: Color3) => Color3","functionBody":[{"parameters":[{"name":"convertedColor","documentation":"","type":"Color3"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"toGammaSpace","documentation":"","type":"() => Color3","functionBody":[{"parameters":[],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"toGammaSpaceToRef","documentation":"","type":"(convertedColor: Color3) => Color3","functionBody":[{"parameters":[{"name":"convertedColor","documentation":"","type":"Color3"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"FromHexString","documentation":"","type":"(hex: string) => Color3","functionBody":[{"parameters":[{"name":"hex","documentation":"","type":"string"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"FromArray","documentation":"","type":"(array: number[], offset?: number) => Color3","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[]"},{"name":"offset","documentation":"","type":"number"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"FromInts","documentation":"","type":"(r: number, g: number, b: number) => Color3","functionBody":[{"parameters":[{"name":"r","documentation":"","type":"number"},{"name":"g","documentation":"","type":"number"},{"name":"b","documentation":"","type":"number"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"Lerp","documentation":"","type":"(start: Color3, end: Color3, amount: number) => Color3","functionBody":[{"parameters":[{"name":"start","documentation":"","type":"Color3"},{"name":"end","documentation":"","type":"Color3"},{"name":"amount","documentation":"","type":"number"}],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"Red","documentation":"","type":"() => Color3","functionBody":[{"parameters":[],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"Green","documentation":"","type":"() => Color3","functionBody":[{"parameters":[],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"Blue","documentation":"","type":"() => Color3","functionBody":[{"parameters":[],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"Black","documentation":"","type":"() => Color3","functionBody":[{"parameters":[],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"White","documentation":"","type":"() => Color3","functionBody":[{"parameters":[],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"Purple","documentation":"","type":"() => Color3","functionBody":[{"parameters":[],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"Magenta","documentation":"","type":"() => Color3","functionBody":[{"parameters":[],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"Yellow","documentation":"","type":"() => Color3","functionBody":[{"parameters":[],"returnType":"Color3","documentation":""}],"entryType":"function"},{"name":"Gray","documentation":"","type":"() => Color3","functionBody":[{"parameters":[],"returnType":"Color3","documentation":""}],"entryType":"function"}],"properties":[{"name":"r","documentation":"","type":"number","entryType":"property"},{"name":"g","documentation":"","type":"number","entryType":"property"},{"name":"b","documentation":"","type":"number","entryType":"property"}]},{"name":"Color4","documentation":"","type":"typeof Color4","constructors":[{"parameters":[{"name":"r","documentation":"","type":"number"},{"name":"g","documentation":"","type":"number"},{"name":"b","documentation":"","type":"number"},{"name":"a","documentation":"","type":"number"}],"returnType":"Color4","documentation":""}],"entryType":"class","functions":[{"name":"addInPlace","documentation":"","type":"(right: any) => Color4","functionBody":[{"parameters":[{"name":"right","documentation":"","type":"any"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"asArray","documentation":"","type":"() => number[]","functionBody":[{"parameters":[],"returnType":"number[]","documentation":""}],"entryType":"function"},{"name":"toArray","documentation":"","type":"(array: number[], index?: number) => Color4","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[]"},{"name":"index","documentation":"","type":"number"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"add","documentation":"","type":"(right: Color4) => Color4","functionBody":[{"parameters":[{"name":"right","documentation":"","type":"Color4"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"subtract","documentation":"","type":"(right: Color4) => Color4","functionBody":[{"parameters":[{"name":"right","documentation":"","type":"Color4"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"subtractToRef","documentation":"","type":"(right: Color4, result: Color4) => Color4","functionBody":[{"parameters":[{"name":"right","documentation":"","type":"Color4"},{"name":"result","documentation":"","type":"Color4"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"scale","documentation":"","type":"(scale: number) => Color4","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"scaleToRef","documentation":"","type":"(scale: number, result: Color4) => Color4","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Color4"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"multiply","documentation":"Multipy an RGBA Color4 value by another and return a new Color4 object\n@returns A new Color4.","type":"(color: Color4) => Color4","functionBody":[{"parameters":[{"name":"color","documentation":"The Color4 (RGBA) value to multiply by","type":"Color4"}],"returnType":"Color4","documentation":"Multipy an RGBA Color4 value by another and return a new Color4 object\n@returns A new Color4."}],"entryType":"function"},{"name":"multiplyToRef","documentation":"Multipy an RGBA Color4 value by another and push the result in a reference value\n@returns the result Color4.","type":"(color: Color4, result: Color4) => Color4","functionBody":[{"parameters":[{"name":"color","documentation":"The Color4 (RGBA) value to multiply by","type":"Color4"},{"name":"result","documentation":"The Color4 (RGBA) to fill the result in","type":"Color4"}],"returnType":"Color4","documentation":"Multipy an RGBA Color4 value by another and push the result in a reference value\n@returns the result Color4."}],"entryType":"function"},{"name":"toString","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getClassName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getHashCode","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => Color4","functionBody":[{"parameters":[],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"copyFrom","documentation":"","type":"(source: Color4) => Color4","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"Color4"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"toHexString","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"FromHexString","documentation":"","type":"(hex: string) => Color4","functionBody":[{"parameters":[{"name":"hex","documentation":"","type":"string"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"Lerp","documentation":"","type":"(left: Color4, right: Color4, amount: number) => Color4","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Color4"},{"name":"right","documentation":"","type":"Color4"},{"name":"amount","documentation":"","type":"number"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"LerpToRef","documentation":"","type":"(left: Color4, right: Color4, amount: number, result: Color4) => void","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Color4"},{"name":"right","documentation":"","type":"Color4"},{"name":"amount","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Color4"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"FromArray","documentation":"","type":"(array: number[], offset?: number) => Color4","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[]"},{"name":"offset","documentation":"","type":"number"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"FromInts","documentation":"","type":"(r: number, g: number, b: number, a: number) => Color4","functionBody":[{"parameters":[{"name":"r","documentation":"","type":"number"},{"name":"g","documentation":"","type":"number"},{"name":"b","documentation":"","type":"number"},{"name":"a","documentation":"","type":"number"}],"returnType":"Color4","documentation":""}],"entryType":"function"},{"name":"CheckColors4","documentation":"","type":"(colors: number[], count: number) => number[]","functionBody":[{"parameters":[{"name":"colors","documentation":"","type":"number[]"},{"name":"count","documentation":"","type":"number"}],"returnType":"number[]","documentation":""}],"entryType":"function"}],"properties":[{"name":"r","documentation":"","type":"number","entryType":"property"},{"name":"g","documentation":"","type":"number","entryType":"property"},{"name":"b","documentation":"","type":"number","entryType":"property"},{"name":"a","documentation":"","type":"number","entryType":"property"}]},{"name":"Vector2","documentation":"","type":"typeof Vector2","constructors":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"}],"returnType":"Vector2","documentation":""}],"entryType":"class","functions":[{"name":"toString","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getClassName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getHashCode","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"toArray","documentation":"","type":"(array: number[] | Float32Array, index?: number) => Vector2","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[] | Float32Array"},{"name":"index","documentation":"","type":"number"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"asArray","documentation":"","type":"() => number[]","functionBody":[{"parameters":[],"returnType":"number[]","documentation":""}],"entryType":"function"},{"name":"copyFrom","documentation":"","type":"(source: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"copyFromFloats","documentation":"","type":"(x: number, y: number) => Vector2","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"add","documentation":"","type":"(otherVector: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"addToRef","documentation":"","type":"(otherVector: Vector2, result: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"},{"name":"result","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"addInPlace","documentation":"","type":"(otherVector: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"addVector3","documentation":"","type":"(otherVector: Vector3) => Vector2","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"subtract","documentation":"","type":"(otherVector: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"subtractToRef","documentation":"","type":"(otherVector: Vector2, result: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"},{"name":"result","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"subtractInPlace","documentation":"","type":"(otherVector: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"multiplyInPlace","documentation":"","type":"(otherVector: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"multiply","documentation":"","type":"(otherVector: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"multiplyToRef","documentation":"","type":"(otherVector: Vector2, result: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"},{"name":"result","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"multiplyByFloats","documentation":"","type":"(x: number, y: number) => Vector2","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"divide","documentation":"","type":"(otherVector: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"divideToRef","documentation":"","type":"(otherVector: Vector2, result: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"},{"name":"result","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"negate","documentation":"","type":"() => Vector2","functionBody":[{"parameters":[],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"scaleInPlace","documentation":"","type":"(scale: number) => Vector2","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"scale","documentation":"","type":"(scale: number) => Vector2","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"equals","documentation":"","type":"(otherVector: Vector2) => boolean","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"equalsWithEpsilon","documentation":"","type":"(otherVector: Vector2, epsilon?: number) => boolean","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector2"},{"name":"epsilon","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"length","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"lengthSquared","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"normalize","documentation":"","type":"() => Vector2","functionBody":[{"parameters":[],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => Vector2","functionBody":[{"parameters":[],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"Zero","documentation":"","type":"() => Vector2","functionBody":[{"parameters":[],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"FromArray","documentation":"","type":"(array: number[] | Float32Array, offset?: number) => Vector2","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[] | Float32Array"},{"name":"offset","documentation":"","type":"number"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"FromArrayToRef","documentation":"","type":"(array: number[] | Float32Array, offset: number, result: Vector2) => void","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[] | Float32Array"},{"name":"offset","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Vector2"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"CatmullRom","documentation":"","type":"(value1: Vector2, value2: Vector2, value3: Vector2, value4: Vector2, amount: number) => Vector2","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector2"},{"name":"value2","documentation":"","type":"Vector2"},{"name":"value3","documentation":"","type":"Vector2"},{"name":"value4","documentation":"","type":"Vector2"},{"name":"amount","documentation":"","type":"number"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"Clamp","documentation":"","type":"(value: Vector2, min: Vector2, max: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"Vector2"},{"name":"min","documentation":"","type":"Vector2"},{"name":"max","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"Hermite","documentation":"","type":"(value1: Vector2, tangent1: Vector2, value2: Vector2, tangent2: Vector2, amount: number) => Vector2","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector2"},{"name":"tangent1","documentation":"","type":"Vector2"},{"name":"value2","documentation":"","type":"Vector2"},{"name":"tangent2","documentation":"","type":"Vector2"},{"name":"amount","documentation":"","type":"number"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"Lerp","documentation":"","type":"(start: Vector2, end: Vector2, amount: number) => Vector2","functionBody":[{"parameters":[{"name":"start","documentation":"","type":"Vector2"},{"name":"end","documentation":"","type":"Vector2"},{"name":"amount","documentation":"","type":"number"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"Dot","documentation":"","type":"(left: Vector2, right: Vector2) => number","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Vector2"},{"name":"right","documentation":"","type":"Vector2"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"Normalize","documentation":"","type":"(vector: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"vector","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"Minimize","documentation":"","type":"(left: Vector2, right: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Vector2"},{"name":"right","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"Maximize","documentation":"","type":"(left: Vector2, right: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Vector2"},{"name":"right","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"Transform","documentation":"","type":"(vector: Vector2, transformation: Matrix) => Vector2","functionBody":[{"parameters":[{"name":"vector","documentation":"","type":"Vector2"},{"name":"transformation","documentation":"","type":"Matrix"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"TransformToRef","documentation":"","type":"(vector: Vector2, transformation: Matrix, result: Vector2) => void","functionBody":[{"parameters":[{"name":"vector","documentation":"","type":"Vector2"},{"name":"transformation","documentation":"","type":"Matrix"},{"name":"result","documentation":"","type":"Vector2"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"PointInTriangle","documentation":"","type":"(p: Vector2, p0: Vector2, p1: Vector2, p2: Vector2) => boolean","functionBody":[{"parameters":[{"name":"p","documentation":"","type":"Vector2"},{"name":"p0","documentation":"","type":"Vector2"},{"name":"p1","documentation":"","type":"Vector2"},{"name":"p2","documentation":"","type":"Vector2"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"Distance","documentation":"","type":"(value1: Vector2, value2: Vector2) => number","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector2"},{"name":"value2","documentation":"","type":"Vector2"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"DistanceSquared","documentation":"","type":"(value1: Vector2, value2: Vector2) => number","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector2"},{"name":"value2","documentation":"","type":"Vector2"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"Center","documentation":"","type":"(value1: Vector2, value2: Vector2) => Vector2","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector2"},{"name":"value2","documentation":"","type":"Vector2"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"DistanceOfPointFromSegment","documentation":"","type":"(p: Vector2, segA: Vector2, segB: Vector2) => number","functionBody":[{"parameters":[{"name":"p","documentation":"","type":"Vector2"},{"name":"segA","documentation":"","type":"Vector2"},{"name":"segB","documentation":"","type":"Vector2"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"x","documentation":"","type":"number","entryType":"property"},{"name":"y","documentation":"","type":"number","entryType":"property"}]},{"name":"Vector3","documentation":"","type":"typeof Vector3","constructors":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"class","functions":[{"name":"toString","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getClassName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getHashCode","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"asArray","documentation":"","type":"() => number[]","functionBody":[{"parameters":[],"returnType":"number[]","documentation":""}],"entryType":"function"},{"name":"toArray","documentation":"","type":"(array: number[] | Float32Array, index?: number) => Vector3","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[] | Float32Array"},{"name":"index","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"toQuaternion","documentation":"","type":"() => Quaternion","functionBody":[{"parameters":[],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"addInPlace","documentation":"","type":"(otherVector: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"add","documentation":"","type":"(otherVector: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"addToRef","documentation":"","type":"(otherVector: Vector3, result: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"subtractInPlace","documentation":"","type":"(otherVector: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"subtract","documentation":"","type":"(otherVector: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"subtractToRef","documentation":"","type":"(otherVector: Vector3, result: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"subtractFromFloats","documentation":"","type":"(x: number, y: number, z: number) => Vector3","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"subtractFromFloatsToRef","documentation":"","type":"(x: number, y: number, z: number, result: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"negate","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"scaleInPlace","documentation":"","type":"(scale: number) => Vector3","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"scale","documentation":"","type":"(scale: number) => Vector3","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"scaleToRef","documentation":"","type":"(scale: number, result: Vector3) => void","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"equals","documentation":"","type":"(otherVector: Vector3) => boolean","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"equalsWithEpsilon","documentation":"","type":"(otherVector: Vector3, epsilon?: number) => boolean","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"},{"name":"epsilon","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"equalsToFloats","documentation":"","type":"(x: number, y: number, z: number) => boolean","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"multiplyInPlace","documentation":"","type":"(otherVector: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"multiply","documentation":"","type":"(otherVector: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"multiplyToRef","documentation":"","type":"(otherVector: Vector3, result: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"multiplyByFloats","documentation":"","type":"(x: number, y: number, z: number) => Vector3","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"divide","documentation":"","type":"(otherVector: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"divideToRef","documentation":"","type":"(otherVector: Vector3, result: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector3"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"MinimizeInPlace","documentation":"","type":"(other: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"MaximizeInPlace","documentation":"","type":"(other: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"length","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"lengthSquared","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"normalize","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"copyFrom","documentation":"","type":"(source: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"copyFromFloats","documentation":"","type":"(x: number, y: number, z: number) => Vector3","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"GetClipFactor","documentation":"","type":"(vector0: Vector3, vector1: Vector3, axis: Vector3, size: any) => number","functionBody":[{"parameters":[{"name":"vector0","documentation":"","type":"Vector3"},{"name":"vector1","documentation":"","type":"Vector3"},{"name":"axis","documentation":"","type":"Vector3"},{"name":"size","documentation":"","type":"any"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"FromArray","documentation":"","type":"(array: number[] | Float32Array, offset?: number) => Vector3","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[] | Float32Array"},{"name":"offset","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"FromFloatArray","documentation":"","type":"(array: Float32Array, offset?: number) => Vector3","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"Float32Array"},{"name":"offset","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"FromArrayToRef","documentation":"","type":"(array: number[] | Float32Array, offset: number, result: Vector3) => void","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[] | Float32Array"},{"name":"offset","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"FromFloatArrayToRef","documentation":"","type":"(array: Float32Array, offset: number, result: Vector3) => void","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"Float32Array"},{"name":"offset","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"FromFloatsToRef","documentation":"","type":"(x: number, y: number, z: number, result: Vector3) => void","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Zero","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"Up","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"TransformCoordinates","documentation":"","type":"(vector: Vector3, transformation: Matrix) => Vector3","functionBody":[{"parameters":[{"name":"vector","documentation":"","type":"Vector3"},{"name":"transformation","documentation":"","type":"Matrix"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"TransformCoordinatesToRef","documentation":"","type":"(vector: Vector3, transformation: Matrix, result: Vector3) => void","functionBody":[{"parameters":[{"name":"vector","documentation":"","type":"Vector3"},{"name":"transformation","documentation":"","type":"Matrix"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"TransformCoordinatesFromFloatsToRef","documentation":"","type":"(x: number, y: number, z: number, transformation: Matrix, result: Vector3) => void","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"transformation","documentation":"","type":"Matrix"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"TransformNormal","documentation":"","type":"(vector: Vector3, transformation: Matrix) => Vector3","functionBody":[{"parameters":[{"name":"vector","documentation":"","type":"Vector3"},{"name":"transformation","documentation":"","type":"Matrix"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"TransformNormalToRef","documentation":"","type":"(vector: Vector3, transformation: Matrix, result: Vector3) => void","functionBody":[{"parameters":[{"name":"vector","documentation":"","type":"Vector3"},{"name":"transformation","documentation":"","type":"Matrix"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"TransformNormalFromFloatsToRef","documentation":"","type":"(x: number, y: number, z: number, transformation: Matrix, result: Vector3) => void","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"transformation","documentation":"","type":"Matrix"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"CatmullRom","documentation":"","type":"(value1: Vector3, value2: Vector3, value3: Vector3, value4: Vector3, amount: number) => Vector3","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector3"},{"name":"value2","documentation":"","type":"Vector3"},{"name":"value3","documentation":"","type":"Vector3"},{"name":"value4","documentation":"","type":"Vector3"},{"name":"amount","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"Clamp","documentation":"","type":"(value: Vector3, min: Vector3, max: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"Vector3"},{"name":"min","documentation":"","type":"Vector3"},{"name":"max","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"Hermite","documentation":"","type":"(value1: Vector3, tangent1: Vector3, value2: Vector3, tangent2: Vector3, amount: number) => Vector3","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector3"},{"name":"tangent1","documentation":"","type":"Vector3"},{"name":"value2","documentation":"","type":"Vector3"},{"name":"tangent2","documentation":"","type":"Vector3"},{"name":"amount","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"Lerp","documentation":"","type":"(start: Vector3, end: Vector3, amount: number) => Vector3","functionBody":[{"parameters":[{"name":"start","documentation":"","type":"Vector3"},{"name":"end","documentation":"","type":"Vector3"},{"name":"amount","documentation":"","type":"number"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"Dot","documentation":"","type":"(left: Vector3, right: Vector3) => number","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Vector3"},{"name":"right","documentation":"","type":"Vector3"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"Cross","documentation":"","type":"(left: Vector3, right: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Vector3"},{"name":"right","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"CrossToRef","documentation":"","type":"(left: Vector3, right: Vector3, result: Vector3) => void","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Vector3"},{"name":"right","documentation":"","type":"Vector3"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Normalize","documentation":"","type":"(vector: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"vector","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"NormalizeToRef","documentation":"","type":"(vector: Vector3, result: Vector3) => void","functionBody":[{"parameters":[{"name":"vector","documentation":"","type":"Vector3"},{"name":"result","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Project","documentation":"","type":"(vector: Vector3, world: Matrix, transform: Matrix, viewport: Viewport) => Vector3","functionBody":[{"parameters":[{"name":"vector","documentation":"","type":"Vector3"},{"name":"world","documentation":"","type":"Matrix"},{"name":"transform","documentation":"","type":"Matrix"},{"name":"viewport","documentation":"","type":"Viewport"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"UnprojectFromTransform","documentation":"","type":"(source: Vector3, viewportWidth: number, viewportHeight: number, world: Matrix, transform: Matrix...","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"Vector3"},{"name":"viewportWidth","documentation":"","type":"number"},{"name":"viewportHeight","documentation":"","type":"number"},{"name":"world","documentation":"","type":"Matrix"},{"name":"transform","documentation":"","type":"Matrix"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"Unproject","documentation":"","type":"(source: Vector3, viewportWidth: number, viewportHeight: number, world: Matrix, view: Matrix, pro...","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"Vector3"},{"name":"viewportWidth","documentation":"","type":"number"},{"name":"viewportHeight","documentation":"","type":"number"},{"name":"world","documentation":"","type":"Matrix"},{"name":"view","documentation":"","type":"Matrix"},{"name":"projection","documentation":"","type":"Matrix"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"Minimize","documentation":"","type":"(left: Vector3, right: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Vector3"},{"name":"right","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"Maximize","documentation":"","type":"(left: Vector3, right: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Vector3"},{"name":"right","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"Distance","documentation":"","type":"(value1: Vector3, value2: Vector3) => number","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector3"},{"name":"value2","documentation":"","type":"Vector3"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"DistanceSquared","documentation":"","type":"(value1: Vector3, value2: Vector3) => number","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector3"},{"name":"value2","documentation":"","type":"Vector3"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"Center","documentation":"","type":"(value1: Vector3, value2: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector3"},{"name":"value2","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"RotationFromAxis","documentation":"Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\nRotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\nto something in order to rotate it from its local system to the given target system.","type":"(axis1: Vector3, axis2: Vector3, axis3: Vector3) => Vector3","functionBody":[{"parameters":[{"name":"axis1","documentation":"","type":"Vector3"},{"name":"axis2","documentation":"","type":"Vector3"},{"name":"axis3","documentation":"","type":"Vector3"}],"returnType":"Vector3","documentation":"Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\nRotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\nto something in order to rotate it from its local system to the given target system."}],"entryType":"function"},{"name":"RotationFromAxisToRef","documentation":"The same than RotationFromAxis but updates the passed ref Vector3 parameter.","type":"(axis1: Vector3, axis2: Vector3, axis3: Vector3, ref: Vector3) => void","functionBody":[{"parameters":[{"name":"axis1","documentation":"","type":"Vector3"},{"name":"axis2","documentation":"","type":"Vector3"},{"name":"axis3","documentation":"","type":"Vector3"},{"name":"ref","documentation":"","type":"Vector3"}],"returnType":"void","documentation":"The same than RotationFromAxis but updates the passed ref Vector3 parameter."}],"entryType":"function"}],"properties":[{"name":"x","documentation":"","type":"number","entryType":"property"},{"name":"y","documentation":"","type":"number","entryType":"property"},{"name":"z","documentation":"","type":"number","entryType":"property"},{"name":"_viewportMatrixCache","documentation":"","type":"any","entryType":"property"},{"name":"_matrixCache","documentation":"","type":"any","entryType":"property"}]},{"name":"Vector4","documentation":"","type":"typeof Vector4","constructors":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"w","documentation":"","type":"number"}],"returnType":"Vector4","documentation":""}],"entryType":"class","functions":[{"name":"toString","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getClassName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getHashCode","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"asArray","documentation":"","type":"() => number[]","functionBody":[{"parameters":[],"returnType":"number[]","documentation":""}],"entryType":"function"},{"name":"toArray","documentation":"","type":"(array: number[], index?: number) => Vector4","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[]"},{"name":"index","documentation":"","type":"number"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"addInPlace","documentation":"","type":"(otherVector: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"add","documentation":"","type":"(otherVector: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"addToRef","documentation":"","type":"(otherVector: Vector4, result: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"},{"name":"result","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"subtractInPlace","documentation":"","type":"(otherVector: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"subtract","documentation":"","type":"(otherVector: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"subtractToRef","documentation":"","type":"(otherVector: Vector4, result: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"},{"name":"result","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"subtractFromFloats","documentation":"","type":"(x: number, y: number, z: number, w: number) => Vector4","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"w","documentation":"","type":"number"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"subtractFromFloatsToRef","documentation":"","type":"(x: number, y: number, z: number, w: number, result: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"w","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"negate","documentation":"","type":"() => Vector4","functionBody":[{"parameters":[],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"scaleInPlace","documentation":"","type":"(scale: number) => Vector4","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"scale","documentation":"","type":"(scale: number) => Vector4","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"scaleToRef","documentation":"","type":"(scale: number, result: Vector4) => void","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Vector4"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"equals","documentation":"","type":"(otherVector: Vector4) => boolean","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"equalsWithEpsilon","documentation":"","type":"(otherVector: Vector4, epsilon?: number) => boolean","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"},{"name":"epsilon","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"equalsToFloats","documentation":"","type":"(x: number, y: number, z: number, w: number) => boolean","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"w","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"multiplyInPlace","documentation":"","type":"(otherVector: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"multiply","documentation":"","type":"(otherVector: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"multiplyToRef","documentation":"","type":"(otherVector: Vector4, result: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"},{"name":"result","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"multiplyByFloats","documentation":"","type":"(x: number, y: number, z: number, w: number) => Vector4","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"w","documentation":"","type":"number"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"divide","documentation":"","type":"(otherVector: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"divideToRef","documentation":"","type":"(otherVector: Vector4, result: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"otherVector","documentation":"","type":"Vector4"},{"name":"result","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"MinimizeInPlace","documentation":"","type":"(other: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"MaximizeInPlace","documentation":"","type":"(other: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"length","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"lengthSquared","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"normalize","documentation":"","type":"() => Vector4","functionBody":[{"parameters":[],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"toVector3","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => Vector4","functionBody":[{"parameters":[],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"copyFrom","documentation":"","type":"(source: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"copyFromFloats","documentation":"","type":"(x: number, y: number, z: number, w: number) => Vector4","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"w","documentation":"","type":"number"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"FromArray","documentation":"","type":"(array: number[], offset?: number) => Vector4","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[]"},{"name":"offset","documentation":"","type":"number"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"FromArrayToRef","documentation":"","type":"(array: number[], offset: number, result: Vector4) => void","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[]"},{"name":"offset","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Vector4"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"FromFloatArrayToRef","documentation":"","type":"(array: Float32Array, offset: number, result: Vector4) => void","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"Float32Array"},{"name":"offset","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Vector4"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"FromFloatsToRef","documentation":"","type":"(x: number, y: number, z: number, w: number, result: Vector4) => void","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"w","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Vector4"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Zero","documentation":"","type":"() => Vector4","functionBody":[{"parameters":[],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"Normalize","documentation":"","type":"(vector: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"vector","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"NormalizeToRef","documentation":"","type":"(vector: Vector4, result: Vector4) => void","functionBody":[{"parameters":[{"name":"vector","documentation":"","type":"Vector4"},{"name":"result","documentation":"","type":"Vector4"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Minimize","documentation":"","type":"(left: Vector4, right: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Vector4"},{"name":"right","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"Maximize","documentation":"","type":"(left: Vector4, right: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Vector4"},{"name":"right","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"Distance","documentation":"","type":"(value1: Vector4, value2: Vector4) => number","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector4"},{"name":"value2","documentation":"","type":"Vector4"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"DistanceSquared","documentation":"","type":"(value1: Vector4, value2: Vector4) => number","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector4"},{"name":"value2","documentation":"","type":"Vector4"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"Center","documentation":"","type":"(value1: Vector4, value2: Vector4) => Vector4","functionBody":[{"parameters":[{"name":"value1","documentation":"","type":"Vector4"},{"name":"value2","documentation":"","type":"Vector4"}],"returnType":"Vector4","documentation":""}],"entryType":"function"}],"properties":[{"name":"x","documentation":"","type":"number","entryType":"property"},{"name":"y","documentation":"","type":"number","entryType":"property"},{"name":"z","documentation":"","type":"number","entryType":"property"},{"name":"w","documentation":"","type":"number","entryType":"property"}]},{"name":"Size","documentation":"","type":"typeof Size","constructors":[{"parameters":[{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"}],"returnType":"Size","documentation":""}],"entryType":"class","functions":[{"name":"toString","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getClassName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getHashCode","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"copyFrom","documentation":"","type":"(src: Size) => void","functionBody":[{"parameters":[{"name":"src","documentation":"","type":"Size"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"copyFromFloats","documentation":"","type":"(width: number, height: number) => void","functionBody":[{"parameters":[{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"multiplyByFloats","documentation":"","type":"(w: number, h: number) => Size","functionBody":[{"parameters":[{"name":"w","documentation":"","type":"number"},{"name":"h","documentation":"","type":"number"}],"returnType":"Size","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => Size","functionBody":[{"parameters":[],"returnType":"Size","documentation":""}],"entryType":"function"},{"name":"equals","documentation":"","type":"(other: Size) => boolean","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Size"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"Zero","documentation":"","type":"() => Size","functionBody":[{"parameters":[],"returnType":"Size","documentation":""}],"entryType":"function"},{"name":"add","documentation":"","type":"(otherSize: Size) => Size","functionBody":[{"parameters":[{"name":"otherSize","documentation":"","type":"Size"}],"returnType":"Size","documentation":""}],"entryType":"function"},{"name":"substract","documentation":"","type":"(otherSize: Size) => Size","functionBody":[{"parameters":[{"name":"otherSize","documentation":"","type":"Size"}],"returnType":"Size","documentation":""}],"entryType":"function"},{"name":"Lerp","documentation":"","type":"(start: Size, end: Size, amount: number) => Size","functionBody":[{"parameters":[{"name":"start","documentation":"","type":"Size"},{"name":"end","documentation":"","type":"Size"},{"name":"amount","documentation":"","type":"number"}],"returnType":"Size","documentation":""}],"entryType":"function"}],"properties":[{"name":"width","documentation":"","type":"number","entryType":"property"},{"name":"height","documentation":"","type":"number","entryType":"property"},{"name":"surface","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.ISize"]},{"name":"Quaternion","documentation":"","type":"typeof Quaternion","constructors":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"w","documentation":"","type":"number"}],"returnType":"Quaternion","documentation":""}],"entryType":"class","functions":[{"name":"toString","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getClassName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getHashCode","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"asArray","documentation":"","type":"() => number[]","functionBody":[{"parameters":[],"returnType":"number[]","documentation":""}],"entryType":"function"},{"name":"equals","documentation":"","type":"(otherQuaternion: Quaternion) => boolean","functionBody":[{"parameters":[{"name":"otherQuaternion","documentation":"","type":"Quaternion"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => Quaternion","functionBody":[{"parameters":[],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"copyFrom","documentation":"","type":"(other: Quaternion) => Quaternion","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Quaternion"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"copyFromFloats","documentation":"","type":"(x: number, y: number, z: number, w: number) => Quaternion","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"w","documentation":"","type":"number"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"add","documentation":"","type":"(other: Quaternion) => Quaternion","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Quaternion"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"subtract","documentation":"","type":"(other: Quaternion) => Quaternion","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Quaternion"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"scale","documentation":"","type":"(value: number) => Quaternion","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"number"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"multiply","documentation":"","type":"(q1: Quaternion) => Quaternion","functionBody":[{"parameters":[{"name":"q1","documentation":"","type":"Quaternion"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"multiplyToRef","documentation":"","type":"(q1: Quaternion, result: Quaternion) => Quaternion","functionBody":[{"parameters":[{"name":"q1","documentation":"","type":"Quaternion"},{"name":"result","documentation":"","type":"Quaternion"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"multiplyInPlace","documentation":"","type":"(q1: Quaternion) => Quaternion","functionBody":[{"parameters":[{"name":"q1","documentation":"","type":"Quaternion"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"conjugateToRef","documentation":"","type":"(ref: Quaternion) => Quaternion","functionBody":[{"parameters":[{"name":"ref","documentation":"","type":"Quaternion"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"conjugateInPlace","documentation":"","type":"() => Quaternion","functionBody":[{"parameters":[],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"conjugate","documentation":"","type":"() => Quaternion","functionBody":[{"parameters":[],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"length","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"normalize","documentation":"","type":"() => Quaternion","functionBody":[{"parameters":[],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"toEulerAngles","documentation":"","type":"(order?: string) => Vector3","functionBody":[{"parameters":[{"name":"order","documentation":"","type":"string"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"toEulerAnglesToRef","documentation":"","type":"(result: Vector3, order?: string) => Quaternion","functionBody":[{"parameters":[{"name":"result","documentation":"","type":"Vector3"},{"name":"order","documentation":"","type":"string"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"toRotationMatrix","documentation":"","type":"(result: Matrix) => Quaternion","functionBody":[{"parameters":[{"name":"result","documentation":"","type":"Matrix"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"fromRotationMatrix","documentation":"","type":"(matrix: Matrix) => Quaternion","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"FromRotationMatrix","documentation":"","type":"(matrix: Matrix) => Quaternion","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"FromRotationMatrixToRef","documentation":"","type":"(matrix: Matrix, result: Quaternion) => void","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"},{"name":"result","documentation":"","type":"Quaternion"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Inverse","documentation":"","type":"(q: Quaternion) => Quaternion","functionBody":[{"parameters":[{"name":"q","documentation":"","type":"Quaternion"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"Identity","documentation":"","type":"() => Quaternion","functionBody":[{"parameters":[],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"RotationAxis","documentation":"","type":"(axis: Vector3, angle: number) => Quaternion","functionBody":[{"parameters":[{"name":"axis","documentation":"","type":"Vector3"},{"name":"angle","documentation":"","type":"number"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"RotationAxisToRef","documentation":"","type":"(axis: Vector3, angle: number, result: Quaternion) => Quaternion","functionBody":[{"parameters":[{"name":"axis","documentation":"","type":"Vector3"},{"name":"angle","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Quaternion"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"FromArray","documentation":"","type":"(array: number[], offset?: number) => Quaternion","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[]"},{"name":"offset","documentation":"","type":"number"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"RotationYawPitchRoll","documentation":"","type":"(yaw: number, pitch: number, roll: number) => Quaternion","functionBody":[{"parameters":[{"name":"yaw","documentation":"","type":"number"},{"name":"pitch","documentation":"","type":"number"},{"name":"roll","documentation":"","type":"number"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"RotationYawPitchRollToRef","documentation":"","type":"(yaw: number, pitch: number, roll: number, result: Quaternion) => void","functionBody":[{"parameters":[{"name":"yaw","documentation":"","type":"number"},{"name":"pitch","documentation":"","type":"number"},{"name":"roll","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Quaternion"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"RotationAlphaBetaGamma","documentation":"","type":"(alpha: number, beta: number, gamma: number) => Quaternion","functionBody":[{"parameters":[{"name":"alpha","documentation":"","type":"number"},{"name":"beta","documentation":"","type":"number"},{"name":"gamma","documentation":"","type":"number"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"},{"name":"RotationAlphaBetaGammaToRef","documentation":"","type":"(alpha: number, beta: number, gamma: number, result: Quaternion) => void","functionBody":[{"parameters":[{"name":"alpha","documentation":"","type":"number"},{"name":"beta","documentation":"","type":"number"},{"name":"gamma","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Quaternion"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Slerp","documentation":"","type":"(left: Quaternion, right: Quaternion, amount: number) => Quaternion","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"Quaternion"},{"name":"right","documentation":"","type":"Quaternion"},{"name":"amount","documentation":"","type":"number"}],"returnType":"Quaternion","documentation":""}],"entryType":"function"}],"properties":[{"name":"x","documentation":"","type":"number","entryType":"property"},{"name":"y","documentation":"","type":"number","entryType":"property"},{"name":"z","documentation":"","type":"number","entryType":"property"},{"name":"w","documentation":"","type":"number","entryType":"property"}]},{"name":"Matrix","documentation":"","type":"typeof Matrix","constructors":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"class","functions":[{"name":"isIdentity","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"determinant","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"toArray","documentation":"","type":"() => Float32Array","functionBody":[{"parameters":[],"returnType":"Float32Array","documentation":""}],"entryType":"function"},{"name":"asArray","documentation":"","type":"() => Float32Array","functionBody":[{"parameters":[],"returnType":"Float32Array","documentation":""}],"entryType":"function"},{"name":"invert","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"reset","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"add","documentation":"","type":"(other: Matrix) => Matrix","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Matrix"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"addToRef","documentation":"","type":"(other: Matrix, result: Matrix) => Matrix","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Matrix"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"addToSelf","documentation":"","type":"(other: Matrix) => Matrix","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Matrix"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"invertToRef","documentation":"","type":"(other: Matrix) => Matrix","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Matrix"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"setTranslation","documentation":"","type":"(vector3: Vector3) => Matrix","functionBody":[{"parameters":[{"name":"vector3","documentation":"","type":"Vector3"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getTranslation","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"multiply","documentation":"","type":"(other: Matrix) => Matrix","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Matrix"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"copyFrom","documentation":"","type":"(other: Matrix) => Matrix","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Matrix"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"copyToArray","documentation":"","type":"(array: Float32Array, offset?: number) => Matrix","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"Float32Array"},{"name":"offset","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"multiplyToRef","documentation":"","type":"(other: Matrix, result: Matrix) => Matrix","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Matrix"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"multiplyToArray","documentation":"","type":"(other: Matrix, result: Float32Array, offset: number) => Matrix","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Matrix"},{"name":"result","documentation":"","type":"Float32Array"},{"name":"offset","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"equals","documentation":"","type":"(value: Matrix) => boolean","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"Matrix"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getClassName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getHashCode","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"decompose","documentation":"","type":"(scale: Vector3, rotation: Quaternion, translation: Vector3) => boolean","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"Vector3"},{"name":"rotation","documentation":"","type":"Quaternion"},{"name":"translation","documentation":"","type":"Vector3"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"FromArray","documentation":"","type":"(array: number[], offset?: number) => Matrix","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[]"},{"name":"offset","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"FromArrayToRef","documentation":"","type":"(array: number[], offset: number, result: Matrix) => void","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[]"},{"name":"offset","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"FromFloat32ArrayToRefScaled","documentation":"","type":"(array: Float32Array, offset: number, scale: number, result: Matrix) => void","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"Float32Array"},{"name":"offset","documentation":"","type":"number"},{"name":"scale","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"FromValuesToRef","documentation":"","type":"(initialM11: number, initialM12: number, initialM13: number, initialM14: number, initialM21: numb...","functionBody":[{"parameters":[{"name":"initialM11","documentation":"","type":"number"},{"name":"initialM12","documentation":"","type":"number"},{"name":"initialM13","documentation":"","type":"number"},{"name":"initialM14","documentation":"","type":"number"},{"name":"initialM21","documentation":"","type":"number"},{"name":"initialM22","documentation":"","type":"number"},{"name":"initialM23","documentation":"","type":"number"},{"name":"initialM24","documentation":"","type":"number"},{"name":"initialM31","documentation":"","type":"number"},{"name":"initialM32","documentation":"","type":"number"},{"name":"initialM33","documentation":"","type":"number"},{"name":"initialM34","documentation":"","type":"number"},{"name":"initialM41","documentation":"","type":"number"},{"name":"initialM42","documentation":"","type":"number"},{"name":"initialM43","documentation":"","type":"number"},{"name":"initialM44","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getRow","documentation":"","type":"(index: number) => Vector4","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"number"}],"returnType":"Vector4","documentation":""}],"entryType":"function"},{"name":"setRow","documentation":"","type":"(index: number, row: Vector4) => Matrix","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"number"},{"name":"row","documentation":"","type":"Vector4"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"FromValues","documentation":"","type":"(initialM11: number, initialM12: number, initialM13: number, initialM14: number, initialM21: numb...","functionBody":[{"parameters":[{"name":"initialM11","documentation":"","type":"number"},{"name":"initialM12","documentation":"","type":"number"},{"name":"initialM13","documentation":"","type":"number"},{"name":"initialM14","documentation":"","type":"number"},{"name":"initialM21","documentation":"","type":"number"},{"name":"initialM22","documentation":"","type":"number"},{"name":"initialM23","documentation":"","type":"number"},{"name":"initialM24","documentation":"","type":"number"},{"name":"initialM31","documentation":"","type":"number"},{"name":"initialM32","documentation":"","type":"number"},{"name":"initialM33","documentation":"","type":"number"},{"name":"initialM34","documentation":"","type":"number"},{"name":"initialM41","documentation":"","type":"number"},{"name":"initialM42","documentation":"","type":"number"},{"name":"initialM43","documentation":"","type":"number"},{"name":"initialM44","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"Compose","documentation":"","type":"(scale: Vector3, rotation: Quaternion, translation: Vector3) => Matrix","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"Vector3"},{"name":"rotation","documentation":"","type":"Quaternion"},{"name":"translation","documentation":"","type":"Vector3"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"Identity","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"IdentityToRef","documentation":"","type":"(result: Matrix) => void","functionBody":[{"parameters":[{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Zero","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"RotationX","documentation":"","type":"(angle: number) => Matrix","functionBody":[{"parameters":[{"name":"angle","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"Invert","documentation":"","type":"(source: Matrix) => Matrix","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"Matrix"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"RotationXToRef","documentation":"","type":"(angle: number, result: Matrix) => void","functionBody":[{"parameters":[{"name":"angle","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"RotationY","documentation":"","type":"(angle: number) => Matrix","functionBody":[{"parameters":[{"name":"angle","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"RotationYToRef","documentation":"","type":"(angle: number, result: Matrix) => void","functionBody":[{"parameters":[{"name":"angle","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"RotationZ","documentation":"","type":"(angle: number) => Matrix","functionBody":[{"parameters":[{"name":"angle","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"RotationZToRef","documentation":"","type":"(angle: number, result: Matrix) => void","functionBody":[{"parameters":[{"name":"angle","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"RotationAxis","documentation":"","type":"(axis: Vector3, angle: number) => Matrix","functionBody":[{"parameters":[{"name":"axis","documentation":"","type":"Vector3"},{"name":"angle","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"RotationAxisToRef","documentation":"","type":"(axis: Vector3, angle: number, result: Matrix) => void","functionBody":[{"parameters":[{"name":"axis","documentation":"","type":"Vector3"},{"name":"angle","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"RotationYawPitchRoll","documentation":"","type":"(yaw: number, pitch: number, roll: number) => Matrix","functionBody":[{"parameters":[{"name":"yaw","documentation":"","type":"number"},{"name":"pitch","documentation":"","type":"number"},{"name":"roll","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"RotationYawPitchRollToRef","documentation":"","type":"(yaw: number, pitch: number, roll: number, result: Matrix) => void","functionBody":[{"parameters":[{"name":"yaw","documentation":"","type":"number"},{"name":"pitch","documentation":"","type":"number"},{"name":"roll","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Scaling","documentation":"","type":"(x: number, y: number, z: number) => Matrix","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"ScalingToRef","documentation":"","type":"(x: number, y: number, z: number, result: Matrix) => void","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Translation","documentation":"","type":"(x: number, y: number, z: number) => Matrix","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"TranslationToRef","documentation":"","type":"(x: number, y: number, z: number, result: Matrix) => void","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Lerp","documentation":"","type":"(startValue: Matrix, endValue: Matrix, gradient: number) => Matrix","functionBody":[{"parameters":[{"name":"startValue","documentation":"","type":"Matrix"},{"name":"endValue","documentation":"","type":"Matrix"},{"name":"gradient","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"DecomposeLerp","documentation":"","type":"(startValue: Matrix, endValue: Matrix, gradient: number) => Matrix","functionBody":[{"parameters":[{"name":"startValue","documentation":"","type":"Matrix"},{"name":"endValue","documentation":"","type":"Matrix"},{"name":"gradient","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"LookAtLH","documentation":"","type":"(eye: Vector3, target: Vector3, up: Vector3) => Matrix","functionBody":[{"parameters":[{"name":"eye","documentation":"","type":"Vector3"},{"name":"target","documentation":"","type":"Vector3"},{"name":"up","documentation":"","type":"Vector3"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"LookAtLHToRef","documentation":"","type":"(eye: Vector3, target: Vector3, up: Vector3, result: Matrix) => void","functionBody":[{"parameters":[{"name":"eye","documentation":"","type":"Vector3"},{"name":"target","documentation":"","type":"Vector3"},{"name":"up","documentation":"","type":"Vector3"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"LookAtRH","documentation":"","type":"(eye: Vector3, target: Vector3, up: Vector3) => Matrix","functionBody":[{"parameters":[{"name":"eye","documentation":"","type":"Vector3"},{"name":"target","documentation":"","type":"Vector3"},{"name":"up","documentation":"","type":"Vector3"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"LookAtRHToRef","documentation":"","type":"(eye: Vector3, target: Vector3, up: Vector3, result: Matrix) => void","functionBody":[{"parameters":[{"name":"eye","documentation":"","type":"Vector3"},{"name":"target","documentation":"","type":"Vector3"},{"name":"up","documentation":"","type":"Vector3"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"OrthoLH","documentation":"","type":"(width: number, height: number, znear: number, zfar: number) => Matrix","functionBody":[{"parameters":[{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"znear","documentation":"","type":"number"},{"name":"zfar","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"OrthoLHToRef","documentation":"","type":"(width: number, height: number, znear: number, zfar: number, result: Matrix) => void","functionBody":[{"parameters":[{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"znear","documentation":"","type":"number"},{"name":"zfar","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"OrthoOffCenterLH","documentation":"","type":"(left: number, right: number, bottom: number, top: number, znear: number, zfar: number) => Matrix","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"number"},{"name":"right","documentation":"","type":"number"},{"name":"bottom","documentation":"","type":"number"},{"name":"top","documentation":"","type":"number"},{"name":"znear","documentation":"","type":"number"},{"name":"zfar","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"OrthoOffCenterLHToRef","documentation":"","type":"(left: number, right: any, bottom: number, top: number, znear: number, zfar: number, result: Matr...","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"number"},{"name":"right","documentation":"","type":"any"},{"name":"bottom","documentation":"","type":"number"},{"name":"top","documentation":"","type":"number"},{"name":"znear","documentation":"","type":"number"},{"name":"zfar","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"OrthoOffCenterRH","documentation":"","type":"(left: number, right: number, bottom: number, top: number, znear: number, zfar: number) => Matrix","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"number"},{"name":"right","documentation":"","type":"number"},{"name":"bottom","documentation":"","type":"number"},{"name":"top","documentation":"","type":"number"},{"name":"znear","documentation":"","type":"number"},{"name":"zfar","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"OrthoOffCenterRHToRef","documentation":"","type":"(left: number, right: any, bottom: number, top: number, znear: number, zfar: number, result: Matr...","functionBody":[{"parameters":[{"name":"left","documentation":"","type":"number"},{"name":"right","documentation":"","type":"any"},{"name":"bottom","documentation":"","type":"number"},{"name":"top","documentation":"","type":"number"},{"name":"znear","documentation":"","type":"number"},{"name":"zfar","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"PerspectiveLH","documentation":"","type":"(width: number, height: number, znear: number, zfar: number) => Matrix","functionBody":[{"parameters":[{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"znear","documentation":"","type":"number"},{"name":"zfar","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"PerspectiveFovLH","documentation":"","type":"(fov: number, aspect: number, znear: number, zfar: number) => Matrix","functionBody":[{"parameters":[{"name":"fov","documentation":"","type":"number"},{"name":"aspect","documentation":"","type":"number"},{"name":"znear","documentation":"","type":"number"},{"name":"zfar","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"PerspectiveFovLHToRef","documentation":"","type":"(fov: number, aspect: number, znear: number, zfar: number, result: Matrix, isVerticalFovFixed?: b...","functionBody":[{"parameters":[{"name":"fov","documentation":"","type":"number"},{"name":"aspect","documentation":"","type":"number"},{"name":"znear","documentation":"","type":"number"},{"name":"zfar","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"},{"name":"isVerticalFovFixed","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"PerspectiveFovRH","documentation":"","type":"(fov: number, aspect: number, znear: number, zfar: number) => Matrix","functionBody":[{"parameters":[{"name":"fov","documentation":"","type":"number"},{"name":"aspect","documentation":"","type":"number"},{"name":"znear","documentation":"","type":"number"},{"name":"zfar","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"PerspectiveFovRHToRef","documentation":"","type":"(fov: number, aspect: number, znear: number, zfar: number, result: Matrix, isVerticalFovFixed?: b...","functionBody":[{"parameters":[{"name":"fov","documentation":"","type":"number"},{"name":"aspect","documentation":"","type":"number"},{"name":"znear","documentation":"","type":"number"},{"name":"zfar","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"},{"name":"isVerticalFovFixed","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"PerspectiveFovWebVRToRef","documentation":"","type":"(fov: any, znear: number, zfar: number, result: Matrix, isVerticalFovFixed?: boolean) => void","functionBody":[{"parameters":[{"name":"fov","documentation":"","type":"any"},{"name":"znear","documentation":"","type":"number"},{"name":"zfar","documentation":"","type":"number"},{"name":"result","documentation":"","type":"Matrix"},{"name":"isVerticalFovFixed","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"GetFinalMatrix","documentation":"","type":"(viewport: Viewport, world: Matrix, view: Matrix, projection: Matrix, zmin: number, zmax: number)...","functionBody":[{"parameters":[{"name":"viewport","documentation":"","type":"Viewport"},{"name":"world","documentation":"","type":"Matrix"},{"name":"view","documentation":"","type":"Matrix"},{"name":"projection","documentation":"","type":"Matrix"},{"name":"zmin","documentation":"","type":"number"},{"name":"zmax","documentation":"","type":"number"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"GetAsMatrix2x2","documentation":"","type":"(matrix: Matrix) => Float32Array","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"Float32Array","documentation":""}],"entryType":"function"},{"name":"GetAsMatrix3x3","documentation":"","type":"(matrix: Matrix) => Float32Array","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"Float32Array","documentation":""}],"entryType":"function"},{"name":"Transpose","documentation":"","type":"(matrix: Matrix) => Matrix","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"Reflection","documentation":"","type":"(plane: Plane) => Matrix","functionBody":[{"parameters":[{"name":"plane","documentation":"","type":"Plane"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"ReflectionToRef","documentation":"","type":"(plane: Plane, result: Matrix) => void","functionBody":[{"parameters":[{"name":"plane","documentation":"","type":"Plane"},{"name":"result","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_tempQuaternion","documentation":"","type":"any","entryType":"property"},{"name":"_xAxis","documentation":"","type":"any","entryType":"property"},{"name":"_yAxis","documentation":"","type":"any","entryType":"property"},{"name":"_zAxis","documentation":"","type":"any","entryType":"property"},{"name":"m","documentation":"","type":"Float32Array","entryType":"property"}]},{"name":"Plane","documentation":"","type":"typeof Plane","constructors":[{"parameters":[{"name":"a","documentation":"","type":"number"},{"name":"b","documentation":"","type":"number"},{"name":"c","documentation":"","type":"number"},{"name":"d","documentation":"","type":"number"}],"returnType":"Plane","documentation":""}],"entryType":"class","functions":[{"name":"asArray","documentation":"","type":"() => number[]","functionBody":[{"parameters":[],"returnType":"number[]","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => Plane","functionBody":[{"parameters":[],"returnType":"Plane","documentation":""}],"entryType":"function"},{"name":"getClassName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getHashCode","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"normalize","documentation":"","type":"() => Plane","functionBody":[{"parameters":[],"returnType":"Plane","documentation":""}],"entryType":"function"},{"name":"transform","documentation":"","type":"(transformation: Matrix) => Plane","functionBody":[{"parameters":[{"name":"transformation","documentation":"","type":"Matrix"}],"returnType":"Plane","documentation":""}],"entryType":"function"},{"name":"dotCoordinate","documentation":"","type":"(point: any) => number","functionBody":[{"parameters":[{"name":"point","documentation":"","type":"any"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"copyFromPoints","documentation":"","type":"(point1: Vector3, point2: Vector3, point3: Vector3) => Plane","functionBody":[{"parameters":[{"name":"point1","documentation":"","type":"Vector3"},{"name":"point2","documentation":"","type":"Vector3"},{"name":"point3","documentation":"","type":"Vector3"}],"returnType":"Plane","documentation":""}],"entryType":"function"},{"name":"isFrontFacingTo","documentation":"","type":"(direction: Vector3, epsilon: number) => boolean","functionBody":[{"parameters":[{"name":"direction","documentation":"","type":"Vector3"},{"name":"epsilon","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"signedDistanceTo","documentation":"","type":"(point: Vector3) => number","functionBody":[{"parameters":[{"name":"point","documentation":"","type":"Vector3"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"FromArray","documentation":"","type":"(array: number[]) => Plane","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"number[]"}],"returnType":"Plane","documentation":""}],"entryType":"function"},{"name":"FromPoints","documentation":"","type":"(point1: any, point2: any, point3: any) => Plane","functionBody":[{"parameters":[{"name":"point1","documentation":"","type":"any"},{"name":"point2","documentation":"","type":"any"},{"name":"point3","documentation":"","type":"any"}],"returnType":"Plane","documentation":""}],"entryType":"function"},{"name":"FromPositionAndNormal","documentation":"","type":"(origin: Vector3, normal: Vector3) => Plane","functionBody":[{"parameters":[{"name":"origin","documentation":"","type":"Vector3"},{"name":"normal","documentation":"","type":"Vector3"}],"returnType":"Plane","documentation":""}],"entryType":"function"},{"name":"SignedDistanceToPlaneFromPositionAndNormal","documentation":"","type":"(origin: Vector3, normal: Vector3, point: Vector3) => number","functionBody":[{"parameters":[{"name":"origin","documentation":"","type":"Vector3"},{"name":"normal","documentation":"","type":"Vector3"},{"name":"point","documentation":"","type":"Vector3"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"normal","documentation":"","type":"Vector3","entryType":"property"},{"name":"d","documentation":"","type":"number","entryType":"property"}]},{"name":"Viewport","documentation":"","type":"typeof Viewport","constructors":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"}],"returnType":"Viewport","documentation":""}],"entryType":"class","functions":[{"name":"toGlobal","documentation":"","type":"(renderWidth: number, renderHeight: number) => Viewport","functionBody":[{"parameters":[{"name":"renderWidth","documentation":"","type":"number"},{"name":"renderHeight","documentation":"","type":"number"}],"returnType":"Viewport","documentation":""}],"entryType":"function"}],"properties":[{"name":"x","documentation":"","type":"number","entryType":"property"},{"name":"y","documentation":"","type":"number","entryType":"property"},{"name":"width","documentation":"","type":"number","entryType":"property"},{"name":"height","documentation":"","type":"number","entryType":"property"}]},{"name":"Frustum","documentation":"","type":"typeof Frustum","constructors":[{"parameters":[],"returnType":"Frustum","documentation":""}],"entryType":"class","functions":[{"name":"GetPlanes","documentation":"","type":"(transform: Matrix) => Plane[]","functionBody":[{"parameters":[{"name":"transform","documentation":"","type":"Matrix"}],"returnType":"Plane[]","documentation":""}],"entryType":"function"},{"name":"GetPlanesToRef","documentation":"","type":"(transform: Matrix, frustumPlanes: Plane[]) => void","functionBody":[{"parameters":[{"name":"transform","documentation":"","type":"Matrix"},{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"Axis","documentation":"","type":"typeof Axis","constructors":[{"parameters":[],"returnType":"Axis","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"X","documentation":"","type":"Vector3","entryType":"property"},{"name":"Y","documentation":"","type":"Vector3","entryType":"property"},{"name":"Z","documentation":"","type":"Vector3","entryType":"property"}]},{"name":"BezierCurve","documentation":"","type":"typeof BezierCurve","constructors":[{"parameters":[],"returnType":"BezierCurve","documentation":""}],"entryType":"class","functions":[{"name":"interpolate","documentation":"","type":"(t: number, x1: number, y1: number, x2: number, y2: number) => number","functionBody":[{"parameters":[{"name":"t","documentation":"","type":"number"},{"name":"x1","documentation":"","type":"number"},{"name":"y1","documentation":"","type":"number"},{"name":"x2","documentation":"","type":"number"},{"name":"y2","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"Angle","documentation":"","type":"typeof Angle","constructors":[{"parameters":[{"name":"radians","documentation":"","type":"number"}],"returnType":"Angle","documentation":""}],"entryType":"class","functions":[{"name":"BetweenTwoPoints","documentation":"","type":"(a: Vector2, b: Vector2) => Angle","functionBody":[{"parameters":[{"name":"a","documentation":"","type":"Vector2"},{"name":"b","documentation":"","type":"Vector2"}],"returnType":"Angle","documentation":""}],"entryType":"function"},{"name":"FromRadians","documentation":"","type":"(radians: number) => Angle","functionBody":[{"parameters":[{"name":"radians","documentation":"","type":"number"}],"returnType":"Angle","documentation":""}],"entryType":"function"},{"name":"FromDegrees","documentation":"","type":"(degrees: number) => Angle","functionBody":[{"parameters":[{"name":"degrees","documentation":"","type":"number"}],"returnType":"Angle","documentation":""}],"entryType":"function"}],"properties":[{"name":"_radians","documentation":"","type":"any","entryType":"property"},{"name":"degrees","documentation":"","type":"() => number","entryType":"property"},{"name":"radians","documentation":"","type":"() => number","entryType":"property"}]},{"name":"Arc2","documentation":"","type":"typeof Arc2","constructors":[{"parameters":[{"name":"startPoint","documentation":"","type":"Vector2"},{"name":"midPoint","documentation":"","type":"Vector2"},{"name":"endPoint","documentation":"","type":"Vector2"}],"returnType":"Arc2","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"startPoint","documentation":"","type":"Vector2","entryType":"property"},{"name":"midPoint","documentation":"","type":"Vector2","entryType":"property"},{"name":"endPoint","documentation":"","type":"Vector2","entryType":"property"},{"name":"centerPoint","documentation":"","type":"Vector2","entryType":"property"},{"name":"radius","documentation":"","type":"number","entryType":"property"},{"name":"angle","documentation":"","type":"Angle","entryType":"property"},{"name":"startAngle","documentation":"","type":"Angle","entryType":"property"},{"name":"orientation","documentation":"","type":"Orientation","entryType":"property"}]},{"name":"Path2","documentation":"","type":"typeof Path2","constructors":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"}],"returnType":"Path2","documentation":""}],"entryType":"class","functions":[{"name":"addLineTo","documentation":"","type":"(x: number, y: number) => Path2","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"}],"returnType":"Path2","documentation":""}],"entryType":"function"},{"name":"addArcTo","documentation":"","type":"(midX: number, midY: number, endX: number, endY: number, numberOfSegments?: number) => Path2","functionBody":[{"parameters":[{"name":"midX","documentation":"","type":"number"},{"name":"midY","documentation":"","type":"number"},{"name":"endX","documentation":"","type":"number"},{"name":"endY","documentation":"","type":"number"},{"name":"numberOfSegments","documentation":"","type":"number"}],"returnType":"Path2","documentation":""}],"entryType":"function"},{"name":"close","documentation":"","type":"() => Path2","functionBody":[{"parameters":[],"returnType":"Path2","documentation":""}],"entryType":"function"},{"name":"length","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getPoints","documentation":"","type":"() => Vector2[]","functionBody":[{"parameters":[],"returnType":"Vector2[]","documentation":""}],"entryType":"function"},{"name":"getPointAtLengthPosition","documentation":"","type":"(normalizedLengthPosition: number) => Vector2","functionBody":[{"parameters":[{"name":"normalizedLengthPosition","documentation":"","type":"number"}],"returnType":"Vector2","documentation":""}],"entryType":"function"},{"name":"StartingAt","documentation":"","type":"(x: number, y: number) => Path2","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"}],"returnType":"Path2","documentation":""}],"entryType":"function"}],"properties":[{"name":"_points","documentation":"","type":"any","entryType":"property"},{"name":"_length","documentation":"","type":"any","entryType":"property"},{"name":"closed","documentation":"","type":"boolean","entryType":"property"}]},{"name":"Path3D","documentation":"","type":"typeof Path3D","constructors":[{"parameters":[{"name":"path","documentation":"","type":"Vector3[]"},{"name":"firstNormal","documentation":"","type":"Vector3"},{"name":"raw","documentation":"","type":"boolean"}],"returnType":"Path3D","documentation":"new Path3D(path, normal, raw)\nCreates a Path3D. A Path3D is a logical math object, so not a mesh.\nplease read the description in the tutorial :  http://doc.babylonjs.com/tutorials/How_to_use_Path3D\npath : an array of Vector3, the curve axis of the Path3D\nnormal (optional) : Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\nraw (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed."}],"entryType":"class","functions":[{"name":"getCurve","documentation":"Returns the Path3D array of successive Vector3 designing its curve.","type":"() => Vector3[]","functionBody":[{"parameters":[],"returnType":"Vector3[]","documentation":"Returns the Path3D array of successive Vector3 designing its curve."}],"entryType":"function"},{"name":"getTangents","documentation":"Returns an array populated with tangent vectors on each Path3D curve point.","type":"() => Vector3[]","functionBody":[{"parameters":[],"returnType":"Vector3[]","documentation":"Returns an array populated with tangent vectors on each Path3D curve point."}],"entryType":"function"},{"name":"getNormals","documentation":"Returns an array populated with normal vectors on each Path3D curve point.","type":"() => Vector3[]","functionBody":[{"parameters":[],"returnType":"Vector3[]","documentation":"Returns an array populated with normal vectors on each Path3D curve point."}],"entryType":"function"},{"name":"getBinormals","documentation":"Returns an array populated with binormal vectors on each Path3D curve point.","type":"() => Vector3[]","functionBody":[{"parameters":[],"returnType":"Vector3[]","documentation":"Returns an array populated with binormal vectors on each Path3D curve point."}],"entryType":"function"},{"name":"getDistances","documentation":"Returns an array populated with distances (float) of the i-th point from the first curve point.","type":"() => number[]","functionBody":[{"parameters":[],"returnType":"number[]","documentation":"Returns an array populated with distances (float) of the i-th point from the first curve point."}],"entryType":"function"},{"name":"update","documentation":"Forces the Path3D tangent, normal, binormal and distance recomputation.\nReturns the same object updated.","type":"(path: Vector3[], firstNormal?: Vector3) => Path3D","functionBody":[{"parameters":[{"name":"path","documentation":"","type":"Vector3[]"},{"name":"firstNormal","documentation":"","type":"Vector3"}],"returnType":"Path3D","documentation":"Forces the Path3D tangent, normal, binormal and distance recomputation.\nReturns the same object updated."}],"entryType":"function"},{"name":"_compute","documentation":"","type":"(firstNormal: any) => any","functionBody":[{"parameters":[{"name":"firstNormal","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getFirstNonNullVector","documentation":"","type":"(index: any) => any","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getLastNonNullVector","documentation":"","type":"(index: any) => any","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_normalVector","documentation":"","type":"(v0: any, vt: any, va: any) => any","functionBody":[{"parameters":[{"name":"v0","documentation":"","type":"any"},{"name":"vt","documentation":"","type":"any"},{"name":"va","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"path","documentation":"","type":"Vector3[]","entryType":"property"},{"name":"_curve","documentation":"","type":"any","entryType":"property"},{"name":"_distances","documentation":"","type":"any","entryType":"property"},{"name":"_tangents","documentation":"","type":"any","entryType":"property"},{"name":"_normals","documentation":"","type":"any","entryType":"property"},{"name":"_binormals","documentation":"","type":"any","entryType":"property"},{"name":"_raw","documentation":"","type":"any","entryType":"property"}]},{"name":"Curve3","documentation":"","type":"typeof Curve3","constructors":[{"parameters":[{"name":"points","documentation":"","type":"Vector3[]"}],"returnType":"Curve3","documentation":"A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\nA Curve3 is designed from a series of successive Vector3.\nTuto : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object"}],"entryType":"class","functions":[{"name":"CreateQuadraticBezier","documentation":"Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve","type":"(v0: Vector3, v1: Vector3, v2: Vector3, nbPoints: number) => Curve3","functionBody":[{"parameters":[{"name":"v0","documentation":"(Vector3) the origin point of the Quadratic Bezier","type":"Vector3"},{"name":"v1","documentation":"(Vector3) the control point","type":"Vector3"},{"name":"v2","documentation":"(Vector3) the end point of the Quadratic Bezier","type":"Vector3"},{"name":"nbPoints","documentation":"(integer) the wanted number of points in the curve","type":"number"}],"returnType":"Curve3","documentation":"Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve"}],"entryType":"function"},{"name":"CreateCubicBezier","documentation":"Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve","type":"(v0: Vector3, v1: Vector3, v2: Vector3, v3: Vector3, nbPoints: number) => Curve3","functionBody":[{"parameters":[{"name":"v0","documentation":"(Vector3) the origin point of the Cubic Bezier","type":"Vector3"},{"name":"v1","documentation":"(Vector3) the first control point","type":"Vector3"},{"name":"v2","documentation":"(Vector3) the second control point","type":"Vector3"},{"name":"v3","documentation":"(Vector3) the end point of the Cubic Bezier","type":"Vector3"},{"name":"nbPoints","documentation":"(integer) the wanted number of points in the curve","type":"number"}],"returnType":"Curve3","documentation":"Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve"}],"entryType":"function"},{"name":"CreateHermiteSpline","documentation":"Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline","type":"(p1: Vector3, t1: Vector3, p2: Vector3, t2: Vector3, nbPoints: number) => Curve3","functionBody":[{"parameters":[{"name":"p1","documentation":"(Vector3) the origin point of the Hermite Spline","type":"Vector3"},{"name":"t1","documentation":"(Vector3) the tangent vector at the origin point","type":"Vector3"},{"name":"p2","documentation":"(Vector3) the end point of the Hermite Spline","type":"Vector3"},{"name":"t2","documentation":"(Vector3) the tangent vector at the end point","type":"Vector3"},{"name":"nbPoints","documentation":"(integer) the wanted number of points in the curve","type":"number"}],"returnType":"Curve3","documentation":"Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline"}],"entryType":"function"},{"name":"getPoints","documentation":"Returns the Curve3 stored array of successive Vector3","type":"() => Vector3[]","functionBody":[{"parameters":[],"returnType":"Vector3[]","documentation":"Returns the Curve3 stored array of successive Vector3"}],"entryType":"function"},{"name":"length","documentation":"Returns the computed length (float) of the curve.","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":"Returns the computed length (float) of the curve."}],"entryType":"function"},{"name":"continue","documentation":"Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\nThis new Curve3 is built by translating and sticking the curveB at the end of the curveA.\ncurveA and curveB keep unchanged.","type":"(curve: Curve3) => Curve3","functionBody":[{"parameters":[{"name":"curve","documentation":"","type":"Curve3"}],"returnType":"Curve3","documentation":"Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\nThis new Curve3 is built by translating and sticking the curveB at the end of the curveA.\ncurveA and curveB keep unchanged."}],"entryType":"function"},{"name":"_computeLength","documentation":"","type":"(path: any) => any","functionBody":[{"parameters":[{"name":"path","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_points","documentation":"","type":"any","entryType":"property"},{"name":"_length","documentation":"","type":"any","entryType":"property"}]},{"name":"SphericalHarmonics","documentation":"","type":"typeof SphericalHarmonics","constructors":[{"parameters":[],"returnType":"SphericalHarmonics","documentation":""}],"entryType":"class","functions":[{"name":"addLight","documentation":"","type":"(direction: Vector3, color: Color3, deltaSolidAngle: number) => void","functionBody":[{"parameters":[{"name":"direction","documentation":"","type":"Vector3"},{"name":"color","documentation":"","type":"Color3"},{"name":"deltaSolidAngle","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"scale","documentation":"","type":"(scale: number) => void","functionBody":[{"parameters":[{"name":"scale","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"L00","documentation":"","type":"Vector3","entryType":"property"},{"name":"L1_1","documentation":"","type":"Vector3","entryType":"property"},{"name":"L10","documentation":"","type":"Vector3","entryType":"property"},{"name":"L11","documentation":"","type":"Vector3","entryType":"property"},{"name":"L2_2","documentation":"","type":"Vector3","entryType":"property"},{"name":"L2_1","documentation":"","type":"Vector3","entryType":"property"},{"name":"L20","documentation":"","type":"Vector3","entryType":"property"},{"name":"L21","documentation":"","type":"Vector3","entryType":"property"},{"name":"L22","documentation":"","type":"Vector3","entryType":"property"}]},{"name":"SphericalPolynomial","documentation":"","type":"typeof SphericalPolynomial","constructors":[{"parameters":[],"returnType":"SphericalPolynomial","documentation":""}],"entryType":"class","functions":[{"name":"addAmbient","documentation":"","type":"(color: Color3) => void","functionBody":[{"parameters":[{"name":"color","documentation":"","type":"Color3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getSphericalPolynomialFromHarmonics","documentation":"","type":"(harmonics: SphericalHarmonics) => SphericalPolynomial","functionBody":[{"parameters":[{"name":"harmonics","documentation":"","type":"SphericalHarmonics"}],"returnType":"SphericalPolynomial","documentation":""}],"entryType":"function"}],"properties":[{"name":"x","documentation":"","type":"Vector3","entryType":"property"},{"name":"y","documentation":"","type":"Vector3","entryType":"property"},{"name":"z","documentation":"","type":"Vector3","entryType":"property"},{"name":"xx","documentation":"","type":"Vector3","entryType":"property"},{"name":"yy","documentation":"","type":"Vector3","entryType":"property"},{"name":"zz","documentation":"","type":"Vector3","entryType":"property"},{"name":"xy","documentation":"","type":"Vector3","entryType":"property"},{"name":"yz","documentation":"","type":"Vector3","entryType":"property"},{"name":"zx","documentation":"","type":"Vector3","entryType":"property"}]},{"name":"PositionNormalVertex","documentation":"","type":"typeof PositionNormalVertex","constructors":[{"parameters":[{"name":"position","documentation":"","type":"Vector3"},{"name":"normal","documentation":"","type":"Vector3"}],"returnType":"PositionNormalVertex","documentation":""}],"entryType":"class","functions":[{"name":"clone","documentation":"","type":"() => PositionNormalVertex","functionBody":[{"parameters":[],"returnType":"PositionNormalVertex","documentation":""}],"entryType":"function"}],"properties":[{"name":"position","documentation":"","type":"Vector3","entryType":"property"},{"name":"normal","documentation":"","type":"Vector3","entryType":"property"}]},{"name":"PositionNormalTextureVertex","documentation":"","type":"typeof PositionNormalTextureVertex","constructors":[{"parameters":[{"name":"position","documentation":"","type":"Vector3"},{"name":"normal","documentation":"","type":"Vector3"},{"name":"uv","documentation":"","type":"Vector2"}],"returnType":"PositionNormalTextureVertex","documentation":""}],"entryType":"class","functions":[{"name":"clone","documentation":"","type":"() => PositionNormalTextureVertex","functionBody":[{"parameters":[],"returnType":"PositionNormalTextureVertex","documentation":""}],"entryType":"function"}],"properties":[{"name":"position","documentation":"","type":"Vector3","entryType":"property"},{"name":"normal","documentation":"","type":"Vector3","entryType":"property"},{"name":"uv","documentation":"","type":"Vector2","entryType":"property"}]},{"name":"Tmp","documentation":"","type":"typeof Tmp","constructors":[{"parameters":[],"returnType":"Tmp","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"Color3","documentation":"","type":"Color3[]","entryType":"property"},{"name":"Vector2","documentation":"","type":"Vector2[]","entryType":"property"},{"name":"Vector3","documentation":"","type":"Vector3[]","entryType":"property"},{"name":"Vector4","documentation":"","type":"Vector4[]","entryType":"property"},{"name":"Quaternion","documentation":"","type":"Quaternion[]","entryType":"property"},{"name":"Matrix","documentation":"","type":"Matrix[]","entryType":"property"}]},{"name":"AbstractMesh","documentation":"","type":"typeof AbstractMesh","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"AbstractMesh","documentation":""}],"entryType":"class","functions":[{"name":"toString","documentation":"","type":"(fullDetails?: boolean) => string","functionBody":[{"parameters":[{"name":"fullDetails","documentation":"- support for multiple levels of logging within scene loading","type":"boolean"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"updatePoseMatrix","documentation":"","type":"(matrix: Matrix) => void","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getPoseMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"disableEdgesRendering","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"enableEdgesRendering","documentation":"","type":"(epsilon?: number, checkVerticesInsteadOfIndices?: boolean) => void","functionBody":[{"parameters":[{"name":"epsilon","documentation":"","type":"number"},{"name":"checkVerticesInsteadOfIndices","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getLOD","documentation":"","type":"(camera: Camera) => AbstractMesh","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"Camera"}],"returnType":"AbstractMesh","documentation":""}],"entryType":"function"},{"name":"getTotalVertices","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getIndices","documentation":"","type":"() => number[] | Int32Array","functionBody":[{"parameters":[],"returnType":"number[] | Int32Array","documentation":""}],"entryType":"function"},{"name":"getVerticesData","documentation":"","type":"(kind: string) => number[] | Float32Array","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"}],"returnType":"number[] | Float32Array","documentation":""}],"entryType":"function"},{"name":"isVerticesDataPresent","documentation":"","type":"(kind: string) => boolean","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getBoundingInfo","documentation":"","type":"() => BoundingInfo","functionBody":[{"parameters":[],"returnType":"BoundingInfo","documentation":""}],"entryType":"function"},{"name":"setBoundingInfo","documentation":"","type":"(boundingInfo: BoundingInfo) => void","functionBody":[{"parameters":[{"name":"boundingInfo","documentation":"","type":"BoundingInfo"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_preActivate","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_preActivateForIntermediateRendering","documentation":"","type":"(renderId: number) => void","functionBody":[{"parameters":[{"name":"renderId","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_activate","documentation":"","type":"(renderId: number) => void","functionBody":[{"parameters":[{"name":"renderId","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getWorldMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"freezeWorldMatrix","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"unfreezeWorldMatrix","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"rotate","documentation":"","type":"(axis: Vector3, amount: number, space?: Space) => void","functionBody":[{"parameters":[{"name":"axis","documentation":"","type":"Vector3"},{"name":"amount","documentation":"","type":"number"},{"name":"space","documentation":"","type":"Space"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"translate","documentation":"","type":"(axis: Vector3, distance: number, space?: Space) => void","functionBody":[{"parameters":[{"name":"axis","documentation":"","type":"Vector3"},{"name":"distance","documentation":"","type":"number"},{"name":"space","documentation":"","type":"Space"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getAbsolutePosition","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"setAbsolutePosition","documentation":"","type":"(absolutePosition: Vector3) => void","functionBody":[{"parameters":[{"name":"absolutePosition","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"movePOV","documentation":"Perform relative position change from the point of view of behind the front of the mesh.\nThis is performed taking into account the meshes current rotation, so you do not have to care.\nSupports definition of mesh facing forward or backward.","type":"(amountRight: number, amountUp: number, amountForward: number) => void","functionBody":[{"parameters":[{"name":"amountRight","documentation":"","type":"number"},{"name":"amountUp","documentation":"","type":"number"},{"name":"amountForward","documentation":"","type":"number"}],"returnType":"void","documentation":"Perform relative position change from the point of view of behind the front of the mesh.\nThis is performed taking into account the meshes current rotation, so you do not have to care.\nSupports definition of mesh facing forward or backward."}],"entryType":"function"},{"name":"calcMovePOV","documentation":"Calculate relative position change from the point of view of behind the front of the mesh.\nThis is performed taking into account the meshes current rotation, so you do not have to care.\nSupports definition of mesh facing forward or backward.","type":"(amountRight: number, amountUp: number, amountForward: number) => Vector3","functionBody":[{"parameters":[{"name":"amountRight","documentation":"","type":"number"},{"name":"amountUp","documentation":"","type":"number"},{"name":"amountForward","documentation":"","type":"number"}],"returnType":"Vector3","documentation":"Calculate relative position change from the point of view of behind the front of the mesh.\nThis is performed taking into account the meshes current rotation, so you do not have to care.\nSupports definition of mesh facing forward or backward."}],"entryType":"function"},{"name":"rotatePOV","documentation":"Perform relative rotation change from the point of view of behind the front of the mesh.\nSupports definition of mesh facing forward or backward.","type":"(flipBack: number, twirlClockwise: number, tiltRight: number) => void","functionBody":[{"parameters":[{"name":"flipBack","documentation":"","type":"number"},{"name":"twirlClockwise","documentation":"","type":"number"},{"name":"tiltRight","documentation":"","type":"number"}],"returnType":"void","documentation":"Perform relative rotation change from the point of view of behind the front of the mesh.\nSupports definition of mesh facing forward or backward."}],"entryType":"function"},{"name":"calcRotatePOV","documentation":"Calculate relative rotation change from the point of view of behind the front of the mesh.\nSupports definition of mesh facing forward or backward.","type":"(flipBack: number, twirlClockwise: number, tiltRight: number) => Vector3","functionBody":[{"parameters":[{"name":"flipBack","documentation":"","type":"number"},{"name":"twirlClockwise","documentation":"","type":"number"},{"name":"tiltRight","documentation":"","type":"number"}],"returnType":"Vector3","documentation":"Calculate relative rotation change from the point of view of behind the front of the mesh.\nSupports definition of mesh facing forward or backward."}],"entryType":"function"},{"name":"setPivotMatrix","documentation":"","type":"(matrix: Matrix) => void","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getPivotMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"_isSynchronized","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_initCache","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"markAsDirty","documentation":"","type":"(property: string) => void","functionBody":[{"parameters":[{"name":"property","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateBoundingInfo","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateSubMeshesBoundingInfo","documentation":"","type":"(matrix: Matrix) => void","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"computeWorldMatrix","documentation":"","type":"(force?: boolean) => Matrix","functionBody":[{"parameters":[{"name":"force","documentation":"","type":"boolean"}],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"registerAfterWorldMatrixUpdate","documentation":"If you'd like to be callbacked after the mesh position, rotation or scaling has been updated","type":"(func: (mesh: AbstractMesh) => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"(mesh: AbstractMesh) => void"}],"returnType":"void","documentation":"If you'd like to be callbacked after the mesh position, rotation or scaling has been updated"}],"entryType":"function"},{"name":"unregisterAfterWorldMatrixUpdate","documentation":"","type":"(func: (mesh: AbstractMesh) => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"(mesh: AbstractMesh) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setPositionWithLocalVector","documentation":"","type":"(vector3: Vector3) => void","functionBody":[{"parameters":[{"name":"vector3","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getPositionExpressedInLocalSpace","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"locallyTranslate","documentation":"","type":"(vector3: Vector3) => void","functionBody":[{"parameters":[{"name":"vector3","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"lookAt","documentation":"","type":"(targetPoint: Vector3, yawCor?: number, pitchCor?: number, rollCor?: number, space?: Space) => void","functionBody":[{"parameters":[{"name":"targetPoint","documentation":"","type":"Vector3"},{"name":"yawCor","documentation":"","type":"number"},{"name":"pitchCor","documentation":"","type":"number"},{"name":"rollCor","documentation":"","type":"number"},{"name":"space","documentation":"","type":"Space"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"attachToBone","documentation":"","type":"(bone: Bone, affectedMesh: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"bone","documentation":"","type":"Bone"},{"name":"affectedMesh","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachFromBone","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isInFrustum","documentation":"","type":"(frustumPlanes: Plane[]) => boolean","functionBody":[{"parameters":[{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"isCompletelyInFrustum","documentation":"","type":"(frustumPlanes: Plane[]) => boolean","functionBody":[{"parameters":[{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersectsMesh","documentation":"","type":"(mesh: AbstractMesh, precise?: boolean) => boolean","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"precise","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersectsPoint","documentation":"","type":"(point: Vector3) => boolean","functionBody":[{"parameters":[{"name":"point","documentation":"","type":"Vector3"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"setPhysicsState","documentation":"@Deprecated. Use new PhysicsImpostor instead.","type":"(impostor?: any, options?: PhysicsImpostorParameters) => any","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"any"},{"name":"options","documentation":"","type":"PhysicsImpostorParameters"}],"returnType":"any","documentation":"@Deprecated. Use new PhysicsImpostor instead."}],"entryType":"function"},{"name":"getPhysicsImpostor","documentation":"","type":"() => PhysicsImpostor","functionBody":[{"parameters":[],"returnType":"PhysicsImpostor","documentation":""}],"entryType":"function"},{"name":"getPhysicsMass","documentation":"@Deprecated. Use getPhysicsImpostor().getParam(\"mass\");","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":"@Deprecated. Use getPhysicsImpostor().getParam(\"mass\");"}],"entryType":"function"},{"name":"getPhysicsFriction","documentation":"@Deprecated. Use getPhysicsImpostor().getParam(\"friction\");","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":"@Deprecated. Use getPhysicsImpostor().getParam(\"friction\");"}],"entryType":"function"},{"name":"getPhysicsRestitution","documentation":"@Deprecated. Use getPhysicsImpostor().getParam(\"restitution\");","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":"@Deprecated. Use getPhysicsImpostor().getParam(\"restitution\");"}],"entryType":"function"},{"name":"getPositionInCameraSpace","documentation":"","type":"(camera?: Camera) => Vector3","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"Camera"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"getDistanceToCamera","documentation":"","type":"(camera?: Camera) => number","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"Camera"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"applyImpulse","documentation":"","type":"(force: Vector3, contactPoint: Vector3) => void","functionBody":[{"parameters":[{"name":"force","documentation":"","type":"Vector3"},{"name":"contactPoint","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setPhysicsLinkWith","documentation":"","type":"(otherMesh: Mesh, pivot1: Vector3, pivot2: Vector3, options?: any) => void","functionBody":[{"parameters":[{"name":"otherMesh","documentation":"","type":"Mesh"},{"name":"pivot1","documentation":"","type":"Vector3"},{"name":"pivot2","documentation":"","type":"Vector3"},{"name":"options","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updatePhysicsBodyPosition","documentation":"@Deprecated","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"@Deprecated"}],"entryType":"function"},{"name":"updatePhysicsBody","documentation":"@Deprecated\nCalling this function is not needed anymore.\nThe physics engine takes care of transofmration automatically.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"@Deprecated\nCalling this function is not needed anymore.\nThe physics engine takes care of transofmration automatically."}],"entryType":"function"},{"name":"moveWithCollisions","documentation":"","type":"(velocity: Vector3) => void","functionBody":[{"parameters":[{"name":"velocity","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createOrUpdateSubmeshesOctree","documentation":"This function will create an octree to help select the right submeshes for rendering, picking and collisions\nPlease note that you must have a decent number of submeshes to get performance improvements when using octree","type":"(maxCapacity?: number, maxDepth?: number) => Octree<SubMesh>","functionBody":[{"parameters":[{"name":"maxCapacity","documentation":"","type":"number"},{"name":"maxDepth","documentation":"","type":"number"}],"returnType":"Octree<SubMesh>","documentation":"This function will create an octree to help select the right submeshes for rendering, picking and collisions\nPlease note that you must have a decent number of submeshes to get performance improvements when using octree"}],"entryType":"function"},{"name":"_collideForSubMesh","documentation":"","type":"(subMesh: SubMesh, transformMatrix: Matrix, collider: Collider) => void","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"transformMatrix","documentation":"","type":"Matrix"},{"name":"collider","documentation":"","type":"Collider"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_processCollisionsForSubMeshes","documentation":"","type":"(collider: Collider, transformMatrix: Matrix) => void","functionBody":[{"parameters":[{"name":"collider","documentation":"","type":"Collider"},{"name":"transformMatrix","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_checkCollision","documentation":"","type":"(collider: Collider) => void","functionBody":[{"parameters":[{"name":"collider","documentation":"","type":"Collider"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_generatePointsArray","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersects","documentation":"","type":"(ray: Ray, fastCheck?: boolean) => PickingInfo","functionBody":[{"parameters":[{"name":"ray","documentation":"","type":"Ray"},{"name":"fastCheck","documentation":"","type":"boolean"}],"returnType":"PickingInfo","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(name: string, newParent: Node, doNotCloneChildren?: boolean) => AbstractMesh","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"newParent","documentation":"","type":"Node"},{"name":"doNotCloneChildren","documentation":"","type":"boolean"}],"returnType":"AbstractMesh","documentation":""}],"entryType":"function"},{"name":"releaseSubMeshes","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"(doNotRecurse?: boolean) => void","functionBody":[{"parameters":[{"name":"doNotRecurse","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_BILLBOARDMODE_NONE","documentation":"","type":"any","entryType":"property"},{"name":"_BILLBOARDMODE_X","documentation":"","type":"any","entryType":"property"},{"name":"_BILLBOARDMODE_Y","documentation":"","type":"any","entryType":"property"},{"name":"_BILLBOARDMODE_Z","documentation":"","type":"any","entryType":"property"},{"name":"_BILLBOARDMODE_ALL","documentation":"","type":"any","entryType":"property"},{"name":"BILLBOARDMODE_NONE","documentation":"","type":"number","entryType":"property"},{"name":"BILLBOARDMODE_X","documentation":"","type":"number","entryType":"property"},{"name":"BILLBOARDMODE_Y","documentation":"","type":"number","entryType":"property"},{"name":"BILLBOARDMODE_Z","documentation":"","type":"number","entryType":"property"},{"name":"BILLBOARDMODE_ALL","documentation":"","type":"number","entryType":"property"},{"name":"onDisposeObservable","documentation":"An event triggered when the mesh is disposed.\n@type {BABYLON.Observable}","type":"Observable<AbstractMesh>","entryType":"property"},{"name":"_onDisposeObserver","documentation":"","type":"any","entryType":"property"},{"name":"onDispose","documentation":"","type":"() => void","entryType":"property"},{"name":"onCollideObservable","documentation":"An event triggered when this mesh collides with another one\n@type {BABYLON.Observable}","type":"Observable<AbstractMesh>","entryType":"property"},{"name":"_onCollideObserver","documentation":"","type":"any","entryType":"property"},{"name":"onCollide","documentation":"","type":"() => void","entryType":"property"},{"name":"onCollisionPositionChangeObservable","documentation":"An event triggered when the collision's position changes\n@type {BABYLON.Observable}","type":"Observable<Vector3>","entryType":"property"},{"name":"_onCollisionPositionChangeObserver","documentation":"","type":"any","entryType":"property"},{"name":"onCollisionPositionChange","documentation":"","type":"() => void","entryType":"property"},{"name":"onAfterWorldMatrixUpdateObservable","documentation":"An event triggered after the world matrix is updated\n@type {BABYLON.Observable}","type":"Observable<AbstractMesh>","entryType":"property"},{"name":"definedFacingForward","documentation":"","type":"boolean","entryType":"property"},{"name":"position","documentation":"","type":"Vector3","entryType":"property"},{"name":"_rotation","documentation":"","type":"any","entryType":"property"},{"name":"_rotationQuaternion","documentation":"","type":"Quaternion","entryType":"property"},{"name":"_scaling","documentation":"","type":"any","entryType":"property"},{"name":"billboardMode","documentation":"","type":"number","entryType":"property"},{"name":"visibility","documentation":"","type":"number","entryType":"property"},{"name":"alphaIndex","documentation":"","type":"number","entryType":"property"},{"name":"infiniteDistance","documentation":"","type":"boolean","entryType":"property"},{"name":"isVisible","documentation":"","type":"boolean","entryType":"property"},{"name":"isPickable","documentation":"","type":"boolean","entryType":"property"},{"name":"showBoundingBox","documentation":"","type":"boolean","entryType":"property"},{"name":"showSubMeshesBoundingBox","documentation":"","type":"boolean","entryType":"property"},{"name":"isBlocker","documentation":"","type":"boolean","entryType":"property"},{"name":"renderingGroupId","documentation":"","type":"number","entryType":"property"},{"name":"material","documentation":"","type":"Material","entryType":"property"},{"name":"receiveShadows","documentation":"","type":"boolean","entryType":"property"},{"name":"renderOutline","documentation":"","type":"boolean","entryType":"property"},{"name":"outlineColor","documentation":"","type":"Color3","entryType":"property"},{"name":"outlineWidth","documentation":"","type":"number","entryType":"property"},{"name":"renderOverlay","documentation":"","type":"boolean","entryType":"property"},{"name":"overlayColor","documentation":"","type":"Color3","entryType":"property"},{"name":"overlayAlpha","documentation":"","type":"number","entryType":"property"},{"name":"hasVertexAlpha","documentation":"","type":"boolean","entryType":"property"},{"name":"useVertexColors","documentation":"","type":"boolean","entryType":"property"},{"name":"applyFog","documentation":"","type":"boolean","entryType":"property"},{"name":"computeBonesUsingShaders","documentation":"","type":"boolean","entryType":"property"},{"name":"scalingDeterminant","documentation":"","type":"number","entryType":"property"},{"name":"numBoneInfluencers","documentation":"","type":"number","entryType":"property"},{"name":"useOctreeForRenderingSelection","documentation":"","type":"boolean","entryType":"property"},{"name":"useOctreeForPicking","documentation":"","type":"boolean","entryType":"property"},{"name":"useOctreeForCollisions","documentation":"","type":"boolean","entryType":"property"},{"name":"layerMask","documentation":"","type":"number","entryType":"property"},{"name":"alwaysSelectAsActiveMesh","documentation":"","type":"boolean","entryType":"property"},{"name":"actionManager","documentation":"This scene's action manager\n@type {BABYLON.ActionManager}","type":"ActionManager","entryType":"property"},{"name":"physicsImpostor","documentation":"","type":"PhysicsImpostor","entryType":"property"},{"name":"onPhysicsCollide","documentation":"","type":"(collidedMesh: AbstractMesh, contact: any) => void","entryType":"property"},{"name":"_checkCollisions","documentation":"","type":"any","entryType":"property"},{"name":"ellipsoid","documentation":"","type":"Vector3","entryType":"property"},{"name":"ellipsoidOffset","documentation":"","type":"Vector3","entryType":"property"},{"name":"_collider","documentation":"","type":"any","entryType":"property"},{"name":"_oldPositionForCollisions","documentation":"","type":"any","entryType":"property"},{"name":"_diffPositionForCollisions","documentation":"","type":"any","entryType":"property"},{"name":"_newPositionForCollisions","documentation":"","type":"any","entryType":"property"},{"name":"_meshToBoneReferal","documentation":"","type":"any","entryType":"property"},{"name":"edgesWidth","documentation":"","type":"number","entryType":"property"},{"name":"edgesColor","documentation":"","type":"Color4","entryType":"property"},{"name":"_edgesRenderer","documentation":"","type":"EdgesRenderer","entryType":"property"},{"name":"_localWorld","documentation":"","type":"any","entryType":"property"},{"name":"_worldMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"_rotateYByPI","documentation":"","type":"any","entryType":"property"},{"name":"_absolutePosition","documentation":"","type":"any","entryType":"property"},{"name":"_collisionsTransformMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_collisionsScalingMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_positions","documentation":"","type":"Vector3[]","entryType":"property"},{"name":"_isDirty","documentation":"","type":"any","entryType":"property"},{"name":"_masterMesh","documentation":"","type":"AbstractMesh","entryType":"property"},{"name":"_materialDefines","documentation":"","type":"MaterialDefines","entryType":"property"},{"name":"_boundingInfo","documentation":"","type":"BoundingInfo","entryType":"property"},{"name":"_pivotMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_isDisposed","documentation":"","type":"boolean","entryType":"property"},{"name":"_renderId","documentation":"","type":"number","entryType":"property"},{"name":"subMeshes","documentation":"","type":"SubMesh[]","entryType":"property"},{"name":"_submeshesOctree","documentation":"","type":"Octree<SubMesh>","entryType":"property"},{"name":"_intersectionsInProgress","documentation":"","type":"AbstractMesh[]","entryType":"property"},{"name":"_isWorldMatrixFrozen","documentation":"","type":"any","entryType":"property"},{"name":"_unIndexed","documentation":"","type":"boolean","entryType":"property"},{"name":"_poseMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"_waitingActions","documentation":"","type":"any","entryType":"property"},{"name":"_waitingFreezeWorldMatrix","documentation":"","type":"boolean","entryType":"property"},{"name":"_skeleton","documentation":"","type":"any","entryType":"property"},{"name":"_bonesTransformMatrices","documentation":"","type":"Float32Array","entryType":"property"},{"name":"skeleton","documentation":"","type":"Skeleton","entryType":"property"},{"name":"rotation","documentation":"Getting the rotation object.\nIf rotation quaternion is set, this vector will (almost always) be the Zero vector!","type":"Vector3","entryType":"property"},{"name":"scaling","documentation":"","type":"Vector3","entryType":"property"},{"name":"rotationQuaternion","documentation":"","type":"Quaternion","entryType":"property"},{"name":"isBlocked","documentation":"","type":"boolean","entryType":"property"},{"name":"useBones","documentation":"","type":"boolean","entryType":"property"},{"name":"worldMatrixFromCache","documentation":"","type":"Matrix","entryType":"property"},{"name":"absolutePosition","documentation":"","type":"Vector3","entryType":"property"},{"name":"isWorldMatrixFrozen","documentation":"","type":"boolean","entryType":"property"},{"name":"_rotationAxisCache","documentation":"","type":"any","entryType":"property"},{"name":"_lookAtVectorCache","documentation":"","type":"any","entryType":"property"},{"name":"checkCollisions","documentation":"","type":"boolean","entryType":"property"},{"name":"_onCollisionPositionChange","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Node","BABYLON.IDisposable","BABYLON.ICullable"]},{"name":"Buffer","documentation":"","type":"typeof Buffer","constructors":[{"parameters":[{"name":"engine","documentation":"","type":"any"},{"name":"data","documentation":"","type":"number[] | Float32Array"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"stride","documentation":"","type":"number"},{"name":"postponeInternalCreation","documentation":"","type":"boolean"},{"name":"instanced","documentation":"","type":"boolean"}],"returnType":"Buffer","documentation":""}],"entryType":"class","functions":[{"name":"createVertexBuffer","documentation":"","type":"(kind: string, offset: number, size: number, stride?: number) => VertexBuffer","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"},{"name":"offset","documentation":"","type":"number"},{"name":"size","documentation":"","type":"number"},{"name":"stride","documentation":"","type":"number"}],"returnType":"VertexBuffer","documentation":""}],"entryType":"function"},{"name":"isUpdatable","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getData","documentation":"","type":"() => number[] | Float32Array","functionBody":[{"parameters":[],"returnType":"number[] | Float32Array","documentation":""}],"entryType":"function"},{"name":"getBuffer","documentation":"","type":"() => WebGLBuffer","functionBody":[{"parameters":[],"returnType":"WebGLBuffer","documentation":""}],"entryType":"function"},{"name":"getStrideSize","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getIsInstanced","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"create","documentation":"","type":"(data?: number[] | Float32Array) => void","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"number[] | Float32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"update","documentation":"","type":"(data: number[] | Float32Array) => void","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"number[] | Float32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateDirectly","documentation":"","type":"(data: Float32Array, offset: number, vertexCount?: number) => void","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"Float32Array"},{"name":"offset","documentation":"","type":"number"},{"name":"vertexCount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_engine","documentation":"","type":"any","entryType":"property"},{"name":"_buffer","documentation":"","type":"any","entryType":"property"},{"name":"_data","documentation":"","type":"any","entryType":"property"},{"name":"_updatable","documentation":"","type":"any","entryType":"property"},{"name":"_strideSize","documentation":"","type":"any","entryType":"property"},{"name":"_instanced","documentation":"","type":"any","entryType":"property"}]},{"name":"CSG","documentation":"","type":"typeof CSG","constructors":[{"parameters":[],"returnType":"CSG","documentation":""}],"entryType":"class","functions":[{"name":"FromMesh","documentation":"","type":"(mesh: Mesh) => CSG","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"CSG","documentation":""}],"entryType":"function"},{"name":"FromPolygons","documentation":"","type":"(polygons: any) => any","functionBody":[{"parameters":[{"name":"polygons","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => CSG","functionBody":[{"parameters":[],"returnType":"CSG","documentation":""}],"entryType":"function"},{"name":"toPolygons","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"union","documentation":"","type":"(csg: CSG) => CSG","functionBody":[{"parameters":[{"name":"csg","documentation":"","type":"CSG"}],"returnType":"CSG","documentation":""}],"entryType":"function"},{"name":"unionInPlace","documentation":"","type":"(csg: CSG) => void","functionBody":[{"parameters":[{"name":"csg","documentation":"","type":"CSG"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"subtract","documentation":"","type":"(csg: CSG) => CSG","functionBody":[{"parameters":[{"name":"csg","documentation":"","type":"CSG"}],"returnType":"CSG","documentation":""}],"entryType":"function"},{"name":"subtractInPlace","documentation":"","type":"(csg: CSG) => void","functionBody":[{"parameters":[{"name":"csg","documentation":"","type":"CSG"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"intersect","documentation":"","type":"(csg: CSG) => CSG","functionBody":[{"parameters":[{"name":"csg","documentation":"","type":"CSG"}],"returnType":"CSG","documentation":""}],"entryType":"function"},{"name":"intersectInPlace","documentation":"","type":"(csg: CSG) => void","functionBody":[{"parameters":[{"name":"csg","documentation":"","type":"CSG"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"inverse","documentation":"","type":"() => CSG","functionBody":[{"parameters":[],"returnType":"CSG","documentation":""}],"entryType":"function"},{"name":"inverseInPlace","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"copyTransformAttributes","documentation":"","type":"(csg: CSG) => CSG","functionBody":[{"parameters":[{"name":"csg","documentation":"","type":"CSG"}],"returnType":"CSG","documentation":""}],"entryType":"function"},{"name":"buildMeshGeometry","documentation":"","type":"(name: string, scene: Scene, keepSubMeshes: boolean) => Mesh","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"keepSubMeshes","documentation":"","type":"boolean"}],"returnType":"Mesh","documentation":""}],"entryType":"function"},{"name":"toMesh","documentation":"","type":"(name: string, material: Material, scene: Scene, keepSubMeshes: boolean) => Mesh","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"material","documentation":"","type":"Material"},{"name":"scene","documentation":"","type":"Scene"},{"name":"keepSubMeshes","documentation":"","type":"boolean"}],"returnType":"Mesh","documentation":""}],"entryType":"function"}],"properties":[{"name":"polygons","documentation":"","type":"any","entryType":"property"},{"name":"matrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"position","documentation":"","type":"Vector3","entryType":"property"},{"name":"rotation","documentation":"","type":"Vector3","entryType":"property"},{"name":"rotationQuaternion","documentation":"","type":"Quaternion","entryType":"property"},{"name":"scaling","documentation":"","type":"Vector3","entryType":"property"}]},{"name":"Geometry","documentation":"","type":"typeof Geometry","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"vertexData","documentation":"","type":"VertexData"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"Geometry","documentation":""}],"entryType":"class","functions":[{"name":"getScene","documentation":"","type":"() => Scene","functionBody":[{"parameters":[],"returnType":"Scene","documentation":""}],"entryType":"function"},{"name":"getEngine","documentation":"","type":"() => Engine","functionBody":[{"parameters":[],"returnType":"Engine","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"setAllVerticesData","documentation":"","type":"(vertexData: VertexData, updatable?: boolean) => void","functionBody":[{"parameters":[{"name":"vertexData","documentation":"","type":"VertexData"},{"name":"updatable","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setVerticesData","documentation":"","type":"(kind: string, data: number[] | Float32Array, updatable?: boolean, stride?: number) => void","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"},{"name":"data","documentation":"","type":"number[] | Float32Array"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"stride","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setVerticesBuffer","documentation":"","type":"(buffer: VertexBuffer) => void","functionBody":[{"parameters":[{"name":"buffer","documentation":"","type":"VertexBuffer"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateVerticesDataDirectly","documentation":"","type":"(kind: string, data: Float32Array, offset: number) => void","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"},{"name":"data","documentation":"","type":"Float32Array"},{"name":"offset","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateVerticesData","documentation":"","type":"(kind: string, data: number[] | Float32Array, updateExtends?: boolean) => void","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"},{"name":"data","documentation":"","type":"number[] | Float32Array"},{"name":"updateExtends","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateBoundingInfo","documentation":"","type":"(updateExtends: any, data: any) => any","functionBody":[{"parameters":[{"name":"updateExtends","documentation":"","type":"any"},{"name":"data","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getTotalVertices","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getVerticesData","documentation":"","type":"(kind: string, copyWhenShared?: boolean) => number[] | Float32Array","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"},{"name":"copyWhenShared","documentation":"","type":"boolean"}],"returnType":"number[] | Float32Array","documentation":""}],"entryType":"function"},{"name":"getVertexBuffer","documentation":"","type":"(kind: string) => VertexBuffer","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"}],"returnType":"VertexBuffer","documentation":""}],"entryType":"function"},{"name":"getVertexBuffers","documentation":"","type":"() => { [key: string]: VertexBuffer; }","functionBody":[{"parameters":[],"returnType":"{ [key: string]: VertexBuffer; }","documentation":""}],"entryType":"function"},{"name":"isVerticesDataPresent","documentation":"","type":"(kind: string) => boolean","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getVerticesDataKinds","documentation":"","type":"() => string[]","functionBody":[{"parameters":[],"returnType":"string[]","documentation":""}],"entryType":"function"},{"name":"setIndices","documentation":"","type":"(indices: number[] | Int32Array, totalVertices?: number) => void","functionBody":[{"parameters":[{"name":"indices","documentation":"","type":"number[] | Int32Array"},{"name":"totalVertices","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTotalIndices","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getIndices","documentation":"","type":"(copyWhenShared?: boolean) => number[] | Int32Array","functionBody":[{"parameters":[{"name":"copyWhenShared","documentation":"","type":"boolean"}],"returnType":"number[] | Int32Array","documentation":""}],"entryType":"function"},{"name":"getIndexBuffer","documentation":"","type":"() => WebGLBuffer","functionBody":[{"parameters":[],"returnType":"WebGLBuffer","documentation":""}],"entryType":"function"},{"name":"releaseForMesh","documentation":"","type":"(mesh: Mesh, shouldDispose?: boolean) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"Mesh"},{"name":"shouldDispose","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"applyToMesh","documentation":"","type":"(mesh: Mesh) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateExtend","documentation":"","type":"(data?: any, stride?: any) => any","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"any"},{"name":"stride","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_applyToMesh","documentation":"","type":"(mesh: any) => any","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"notifyUpdate","documentation":"","type":"(kind?: any) => any","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"load","documentation":"","type":"(scene: Scene, onLoaded?: () => void) => void","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"onLoaded","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_queueLoad","documentation":"","type":"(scene: any, onLoaded?: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"onLoaded","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"toLeftHanded","documentation":"Invert the geometry to move from a right handed system to a left handed one.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Invert the geometry to move from a right handed system to a left handed one."}],"entryType":"function"},{"name":"isDisposed","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"copy","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"serializeVerticeData","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"ExtractFromMesh","documentation":"","type":"(mesh: Mesh, id: string) => Geometry","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"Mesh"},{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"},{"name":"RandomId","documentation":"You should now use Tools.RandomId(), this method is still here for legacy reasons.\nImplementation from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#answer-2117523\nBe aware Math.random() could cause collisions, but:\n\"All but 6 of the 128 bits of the ID are randomly generated, which means that for any two ids, there's a 1 in 2^^122 (or 5.3x10^^36) chance they'll collide\"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":"You should now use Tools.RandomId(), this method is still here for legacy reasons.\nImplementation from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#answer-2117523\nBe aware Math.random() could cause collisions, but:\n\"All but 6 of the 128 bits of the ID are randomly generated, which means that for any two ids, there's a 1 in 2^^122 (or 5.3x10^^36) chance they'll collide\""}],"entryType":"function"},{"name":"ImportGeometry","documentation":"","type":"(parsedGeometry: any, mesh: Mesh) => void","functionBody":[{"parameters":[{"name":"parsedGeometry","documentation":"","type":"any"},{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedVertexData: any, scene: Scene, rootUrl: string) => Geometry","functionBody":[{"parameters":[{"name":"parsedVertexData","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"}],"properties":[{"name":"id","documentation":"","type":"string","entryType":"property"},{"name":"delayLoadState","documentation":"","type":"number","entryType":"property"},{"name":"delayLoadingFile","documentation":"","type":"string","entryType":"property"},{"name":"onGeometryUpdated","documentation":"","type":"(geometry: Geometry, kind?: string) => void","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_engine","documentation":"","type":"any","entryType":"property"},{"name":"_meshes","documentation":"","type":"any","entryType":"property"},{"name":"_totalVertices","documentation":"","type":"any","entryType":"property"},{"name":"_indices","documentation":"","type":"any","entryType":"property"},{"name":"_vertexBuffers","documentation":"","type":"any","entryType":"property"},{"name":"_isDisposed","documentation":"","type":"any","entryType":"property"},{"name":"_extend","documentation":"","type":"any","entryType":"property"},{"name":"_boundingBias","documentation":"","type":"any","entryType":"property"},{"name":"_delayInfo","documentation":"","type":"any","entryType":"property"},{"name":"_indexBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_boundingInfo","documentation":"","type":"BoundingInfo","entryType":"property"},{"name":"_delayLoadingFunction","documentation":"","type":"(any: any, geometry: Geometry) => void","entryType":"property"},{"name":"_softwareSkinningRenderId","documentation":"","type":"number","entryType":"property"},{"name":"boundingBias","documentation":"The Bias Vector to apply on the bounding elements (box/sphere), the max extend is computed as v += v * bias.x + bias.y, the min is computed as v -= v * bias.x + bias.y\n@returns The Bias Vector","type":"Vector2","entryType":"property"},{"name":"extend","documentation":"","type":"{ minimum: Vector3; maximum: Vector3; }","entryType":"property"}],"heritageClauses":["BABYLON.IGetSetVerticesData"]},{"name":"GroundMesh","documentation":"","type":"typeof GroundMesh","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"GroundMesh","documentation":""}],"entryType":"class","functions":[{"name":"optimize","documentation":"","type":"(chunksCount: number, octreeBlocksSize?: number) => void","functionBody":[{"parameters":[{"name":"chunksCount","documentation":"","type":"number"},{"name":"octreeBlocksSize","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getHeightAtCoordinates","documentation":"Returns a height (y) value in the Worl system :\nthe ground altitude at the coordinates (x, z) expressed in the World system.\nReturns the ground y position if (x, z) are outside the ground surface.\nNot pertinent if the ground is rotated.","type":"(x: number, z: number) => number","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"}],"returnType":"number","documentation":"Returns a height (y) value in the Worl system :\nthe ground altitude at the coordinates (x, z) expressed in the World system.\nReturns the ground y position if (x, z) are outside the ground surface.\nNot pertinent if the ground is rotated."}],"entryType":"function"},{"name":"getNormalAtCoordinates","documentation":"Returns a normalized vector (Vector3) orthogonal to the ground\nat the ground coordinates (x, z) expressed in the World system.\nReturns Vector3(0, 1, 0) if (x, z) are outside the ground surface.\nNot pertinent if the ground is rotated.","type":"(x: number, z: number) => Vector3","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"}],"returnType":"Vector3","documentation":"Returns a normalized vector (Vector3) orthogonal to the ground\nat the ground coordinates (x, z) expressed in the World system.\nReturns Vector3(0, 1, 0) if (x, z) are outside the ground surface.\nNot pertinent if the ground is rotated."}],"entryType":"function"},{"name":"getNormalAtCoordinatesToRef","documentation":"Updates the Vector3 passed a reference with a normalized vector orthogonal to the ground\nat the ground coordinates (x, z) expressed in the World system.\nDoesn't uptade the reference Vector3 if (x, z) are outside the ground surface.\nNot pertinent if the ground is rotated.","type":"(x: number, z: number, ref: Vector3) => void","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"z","documentation":"","type":"number"},{"name":"ref","documentation":"","type":"Vector3"}],"returnType":"void","documentation":"Updates the Vector3 passed a reference with a normalized vector orthogonal to the ground\nat the ground coordinates (x, z) expressed in the World system.\nDoesn't uptade the reference Vector3 if (x, z) are outside the ground surface.\nNot pertinent if the ground is rotated."}],"entryType":"function"},{"name":"updateCoordinateHeights","documentation":"Force the heights to be recomputed for getHeightAtCoordinates() or getNormalAtCoordinates()\nif the ground has been updated.\nThis can be used in the render loop","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Force the heights to be recomputed for getHeightAtCoordinates() or getNormalAtCoordinates()\nif the ground has been updated.\nThis can be used in the render loop"}],"entryType":"function"},{"name":"_getFacetAt","documentation":"","type":"(x: any, z: any) => any","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"any"},{"name":"z","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_initHeightQuads","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_computeHeightQuads","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"generateOctree","documentation":"","type":"boolean","entryType":"property"},{"name":"_worldInverse","documentation":"","type":"any","entryType":"property"},{"name":"_heightQuads","documentation":"","type":"any","entryType":"property"},{"name":"_subdivisionsX","documentation":"","type":"number","entryType":"property"},{"name":"_subdivisionsY","documentation":"","type":"number","entryType":"property"},{"name":"_width","documentation":"","type":"number","entryType":"property"},{"name":"_height","documentation":"","type":"number","entryType":"property"},{"name":"_minX","documentation":"","type":"number","entryType":"property"},{"name":"_maxX","documentation":"","type":"number","entryType":"property"},{"name":"_minZ","documentation":"","type":"number","entryType":"property"},{"name":"_maxZ","documentation":"","type":"number","entryType":"property"},{"name":"subdivisions","documentation":"","type":"number","entryType":"property"},{"name":"subdivisionsX","documentation":"","type":"number","entryType":"property"},{"name":"subdivisionsY","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Mesh"]},{"name":"InstancedMesh","documentation":"Creates an instance based on a source mesh.","type":"typeof InstancedMesh","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"source","documentation":"","type":"Mesh"}],"returnType":"InstancedMesh","documentation":""}],"entryType":"class","functions":[{"name":"getTotalVertices","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getVerticesData","documentation":"","type":"(kind: string, copyWhenShared?: boolean) => number[] | Float32Array","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"},{"name":"copyWhenShared","documentation":"","type":"boolean"}],"returnType":"number[] | Float32Array","documentation":""}],"entryType":"function"},{"name":"isVerticesDataPresent","documentation":"","type":"(kind: string) => boolean","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getIndices","documentation":"","type":"() => number[] | Int32Array","functionBody":[{"parameters":[],"returnType":"number[] | Int32Array","documentation":""}],"entryType":"function"},{"name":"refreshBoundingInfo","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_preActivate","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_activate","documentation":"","type":"(renderId: number) => void","functionBody":[{"parameters":[{"name":"renderId","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getLOD","documentation":"","type":"(camera: Camera) => AbstractMesh","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"Camera"}],"returnType":"AbstractMesh","documentation":""}],"entryType":"function"},{"name":"_syncSubMeshes","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_generatePointsArray","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(name: string, newParent: Node, doNotCloneChildren?: boolean) => InstancedMesh","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"newParent","documentation":"","type":"Node"},{"name":"doNotCloneChildren","documentation":"","type":"boolean"}],"returnType":"InstancedMesh","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"(doNotRecurse?: boolean) => void","functionBody":[{"parameters":[{"name":"doNotRecurse","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_sourceMesh","documentation":"","type":"any","entryType":"property"},{"name":"_currentLOD","documentation":"","type":"any","entryType":"property"},{"name":"receiveShadows","documentation":"","type":"boolean","entryType":"property"},{"name":"material","documentation":"","type":"Material","entryType":"property"},{"name":"visibility","documentation":"","type":"number","entryType":"property"},{"name":"skeleton","documentation":"","type":"Skeleton","entryType":"property"},{"name":"renderingGroupId","documentation":"","type":"number","entryType":"property"},{"name":"sourceMesh","documentation":"","type":"Mesh","entryType":"property"},{"name":"_positions","documentation":"","type":"Vector3[]","entryType":"property"}],"heritageClauses":["BABYLON.AbstractMesh"]},{"name":"LinesMesh","documentation":"","type":"typeof LinesMesh","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"parent","documentation":"","type":"Node"},{"name":"source","documentation":"","type":"LinesMesh"},{"name":"doNotCloneChildren","documentation":"","type":"boolean"}],"returnType":"LinesMesh","documentation":""}],"entryType":"class","functions":[{"name":"createInstance","documentation":"","type":"(name: string) => InstancedMesh","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"InstancedMesh","documentation":""}],"entryType":"function"},{"name":"_bind","documentation":"","type":"(subMesh: SubMesh, effect: Effect, fillMode: number) => void","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"effect","documentation":"","type":"Effect"},{"name":"fillMode","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_draw","documentation":"","type":"(subMesh: SubMesh, fillMode: number, instancesCount?: number) => void","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"fillMode","documentation":"","type":"number"},{"name":"instancesCount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"(doNotRecurse?: boolean) => void","functionBody":[{"parameters":[{"name":"doNotRecurse","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(name: string, newParent?: Node, doNotCloneChildren?: boolean) => LinesMesh","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"newParent","documentation":"","type":"Node"},{"name":"doNotCloneChildren","documentation":"","type":"boolean"}],"returnType":"LinesMesh","documentation":""}],"entryType":"function"}],"properties":[{"name":"color","documentation":"","type":"Color3","entryType":"property"},{"name":"alpha","documentation":"","type":"number","entryType":"property"},{"name":"_positionBuffer","documentation":"","type":"any","entryType":"property"},{"name":"intersectionThreshold","documentation":"The intersection Threshold is the margin applied when intersection a segment of the LinesMesh with a Ray.\nThis margin is expressed in world space coordinates, so its value may vary.\nDefault value is 0.1\n@returns the intersection Threshold value.\nThe intersection Threshold is the margin applied when intersection a segment of the LinesMesh with a Ray.\nThis margin is expressed in world space coordinates, so its value may vary.","type":"number","entryType":"property"},{"name":"_intersectionThreshold","documentation":"","type":"any","entryType":"property"},{"name":"_colorShader","documentation":"","type":"any","entryType":"property"},{"name":"material","documentation":"","type":"Material","entryType":"property"},{"name":"checkCollisions","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.Mesh"]},{"name":"_InstancesBatch","documentation":"","type":"typeof _InstancesBatch","constructors":[{"parameters":[],"returnType":"_InstancesBatch","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"mustReturn","documentation":"","type":"boolean","entryType":"property"},{"name":"visibleInstances","documentation":"","type":"InstancedMesh[][]","entryType":"property"},{"name":"renderSelf","documentation":"","type":"boolean[]","entryType":"property"}]},{"name":"Mesh","documentation":"","type":"typeof Mesh","constructors":[{"parameters":[{"name":"name","documentation":"The value used by scene.getMeshByName() to do a lookup.","type":"string"},{"name":"scene","documentation":"The scene to add this mesh to.","type":"Scene"},{"name":"parent","documentation":"The parent of this mesh, if it has one","type":"Node"},{"name":"source","documentation":"An optional Mesh from which geometry is shared, cloned.","type":"Mesh"},{"name":"doNotCloneChildren","documentation":"When cloning, skip cloning child meshes of source, default False.\nWhen false, achieved by calling a clone(), also passing False.\nThis will make creation of children, recursive.","type":"boolean"},{"name":"clonePhysicsImpostor","documentation":"","type":"boolean"}],"returnType":"Mesh","documentation":"@constructor"}],"entryType":"class","functions":[{"name":"toString","documentation":"","type":"(fullDetails?: boolean) => string","functionBody":[{"parameters":[{"name":"fullDetails","documentation":"- support for multiple levels of logging within scene loading","type":"boolean"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"_sortLODLevels","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"addLODLevel","documentation":"Add a mesh as LOD level triggered at the given distance.\ntuto : http://doc.babylonjs.com/tutorials/How_to_use_LOD\n@return {Mesh} This mesh (for chaining)","type":"(distance: number, mesh: Mesh) => Mesh","functionBody":[{"parameters":[{"name":"distance","documentation":"The distance from the center of the object to show this level","type":"number"},{"name":"mesh","documentation":"The mesh to be added as LOD level","type":"Mesh"}],"returnType":"Mesh","documentation":"Add a mesh as LOD level triggered at the given distance.\ntuto : http://doc.babylonjs.com/tutorials/How_to_use_LOD\n@return {Mesh} This mesh (for chaining)"}],"entryType":"function"},{"name":"getLODLevelAtDistance","documentation":"Returns the LOD level mesh at the passed distance or null if not found.\nIt is related to the method `addLODLevel(distance, mesh)`.\ntuto : http://doc.babylonjs.com/tutorials/How_to_use_LOD","type":"(distance: number) => Mesh","functionBody":[{"parameters":[{"name":"distance","documentation":"","type":"number"}],"returnType":"Mesh","documentation":"Returns the LOD level mesh at the passed distance or null if not found.\nIt is related to the method `addLODLevel(distance, mesh)`.\ntuto : http://doc.babylonjs.com/tutorials/How_to_use_LOD"}],"entryType":"function"},{"name":"removeLODLevel","documentation":"Remove a mesh from the LOD array\ntuto : http://doc.babylonjs.com/tutorials/How_to_use_LOD\n@return {Mesh} This mesh (for chaining)","type":"(mesh: Mesh) => Mesh","functionBody":[{"parameters":[{"name":"mesh","documentation":"The mesh to be removed.","type":"Mesh"}],"returnType":"Mesh","documentation":"Remove a mesh from the LOD array\ntuto : http://doc.babylonjs.com/tutorials/How_to_use_LOD\n@return {Mesh} This mesh (for chaining)"}],"entryType":"function"},{"name":"getLOD","documentation":"Returns the registered LOD mesh distant from the parameter `camera` position if any, else returns the current mesh.\ntuto : http://doc.babylonjs.com/tutorials/How_to_use_LOD","type":"(camera: Camera, boundingSphere?: BoundingSphere) => AbstractMesh","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"Camera"},{"name":"boundingSphere","documentation":"","type":"BoundingSphere"}],"returnType":"AbstractMesh","documentation":"Returns the registered LOD mesh distant from the parameter `camera` position if any, else returns the current mesh.\ntuto : http://doc.babylonjs.com/tutorials/How_to_use_LOD"}],"entryType":"function"},{"name":"getTotalVertices","documentation":"Returns a positive integer : the total number of vertices within the mesh geometry or zero if the mesh has no geometry.","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":"Returns a positive integer : the total number of vertices within the mesh geometry or zero if the mesh has no geometry."}],"entryType":"function"},{"name":"getVerticesData","documentation":"Returns an array of integers or floats, or a Float32Array, depending on the requested `kind` (positions, indices, normals, etc).\nIf `copywhenShared` is true (default false) and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\nReturns null if the mesh has no geometry or no vertex buffer.\nPossible `kind` values :\n- BABYLON.VertexBuffer.PositionKind\n- BABYLON.VertexBuffer.UVKind\n- BABYLON.VertexBuffer.UV2Kind\n- BABYLON.VertexBuffer.UV3Kind\n- BABYLON.VertexBuffer.UV4Kind\n- BABYLON.VertexBuffer.UV5Kind\n- BABYLON.VertexBuffer.UV6Kind\n- BABYLON.VertexBuffer.ColorKind\n- BABYLON.VertexBuffer.MatricesIndicesKind\n- BABYLON.VertexBuffer.MatricesIndicesExtraKind\n- BABYLON.VertexBuffer.MatricesWeightsKind\n- BABYLON.VertexBuffer.MatricesWeightsExtraKind","type":"(kind: string, copyWhenShared?: boolean) => number[] | Float32Array","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"},{"name":"copyWhenShared","documentation":"","type":"boolean"}],"returnType":"number[] | Float32Array","documentation":"Returns an array of integers or floats, or a Float32Array, depending on the requested `kind` (positions, indices, normals, etc).\nIf `copywhenShared` is true (default false) and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\nReturns null if the mesh has no geometry or no vertex buffer.\nPossible `kind` values :\n- BABYLON.VertexBuffer.PositionKind\n- BABYLON.VertexBuffer.UVKind\n- BABYLON.VertexBuffer.UV2Kind\n- BABYLON.VertexBuffer.UV3Kind\n- BABYLON.VertexBuffer.UV4Kind\n- BABYLON.VertexBuffer.UV5Kind\n- BABYLON.VertexBuffer.UV6Kind\n- BABYLON.VertexBuffer.ColorKind\n- BABYLON.VertexBuffer.MatricesIndicesKind\n- BABYLON.VertexBuffer.MatricesIndicesExtraKind\n- BABYLON.VertexBuffer.MatricesWeightsKind\n- BABYLON.VertexBuffer.MatricesWeightsExtraKind"}],"entryType":"function"},{"name":"getVertexBuffer","documentation":"Returns the mesh VertexBuffer object from the requested `kind` : positions, indices, normals, etc.\nReturns `undefined` if the mesh has no geometry.\nPossible `kind` values :\n- BABYLON.VertexBuffer.PositionKind\n- BABYLON.VertexBuffer.UVKind\n- BABYLON.VertexBuffer.UV2Kind\n- BABYLON.VertexBuffer.UV3Kind\n- BABYLON.VertexBuffer.UV4Kind\n- BABYLON.VertexBuffer.UV5Kind\n- BABYLON.VertexBuffer.UV6Kind\n- BABYLON.VertexBuffer.ColorKind\n- BABYLON.VertexBuffer.MatricesIndicesKind\n- BABYLON.VertexBuffer.MatricesIndicesExtraKind\n- BABYLON.VertexBuffer.MatricesWeightsKind\n- BABYLON.VertexBuffer.MatricesWeightsExtraKind","type":"(kind: any) => VertexBuffer","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"any"}],"returnType":"VertexBuffer","documentation":"Returns the mesh VertexBuffer object from the requested `kind` : positions, indices, normals, etc.\nReturns `undefined` if the mesh has no geometry.\nPossible `kind` values :\n- BABYLON.VertexBuffer.PositionKind\n- BABYLON.VertexBuffer.UVKind\n- BABYLON.VertexBuffer.UV2Kind\n- BABYLON.VertexBuffer.UV3Kind\n- BABYLON.VertexBuffer.UV4Kind\n- BABYLON.VertexBuffer.UV5Kind\n- BABYLON.VertexBuffer.UV6Kind\n- BABYLON.VertexBuffer.ColorKind\n- BABYLON.VertexBuffer.MatricesIndicesKind\n- BABYLON.VertexBuffer.MatricesIndicesExtraKind\n- BABYLON.VertexBuffer.MatricesWeightsKind\n- BABYLON.VertexBuffer.MatricesWeightsExtraKind"}],"entryType":"function"},{"name":"isVerticesDataPresent","documentation":"Returns a boolean depending on the existence of the Vertex Data for the requested `kind`.\nPossible `kind` values :\n- BABYLON.VertexBuffer.PositionKind\n- BABYLON.VertexBuffer.UVKind\n- BABYLON.VertexBuffer.UV2Kind\n- BABYLON.VertexBuffer.UV3Kind\n- BABYLON.VertexBuffer.UV4Kind\n- BABYLON.VertexBuffer.UV5Kind\n- BABYLON.VertexBuffer.UV6Kind\n- BABYLON.VertexBuffer.ColorKind\n- BABYLON.VertexBuffer.MatricesIndicesKind\n- BABYLON.VertexBuffer.MatricesIndicesExtraKind\n- BABYLON.VertexBuffer.MatricesWeightsKind\n- BABYLON.VertexBuffer.MatricesWeightsExtraKind","type":"(kind: string) => boolean","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"}],"returnType":"boolean","documentation":"Returns a boolean depending on the existence of the Vertex Data for the requested `kind`.\nPossible `kind` values :\n- BABYLON.VertexBuffer.PositionKind\n- BABYLON.VertexBuffer.UVKind\n- BABYLON.VertexBuffer.UV2Kind\n- BABYLON.VertexBuffer.UV3Kind\n- BABYLON.VertexBuffer.UV4Kind\n- BABYLON.VertexBuffer.UV5Kind\n- BABYLON.VertexBuffer.UV6Kind\n- BABYLON.VertexBuffer.ColorKind\n- BABYLON.VertexBuffer.MatricesIndicesKind\n- BABYLON.VertexBuffer.MatricesIndicesExtraKind\n- BABYLON.VertexBuffer.MatricesWeightsKind\n- BABYLON.VertexBuffer.MatricesWeightsExtraKind"}],"entryType":"function"},{"name":"getVerticesDataKinds","documentation":"Returns a string : the list of existing `kinds` of Vertex Data for this mesh.\nPossible `kind` values :\n- BABYLON.VertexBuffer.PositionKind\n- BABYLON.VertexBuffer.UVKind\n- BABYLON.VertexBuffer.UV2Kind\n- BABYLON.VertexBuffer.UV3Kind\n- BABYLON.VertexBuffer.UV4Kind\n- BABYLON.VertexBuffer.UV5Kind\n- BABYLON.VertexBuffer.UV6Kind\n- BABYLON.VertexBuffer.ColorKind\n- BABYLON.VertexBuffer.MatricesIndicesKind\n- BABYLON.VertexBuffer.MatricesIndicesExtraKind\n- BABYLON.VertexBuffer.MatricesWeightsKind\n- BABYLON.VertexBuffer.MatricesWeightsExtraKind","type":"() => string[]","functionBody":[{"parameters":[],"returnType":"string[]","documentation":"Returns a string : the list of existing `kinds` of Vertex Data for this mesh.\nPossible `kind` values :\n- BABYLON.VertexBuffer.PositionKind\n- BABYLON.VertexBuffer.UVKind\n- BABYLON.VertexBuffer.UV2Kind\n- BABYLON.VertexBuffer.UV3Kind\n- BABYLON.VertexBuffer.UV4Kind\n- BABYLON.VertexBuffer.UV5Kind\n- BABYLON.VertexBuffer.UV6Kind\n- BABYLON.VertexBuffer.ColorKind\n- BABYLON.VertexBuffer.MatricesIndicesKind\n- BABYLON.VertexBuffer.MatricesIndicesExtraKind\n- BABYLON.VertexBuffer.MatricesWeightsKind\n- BABYLON.VertexBuffer.MatricesWeightsExtraKind"}],"entryType":"function"},{"name":"getTotalIndices","documentation":"Returns a positive integer : the total number of indices in this mesh geometry.\nReturns zero if the mesh has no geometry.","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":"Returns a positive integer : the total number of indices in this mesh geometry.\nReturns zero if the mesh has no geometry."}],"entryType":"function"},{"name":"getIndices","documentation":"Returns an array of integers or a Int32Array populated with the mesh indices.\nIf the parameter `copyWhenShared` is true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\nReturns an empty array if the mesh has no geometry.","type":"(copyWhenShared?: boolean) => number[] | Int32Array","functionBody":[{"parameters":[{"name":"copyWhenShared","documentation":"","type":"boolean"}],"returnType":"number[] | Int32Array","documentation":"Returns an array of integers or a Int32Array populated with the mesh indices.\nIf the parameter `copyWhenShared` is true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\nReturns an empty array if the mesh has no geometry."}],"entryType":"function"},{"name":"isReady","documentation":"Boolean : true once the mesh is ready after all the delayed process (loading, etc) are complete.","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Boolean : true once the mesh is ready after all the delayed process (loading, etc) are complete."}],"entryType":"function"},{"name":"isDisposed","documentation":"Boolean : true if the mesh has been disposed.","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Boolean : true if the mesh has been disposed."}],"entryType":"function"},{"name":"freezeNormals","documentation":"This function affects parametric shapes on vertex position update only : ribbons, tubes, etc.\nIt has no effect at all on other shapes.\nIt prevents the mesh normals from being recomputed on next `positions` array update.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"This function affects parametric shapes on vertex position update only : ribbons, tubes, etc.\nIt has no effect at all on other shapes.\nIt prevents the mesh normals from being recomputed on next `positions` array update."}],"entryType":"function"},{"name":"unfreezeNormals","documentation":"This function affects parametric shapes on vertex position update only : ribbons, tubes, etc.\nIt has no effect at all on other shapes.\nIt reactivates the mesh normals computation if it was previously frozen.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"This function affects parametric shapes on vertex position update only : ribbons, tubes, etc.\nIt has no effect at all on other shapes.\nIt reactivates the mesh normals computation if it was previously frozen."}],"entryType":"function"},{"name":"_preActivate","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_preActivateForIntermediateRendering","documentation":"","type":"(renderId: number) => void","functionBody":[{"parameters":[{"name":"renderId","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_registerInstanceForRenderId","documentation":"","type":"(instance: InstancedMesh, renderId: number) => void","functionBody":[{"parameters":[{"name":"instance","documentation":"","type":"InstancedMesh"},{"name":"renderId","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"refreshBoundingInfo","documentation":"This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\nThis means the mesh underlying bounding box and sphere are recomputed.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\nThis means the mesh underlying bounding box and sphere are recomputed."}],"entryType":"function"},{"name":"_createGlobalSubMesh","documentation":"","type":"() => SubMesh","functionBody":[{"parameters":[],"returnType":"SubMesh","documentation":""}],"entryType":"function"},{"name":"subdivide","documentation":"","type":"(count: number) => void","functionBody":[{"parameters":[{"name":"count","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setVerticesData","documentation":"Sets the vertex data of the mesh geometry for the requested `kind`.\nIf the mesh has no geometry, a new Geometry object is set to the mesh and then passed this vertex data.\nThe `data` are either a numeric array either a Float32Array.\nThe parameter `updatable` is passed as is to the underlying Geometry object constructor (if initianilly none) or updater.\nThe parameter `stride` is an optional positive integer, it is usually automatically deducted from the `kind` (3 for positions or normals, 2 for UV, etc).\nNote that a new underlying VertexBuffer object is created each call.\nIf the `kind` is the `PositionKind`, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\n\nPossible `kind` values :\n- BABYLON.VertexBuffer.PositionKind\n- BABYLON.VertexBuffer.UVKind\n- BABYLON.VertexBuffer.UV2Kind\n- BABYLON.VertexBuffer.UV3Kind\n- BABYLON.VertexBuffer.UV4Kind\n- BABYLON.VertexBuffer.UV5Kind\n- BABYLON.VertexBuffer.UV6Kind\n- BABYLON.VertexBuffer.ColorKind\n- BABYLON.VertexBuffer.MatricesIndicesKind\n- BABYLON.VertexBuffer.MatricesIndicesExtraKind\n- BABYLON.VertexBuffer.MatricesWeightsKind\n- BABYLON.VertexBuffer.MatricesWeightsExtraKind","type":"(kind: string, data: number[] | Float32Array, updatable?: boolean, stride?: number) => void","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"},{"name":"data","documentation":"","type":"number[] | Float32Array"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"stride","documentation":"","type":"number"}],"returnType":"void","documentation":"Sets the vertex data of the mesh geometry for the requested `kind`.\nIf the mesh has no geometry, a new Geometry object is set to the mesh and then passed this vertex data.\nThe `data` are either a numeric array either a Float32Array.\nThe parameter `updatable` is passed as is to the underlying Geometry object constructor (if initianilly none) or updater.\nThe parameter `stride` is an optional positive integer, it is usually automatically deducted from the `kind` (3 for positions or normals, 2 for UV, etc).\nNote that a new underlying VertexBuffer object is created each call.\nIf the `kind` is the `PositionKind`, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\n\nPossible `kind` values :\n- BABYLON.VertexBuffer.PositionKind\n- BABYLON.VertexBuffer.UVKind\n- BABYLON.VertexBuffer.UV2Kind\n- BABYLON.VertexBuffer.UV3Kind\n- BABYLON.VertexBuffer.UV4Kind\n- BABYLON.VertexBuffer.UV5Kind\n- BABYLON.VertexBuffer.UV6Kind\n- BABYLON.VertexBuffer.ColorKind\n- BABYLON.VertexBuffer.MatricesIndicesKind\n- BABYLON.VertexBuffer.MatricesIndicesExtraKind\n- BABYLON.VertexBuffer.MatricesWeightsKind\n- BABYLON.VertexBuffer.MatricesWeightsExtraKind"}],"entryType":"function"},{"name":"setVerticesBuffer","documentation":"","type":"(buffer: VertexBuffer) => void","functionBody":[{"parameters":[{"name":"buffer","documentation":"","type":"VertexBuffer"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateVerticesData","documentation":"Updates the existing vertex data of the mesh geometry for the requested `kind`.\nIf the mesh has no geometry, it is simply returned as it is.\nThe `data` are either a numeric array either a Float32Array.\nNo new underlying VertexBuffer object is created.\nIf the `kind` is the `PositionKind` and if `updateExtends` is true, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\nIf the parameter `makeItUnique` is true, a new global geometry is created from this positions and is set to the mesh.\n\nPossible `kind` values :\n- BABYLON.VertexBuffer.PositionKind\n- BABYLON.VertexBuffer.UVKind\n- BABYLON.VertexBuffer.UV2Kind\n- BABYLON.VertexBuffer.UV3Kind\n- BABYLON.VertexBuffer.UV4Kind\n- BABYLON.VertexBuffer.UV5Kind\n- BABYLON.VertexBuffer.UV6Kind\n- BABYLON.VertexBuffer.ColorKind\n- BABYLON.VertexBuffer.MatricesIndicesKind\n- BABYLON.VertexBuffer.MatricesIndicesExtraKind\n- BABYLON.VertexBuffer.MatricesWeightsKind\n- BABYLON.VertexBuffer.MatricesWeightsExtraKind","type":"(kind: string, data: number[] | Float32Array, updateExtends?: boolean, makeItUnique?: boolean) =>...","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"},{"name":"data","documentation":"","type":"number[] | Float32Array"},{"name":"updateExtends","documentation":"","type":"boolean"},{"name":"makeItUnique","documentation":"","type":"boolean"}],"returnType":"void","documentation":"Updates the existing vertex data of the mesh geometry for the requested `kind`.\nIf the mesh has no geometry, it is simply returned as it is.\nThe `data` are either a numeric array either a Float32Array.\nNo new underlying VertexBuffer object is created.\nIf the `kind` is the `PositionKind` and if `updateExtends` is true, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\nIf the parameter `makeItUnique` is true, a new global geometry is created from this positions and is set to the mesh.\n\nPossible `kind` values :\n- BABYLON.VertexBuffer.PositionKind\n- BABYLON.VertexBuffer.UVKind\n- BABYLON.VertexBuffer.UV2Kind\n- BABYLON.VertexBuffer.UV3Kind\n- BABYLON.VertexBuffer.UV4Kind\n- BABYLON.VertexBuffer.UV5Kind\n- BABYLON.VertexBuffer.UV6Kind\n- BABYLON.VertexBuffer.ColorKind\n- BABYLON.VertexBuffer.MatricesIndicesKind\n- BABYLON.VertexBuffer.MatricesIndicesExtraKind\n- BABYLON.VertexBuffer.MatricesWeightsKind\n- BABYLON.VertexBuffer.MatricesWeightsExtraKind"}],"entryType":"function"},{"name":"updateVerticesDataDirectly","documentation":"Deprecated since BabylonJS v2.3","type":"(kind: string, data: Float32Array, offset?: number, makeItUnique?: boolean) => void","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"},{"name":"data","documentation":"","type":"Float32Array"},{"name":"offset","documentation":"","type":"number"},{"name":"makeItUnique","documentation":"","type":"boolean"}],"returnType":"void","documentation":"Deprecated since BabylonJS v2.3"}],"entryType":"function"},{"name":"updateMeshPositions","documentation":"This method updates the vertex positions of an updatable mesh according to the `positionFunction` returned values.\ntuto : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#other-shapes-updatemeshpositions\nThe parameter `positionFunction` is a simple JS function what is passed the mesh `positions` array. It doesn't need to return anything.\nThe parameter `computeNormals` is a boolean (default true) to enable/disable the mesh normal recomputation after the vertex position update.","type":"(positionFunction: any, computeNormals?: boolean) => void","functionBody":[{"parameters":[{"name":"positionFunction","documentation":"","type":"any"},{"name":"computeNormals","documentation":"","type":"boolean"}],"returnType":"void","documentation":"This method updates the vertex positions of an updatable mesh according to the `positionFunction` returned values.\ntuto : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#other-shapes-updatemeshpositions\nThe parameter `positionFunction` is a simple JS function what is passed the mesh `positions` array. It doesn't need to return anything.\nThe parameter `computeNormals` is a boolean (default true) to enable/disable the mesh normal recomputation after the vertex position update."}],"entryType":"function"},{"name":"makeGeometryUnique","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setIndices","documentation":"Sets the mesh indices.\nExpects an array populated with integers or a Int32Array.\nIf the mesh has no geometry, a new Geometry object is created and set to the mesh.\nThis method creates a new index buffer each call.","type":"(indices: number[] | Int32Array, totalVertices?: number) => void","functionBody":[{"parameters":[{"name":"indices","documentation":"","type":"number[] | Int32Array"},{"name":"totalVertices","documentation":"","type":"number"}],"returnType":"void","documentation":"Sets the mesh indices.\nExpects an array populated with integers or a Int32Array.\nIf the mesh has no geometry, a new Geometry object is created and set to the mesh.\nThis method creates a new index buffer each call."}],"entryType":"function"},{"name":"toLeftHanded","documentation":"Invert the geometry to move from a right handed system to a left handed one.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Invert the geometry to move from a right handed system to a left handed one."}],"entryType":"function"},{"name":"_bind","documentation":"","type":"(subMesh: SubMesh, effect: Effect, fillMode: number) => void","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"effect","documentation":"","type":"Effect"},{"name":"fillMode","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_draw","documentation":"","type":"(subMesh: SubMesh, fillMode: number, instancesCount?: number) => void","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"fillMode","documentation":"","type":"number"},{"name":"instancesCount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"registerBeforeRender","documentation":"Registers for this mesh a javascript function called just before the rendering process.\nThis function is passed the current mesh and doesn't return anything.","type":"(func: (mesh: AbstractMesh) => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"(mesh: AbstractMesh) => void"}],"returnType":"void","documentation":"Registers for this mesh a javascript function called just before the rendering process.\nThis function is passed the current mesh and doesn't return anything."}],"entryType":"function"},{"name":"unregisterBeforeRender","documentation":"Disposes a previously registered javascript function called before the rendering.\nThis function is passed the current mesh and doesn't return anything.","type":"(func: (mesh: AbstractMesh) => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"(mesh: AbstractMesh) => void"}],"returnType":"void","documentation":"Disposes a previously registered javascript function called before the rendering.\nThis function is passed the current mesh and doesn't return anything."}],"entryType":"function"},{"name":"registerAfterRender","documentation":"Registers for this mesh a javascript function called just after the rendering is complete.\nThis function is passed the current mesh and doesn't return anything.","type":"(func: (mesh: AbstractMesh) => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"(mesh: AbstractMesh) => void"}],"returnType":"void","documentation":"Registers for this mesh a javascript function called just after the rendering is complete.\nThis function is passed the current mesh and doesn't return anything."}],"entryType":"function"},{"name":"unregisterAfterRender","documentation":"Disposes a previously registered javascript function called after the rendering.\nThis function is passed the current mesh and doesn't return anything.","type":"(func: (mesh: AbstractMesh) => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"(mesh: AbstractMesh) => void"}],"returnType":"void","documentation":"Disposes a previously registered javascript function called after the rendering.\nThis function is passed the current mesh and doesn't return anything."}],"entryType":"function"},{"name":"_getInstancesRenderList","documentation":"","type":"(subMeshId: number) => _InstancesBatch","functionBody":[{"parameters":[{"name":"subMeshId","documentation":"","type":"number"}],"returnType":"_InstancesBatch","documentation":""}],"entryType":"function"},{"name":"_renderWithInstances","documentation":"","type":"(subMesh: SubMesh, fillMode: number, batch: _InstancesBatch, effect: Effect, engine: Engine) => v...","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"fillMode","documentation":"","type":"number"},{"name":"batch","documentation":"","type":"_InstancesBatch"},{"name":"effect","documentation":"","type":"Effect"},{"name":"engine","documentation":"","type":"Engine"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_processRendering","documentation":"","type":"(subMesh: SubMesh, effect: Effect, fillMode: number, batch: _InstancesBatch, hardwareInstancedRen...","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"effect","documentation":"","type":"Effect"},{"name":"fillMode","documentation":"","type":"number"},{"name":"batch","documentation":"","type":"_InstancesBatch"},{"name":"hardwareInstancedRendering","documentation":"","type":"boolean"},{"name":"onBeforeDraw","documentation":"","type":"(isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => void"},{"name":"effectiveMaterial","documentation":"","type":"Material"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"render","documentation":"Triggers the draw call for the mesh.\nUsually, you don't need to call this method by your own because the mesh rendering is handled by the scene rendering manager.","type":"(subMesh: SubMesh, enableAlphaMode: boolean) => void","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"enableAlphaMode","documentation":"","type":"boolean"}],"returnType":"void","documentation":"Triggers the draw call for the mesh.\nUsually, you don't need to call this method by your own because the mesh rendering is handled by the scene rendering manager."}],"entryType":"function"},{"name":"_onBeforeDraw","documentation":"","type":"(isInstance: any, world: any, effectiveMaterial: any) => any","functionBody":[{"parameters":[{"name":"isInstance","documentation":"","type":"any"},{"name":"world","documentation":"","type":"any"},{"name":"effectiveMaterial","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getEmittedParticleSystems","documentation":"Returns an array populated with ParticleSystem objects whose the mesh is the emitter.","type":"() => ParticleSystem[]","functionBody":[{"parameters":[],"returnType":"ParticleSystem[]","documentation":"Returns an array populated with ParticleSystem objects whose the mesh is the emitter."}],"entryType":"function"},{"name":"getHierarchyEmittedParticleSystems","documentation":"Returns an array populated with ParticleSystem objects whose the mesh or its children are the emitter.","type":"() => ParticleSystem[]","functionBody":[{"parameters":[],"returnType":"ParticleSystem[]","documentation":"Returns an array populated with ParticleSystem objects whose the mesh or its children are the emitter."}],"entryType":"function"},{"name":"_checkDelayState","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_queueLoad","documentation":"","type":"(mesh: any, scene: any) => any","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"isInFrustum","documentation":"Boolean, true is the mesh in the frustum defined by the Plane objects from the `frustumPlanes` array parameter.","type":"(frustumPlanes: Plane[]) => boolean","functionBody":[{"parameters":[{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"boolean","documentation":"Boolean, true is the mesh in the frustum defined by the Plane objects from the `frustumPlanes` array parameter."}],"entryType":"function"},{"name":"setMaterialByID","documentation":"Sets the mesh material by the material or multiMaterial `id` property.\nThe material `id` is a string identifying the material or the multiMaterial.\nThis method returns nothing.","type":"(id: string) => void","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"void","documentation":"Sets the mesh material by the material or multiMaterial `id` property.\nThe material `id` is a string identifying the material or the multiMaterial.\nThis method returns nothing."}],"entryType":"function"},{"name":"getAnimatables","documentation":"Returns as a new array populated with the mesh material and/or skeleton, if any.","type":"() => IAnimatable[]","functionBody":[{"parameters":[],"returnType":"IAnimatable[]","documentation":"Returns as a new array populated with the mesh material and/or skeleton, if any."}],"entryType":"function"},{"name":"bakeTransformIntoVertices","documentation":"Modifies the mesh geometry according to the passed transformation matrix.\nThis method returns nothing but it really modifies the mesh even if it's originally not set as updatable.\nThe mesh normals are modified accordingly the same transformation.\ntuto : http://doc.babylonjs.com/tutorials/How_Rotations_and_Translations_Work#baking-transform\nNote that, under the hood, this method sets a new VertexBuffer each call.","type":"(transform: Matrix) => void","functionBody":[{"parameters":[{"name":"transform","documentation":"","type":"Matrix"}],"returnType":"void","documentation":"Modifies the mesh geometry according to the passed transformation matrix.\nThis method returns nothing but it really modifies the mesh even if it's originally not set as updatable.\nThe mesh normals are modified accordingly the same transformation.\ntuto : http://doc.babylonjs.com/tutorials/How_Rotations_and_Translations_Work#baking-transform\nNote that, under the hood, this method sets a new VertexBuffer each call."}],"entryType":"function"},{"name":"bakeCurrentTransformIntoVertices","documentation":"Modifies the mesh geometry according to its own current World Matrix.\nThe mesh World Matrix is then reset.\nThis method returns nothing but really modifies the mesh even if it's originally not set as updatable.\ntuto : tuto : http://doc.babylonjs.com/tutorials/How_Rotations_and_Translations_Work#baking-transform\nNote that, under the hood, this method sets a new VertexBuffer each call.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Modifies the mesh geometry according to its own current World Matrix.\nThe mesh World Matrix is then reset.\nThis method returns nothing but really modifies the mesh even if it's originally not set as updatable.\ntuto : tuto : http://doc.babylonjs.com/tutorials/How_Rotations_and_Translations_Work#baking-transform\nNote that, under the hood, this method sets a new VertexBuffer each call."}],"entryType":"function"},{"name":"_resetPointsArrayCache","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_generatePointsArray","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"Returns a new Mesh object generated from the current mesh properties.\nThis method must not get confused with createInstance().\nThe parameter `name` is a string, the name given to the new mesh.\nThe optional parameter `newParent` can be any Node object (default `null`).\nThe optional parameter `doNotCloneChildren` (default `false`) allows/denies the recursive cloning of the original mesh children if any.\nThe parameter `clonePhysicsImpostor` (default `true`)  allows/denies the cloning in the same time of the original mesh `body` used by the physics engine, if any.","type":"(name: string, newParent?: Node, doNotCloneChildren?: boolean, clonePhysicsImpostor?: boolean) =>...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"newParent","documentation":"","type":"Node"},{"name":"doNotCloneChildren","documentation":"","type":"boolean"},{"name":"clonePhysicsImpostor","documentation":"","type":"boolean"}],"returnType":"Mesh","documentation":"Returns a new Mesh object generated from the current mesh properties.\nThis method must not get confused with createInstance().\nThe parameter `name` is a string, the name given to the new mesh.\nThe optional parameter `newParent` can be any Node object (default `null`).\nThe optional parameter `doNotCloneChildren` (default `false`) allows/denies the recursive cloning of the original mesh children if any.\nThe parameter `clonePhysicsImpostor` (default `true`)  allows/denies the cloning in the same time of the original mesh `body` used by the physics engine, if any."}],"entryType":"function"},{"name":"dispose","documentation":"Disposes the mesh.\nThis also frees the memory allocated under the hood to all the buffers used by WebGL.","type":"(doNotRecurse?: boolean) => void","functionBody":[{"parameters":[{"name":"doNotRecurse","documentation":"","type":"boolean"}],"returnType":"void","documentation":"Disposes the mesh.\nThis also frees the memory allocated under the hood to all the buffers used by WebGL."}],"entryType":"function"},{"name":"applyDisplacementMap","documentation":"Modifies the mesh geometry according to a displacement map.\nA displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\nThe mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\nThis method returns nothing.\nThe parameter `url` is a string, the URL from the image file is to be downloaded.\nThe parameters `minHeight` and `maxHeight` are the lower and upper limits of the displacement.\nThe parameter `onSuccess` is an optional Javascript function to be called just after the mesh is modified. It is passed the modified mesh and must return nothing.","type":"(url: string, minHeight: number, maxHeight: number, onSuccess?: (mesh: Mesh) => void) => void","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"string"},{"name":"minHeight","documentation":"","type":"number"},{"name":"maxHeight","documentation":"","type":"number"},{"name":"onSuccess","documentation":"","type":"(mesh: Mesh) => void"}],"returnType":"void","documentation":"Modifies the mesh geometry according to a displacement map.\nA displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\nThe mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\nThis method returns nothing.\nThe parameter `url` is a string, the URL from the image file is to be downloaded.\nThe parameters `minHeight` and `maxHeight` are the lower and upper limits of the displacement.\nThe parameter `onSuccess` is an optional Javascript function to be called just after the mesh is modified. It is passed the modified mesh and must return nothing."}],"entryType":"function"},{"name":"applyDisplacementMapFromBuffer","documentation":"Modifies the mesh geometry according to a displacementMap buffer.\nA displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\nThe mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\nThis method returns nothing.\nThe parameter `buffer` is a `Uint8Array` buffer containing series of `Uint8` lower than 255, the red, green, blue and alpha values of each successive pixel.\nThe parameters `heightMapWidth` and `heightMapHeight` are positive integers to set the width and height of the buffer image.\nThe parameters `minHeight` and `maxHeight` are the lower and upper limits of the displacement.","type":"(buffer: Uint8Array, heightMapWidth: number, heightMapHeight: number, minHeight: number, maxHeigh...","functionBody":[{"parameters":[{"name":"buffer","documentation":"","type":"Uint8Array"},{"name":"heightMapWidth","documentation":"","type":"number"},{"name":"heightMapHeight","documentation":"","type":"number"},{"name":"minHeight","documentation":"","type":"number"},{"name":"maxHeight","documentation":"","type":"number"}],"returnType":"void","documentation":"Modifies the mesh geometry according to a displacementMap buffer.\nA displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\nThe mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\nThis method returns nothing.\nThe parameter `buffer` is a `Uint8Array` buffer containing series of `Uint8` lower than 255, the red, green, blue and alpha values of each successive pixel.\nThe parameters `heightMapWidth` and `heightMapHeight` are positive integers to set the width and height of the buffer image.\nThe parameters `minHeight` and `maxHeight` are the lower and upper limits of the displacement."}],"entryType":"function"},{"name":"convertToFlatShadedMesh","documentation":"Modify the mesh to get a flat shading rendering.\nThis means each mesh facet will then have its own normals. Usually new vertices are added in the mesh geometry to get this result.\nThis method returns nothing.\nWarning : the mesh is really modified even if not set originally as updatable and, under the hood, a new VertexBuffer is allocated.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Modify the mesh to get a flat shading rendering.\nThis means each mesh facet will then have its own normals. Usually new vertices are added in the mesh geometry to get this result.\nThis method returns nothing.\nWarning : the mesh is really modified even if not set originally as updatable and, under the hood, a new VertexBuffer is allocated."}],"entryType":"function"},{"name":"convertToUnIndexedMesh","documentation":"This method removes all the mesh indices and add new vertices (duplication) in order to unfold facets into buffers.\nIn other words, more vertices, no more indices and a single bigger VBO.\nThis method returns nothing.\nThe mesh is really modified even if not set originally as updatable. Under the hood, a new VertexBuffer is allocated.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"This method removes all the mesh indices and add new vertices (duplication) in order to unfold facets into buffers.\nIn other words, more vertices, no more indices and a single bigger VBO.\nThis method returns nothing.\nThe mesh is really modified even if not set originally as updatable. Under the hood, a new VertexBuffer is allocated."}],"entryType":"function"},{"name":"flipFaces","documentation":"Inverses facet orientations and inverts also the normals with `flipNormals` (default `false`) if true.\nThis method returns nothing.\nWarning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.","type":"(flipNormals?: boolean) => void","functionBody":[{"parameters":[{"name":"flipNormals","documentation":"","type":"boolean"}],"returnType":"void","documentation":"Inverses facet orientations and inverts also the normals with `flipNormals` (default `false`) if true.\nThis method returns nothing.\nWarning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call."}],"entryType":"function"},{"name":"createInstance","documentation":"Creates a new InstancedMesh object from the mesh model.\nAn instance shares the same properties and the same material than its model.\nOnly these properties of each instance can then be set individually :\n- position\n- rotation\n- rotationQuaternion\n- setPivotMatrix\n- scaling\ntuto : http://doc.babylonjs.com/tutorials/How_to_use_Instances\nWarning : this method is not supported for Line mesh and LineSystem","type":"(name: string) => InstancedMesh","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"}],"returnType":"InstancedMesh","documentation":"Creates a new InstancedMesh object from the mesh model.\nAn instance shares the same properties and the same material than its model.\nOnly these properties of each instance can then be set individually :\n- position\n- rotation\n- rotationQuaternion\n- setPivotMatrix\n- scaling\ntuto : http://doc.babylonjs.com/tutorials/How_to_use_Instances\nWarning : this method is not supported for Line mesh and LineSystem"}],"entryType":"function"},{"name":"synchronizeInstances","documentation":"Synchronises all the mesh instance submeshes to the current mesh submeshes, if any.\nAfter this call, all the mesh instances have the same submeshes than the current mesh.\nThis method returns nothing.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Synchronises all the mesh instance submeshes to the current mesh submeshes, if any.\nAfter this call, all the mesh instances have the same submeshes than the current mesh.\nThis method returns nothing."}],"entryType":"function"},{"name":"simplify","documentation":"Simplify the mesh according to the given array of settings.\nFunction will return immediately and will simplify async. It returns nothing.","type":"(settings: ISimplificationSettings[], parallelProcessing?: boolean, simplificationType?: Simplifi...","functionBody":[{"parameters":[{"name":"settings","documentation":"a collection of simplification settings.","type":"ISimplificationSettings[]"},{"name":"parallelProcessing","documentation":"should all levels calculate parallel or one after the other.","type":"boolean"},{"name":"simplificationType","documentation":"","type":"SimplificationType"},{"name":"successCallback","documentation":"optional success callback to be called after the simplification finished processing all settings.","type":"(mesh?: Mesh, submeshIndex?: number) => void"}],"returnType":"void","documentation":"Simplify the mesh according to the given array of settings.\nFunction will return immediately and will simplify async. It returns nothing."}],"entryType":"function"},{"name":"optimizeIndices","documentation":"Optimization of the mesh's indices, in case a mesh has duplicated vertices.\nThe function will only reorder the indices and will not remove unused vertices to avoid problems with submeshes.\nThis should be used together with the simplification to avoid disappearing triangles.","type":"(successCallback?: (mesh?: Mesh) => void) => void","functionBody":[{"parameters":[{"name":"successCallback","documentation":"an optional success callback to be called after the optimization finished.","type":"(mesh?: Mesh) => void"}],"returnType":"void","documentation":"Optimization of the mesh's indices, in case a mesh has duplicated vertices.\nThe function will only reorder the indices and will not remove unused vertices to avoid problems with submeshes.\nThis should be used together with the simplification to avoid disappearing triangles."}],"entryType":"function"},{"name":"Parse","documentation":"Returns a new Mesh object what is a deep copy of the passed mesh.\nThe parameter `parsedMesh` is the mesh to be copied.\nThe parameter `rootUrl` is a string, it's the root URL to prefix the `delayLoadingFile` property with","type":"(parsedMesh: any, scene: Scene, rootUrl: string) => Mesh","functionBody":[{"parameters":[{"name":"parsedMesh","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"Mesh","documentation":"Returns a new Mesh object what is a deep copy of the passed mesh.\nThe parameter `parsedMesh` is the mesh to be copied.\nThe parameter `rootUrl` is a string, it's the root URL to prefix the `delayLoadingFile` property with"}],"entryType":"function"},{"name":"CreateRibbon","documentation":"Creates a ribbon mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe ribbon is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\n\nPlease read this full tutorial to understand how to design a ribbon : http://doc.babylonjs.com/tutorials/Ribbon_Tutorial\nThe parameter `pathArray` is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry.\nThe parameter `closeArray` (boolean, default false) creates a seam between the first and the last paths of the path array.\nThe parameter `closePath` (boolean, default false) creates a seam between the first and the last points of each path of the path array.\nThe parameter `offset` (positive integer, default : rounded half size of the pathArray length), is taken in account only if the `pathArray` is containing a single path.\nIt's the offset to join together the points from the same path. Ex : offset = 10 means the point 1 is joined to the point 11.\nThe optional parameter `instance` is an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#ribbon\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, pathArray: Vector3[][], closeArray: boolean, closePath: boolean, offset: number, s...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"pathArray","documentation":"","type":"Vector3[][]"},{"name":"closeArray","documentation":"","type":"boolean"},{"name":"closePath","documentation":"","type":"boolean"},{"name":"offset","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"sideOrientation","documentation":"","type":"number"},{"name":"instance","documentation":"","type":"Mesh"}],"returnType":"Mesh","documentation":"Creates a ribbon mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe ribbon is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\n\nPlease read this full tutorial to understand how to design a ribbon : http://doc.babylonjs.com/tutorials/Ribbon_Tutorial\nThe parameter `pathArray` is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry.\nThe parameter `closeArray` (boolean, default false) creates a seam between the first and the last paths of the path array.\nThe parameter `closePath` (boolean, default false) creates a seam between the first and the last points of each path of the path array.\nThe parameter `offset` (positive integer, default : rounded half size of the pathArray length), is taken in account only if the `pathArray` is containing a single path.\nIt's the offset to join together the points from the same path. Ex : offset = 10 means the point 1 is joined to the point 11.\nThe optional parameter `instance` is an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#ribbon\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateDisc","documentation":"Creates a plane polygonal mesh.  By default, this is a disc.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `radius` sets the radius size (float) of the polygon (default 0.5).\nThe parameter `tessellation` sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, radius: number, tessellation: number, scene: Scene, updatable?: boolean, sideOrien...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"radius","documentation":"","type":"number"},{"name":"tessellation","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"sideOrientation","documentation":"","type":"number"}],"returnType":"Mesh","documentation":"Creates a plane polygonal mesh.  By default, this is a disc.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `radius` sets the radius size (float) of the polygon (default 0.5).\nThe parameter `tessellation` sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateBox","documentation":"Creates a box mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `size` sets the size (float) of each box side (default 1).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number) => Mesh","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"size","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"sideOrientation","documentation":"","type":"number"}],"returnType":"Mesh","documentation":"Creates a box mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `size` sets the size (float) of each box side (default 1).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateSphere","documentation":"Creates a sphere mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `diameter` sets the diameter size (float) of the sphere (default 1).\nThe parameter `segments` sets the sphere number of horizontal stripes (positive integer, default 32).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, segments: number, diameter: number, scene?: Scene, updatable?: boolean, sideOrient...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"segments","documentation":"","type":"number"},{"name":"diameter","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"sideOrientation","documentation":"","type":"number"}],"returnType":"Mesh","documentation":"Creates a sphere mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `diameter` sets the diameter size (float) of the sphere (default 1).\nThe parameter `segments` sets the sphere number of horizontal stripes (positive integer, default 32).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateCylinder","documentation":"Creates a cylinder or a cone mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `height` sets the height size (float) of the cylinder/cone (float, default 2).\nThe parameter `diameter` sets the diameter of the top and bottom cap at once (float, default 1).\nThe parameters `diameterTop` and `diameterBottom` overwrite the parameter `diameter` and set respectively the top cap and bottom cap diameter (floats, default 1). The parameter \"diameterBottom\" can't be zero.\nThe parameter `tessellation` sets the number of cylinder sides (positive integer, default 24). Set it to 3 to get a prism for instance.\nThe parameter `subdivisions` sets the number of rings along the cylinder height (positive integer, default 1).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, height: number, diameterTop: number, diameterBottom: number, tessellation: number,...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"height","documentation":"","type":"number"},{"name":"diameterTop","documentation":"","type":"number"},{"name":"diameterBottom","documentation":"","type":"number"},{"name":"tessellation","documentation":"","type":"number"},{"name":"subdivisions","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"any"},{"name":"sideOrientation","documentation":"","type":"number"}],"returnType":"Mesh","documentation":"Creates a cylinder or a cone mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `height` sets the height size (float) of the cylinder/cone (float, default 2).\nThe parameter `diameter` sets the diameter of the top and bottom cap at once (float, default 1).\nThe parameters `diameterTop` and `diameterBottom` overwrite the parameter `diameter` and set respectively the top cap and bottom cap diameter (floats, default 1). The parameter \"diameterBottom\" can't be zero.\nThe parameter `tessellation` sets the number of cylinder sides (positive integer, default 24). Set it to 3 to get a prism for instance.\nThe parameter `subdivisions` sets the number of rings along the cylinder height (positive integer, default 1).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateTorus","documentation":"Creates a torus mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `diameter` sets the diameter size (float) of the torus (default 1).\nThe parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5).\nThe parameter `tessellation` sets the number of torus sides (postive integer, default 16).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, diameter: number, thickness: number, tessellation: number, scene: Scene, updatable...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"diameter","documentation":"","type":"number"},{"name":"thickness","documentation":"","type":"number"},{"name":"tessellation","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"sideOrientation","documentation":"","type":"number"}],"returnType":"Mesh","documentation":"Creates a torus mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `diameter` sets the diameter size (float) of the torus (default 1).\nThe parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5).\nThe parameter `tessellation` sets the number of torus sides (postive integer, default 16).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateTorusKnot","documentation":"Creates a torus knot mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `radius` sets the global radius size (float) of the torus knot (default 2).\nThe parameter `radialSegments` sets the number of sides on each tube segments (positive integer, default 32).\nThe parameter `tubularSegments` sets the number of tubes to decompose the knot into (positive integer, default 32).\nThe parameters `p` and `q` are the number of windings on each axis (positive integers, default 2 and 3).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, radius: number, tube: number, radialSegments: number, tubularSegments: number, p: ...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"radius","documentation":"","type":"number"},{"name":"tube","documentation":"","type":"number"},{"name":"radialSegments","documentation":"","type":"number"},{"name":"tubularSegments","documentation":"","type":"number"},{"name":"p","documentation":"","type":"number"},{"name":"q","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"sideOrientation","documentation":"","type":"number"}],"returnType":"Mesh","documentation":"Creates a torus knot mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `radius` sets the global radius size (float) of the torus knot (default 2).\nThe parameter `radialSegments` sets the number of sides on each tube segments (positive integer, default 32).\nThe parameter `tubularSegments` sets the number of tubes to decompose the knot into (positive integer, default 32).\nThe parameters `p` and `q` are the number of windings on each axis (positive integers, default 2 and 3).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateLines","documentation":"Creates a line mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nA line mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of points as an input parameter.\nLike every other parametric shape, it is dynamically updatable by passing an existing instance of LineMesh to this static function.\nThe parameter `points` is an array successive Vector3.\nThe optional parameter `instance` is an instance of an existing LineMesh object to be updated with the passed `points` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#lines-and-dashedlines\nWhen updating an instance, remember that only point positions can change, not the number of points.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, points: Vector3[], scene: Scene, updatable?: boolean, instance?: LinesMesh) => Lin...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"points","documentation":"","type":"Vector3[]"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"instance","documentation":"","type":"LinesMesh"}],"returnType":"LinesMesh","documentation":"Creates a line mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nA line mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of points as an input parameter.\nLike every other parametric shape, it is dynamically updatable by passing an existing instance of LineMesh to this static function.\nThe parameter `points` is an array successive Vector3.\nThe optional parameter `instance` is an instance of an existing LineMesh object to be updated with the passed `points` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#lines-and-dashedlines\nWhen updating an instance, remember that only point positions can change, not the number of points.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateDashedLines","documentation":"Creates a dashed line mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nA dashed line mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of points as an input parameter.\nLike every other parametric shape, it is dynamically updatable by passing an existing instance of LineMesh to this static function.\nThe parameter `points` is an array successive Vector3.\nThe parameter `dashNb` is the intended total number of dashes (positive integer, default 200).\nThe parameter `dashSize` is the size of the dashes relatively the dash number (positive float, default 3).\nThe parameter `gapSize` is the size of the gap between two successive dashes relatively the dash number (positive float, default 1).\nThe optional parameter `instance` is an instance of an existing LineMesh object to be updated with the passed `points` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#lines-and-dashedlines\nWhen updating an instance, remember that only point positions can change, not the number of points.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, points: Vector3[], dashSize: number, gapSize: number, dashNb: number, scene: Scene...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"points","documentation":"","type":"Vector3[]"},{"name":"dashSize","documentation":"","type":"number"},{"name":"gapSize","documentation":"","type":"number"},{"name":"dashNb","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"instance","documentation":"","type":"LinesMesh"}],"returnType":"LinesMesh","documentation":"Creates a dashed line mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nA dashed line mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of points as an input parameter.\nLike every other parametric shape, it is dynamically updatable by passing an existing instance of LineMesh to this static function.\nThe parameter `points` is an array successive Vector3.\nThe parameter `dashNb` is the intended total number of dashes (positive integer, default 200).\nThe parameter `dashSize` is the size of the dashes relatively the dash number (positive float, default 3).\nThe parameter `gapSize` is the size of the gap between two successive dashes relatively the dash number (positive float, default 1).\nThe optional parameter `instance` is an instance of an existing LineMesh object to be updated with the passed `points` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#lines-and-dashedlines\nWhen updating an instance, remember that only point positions can change, not the number of points.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"ExtrudeShape","documentation":"Creates an extruded shape mesh.\nThe extrusion is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\nPlease consider using the same method from the MeshBuilder class instead.\n\nPlease read this full tutorial to understand how to design an extruded shape : http://doc.babylonjs.com/tutorials/Parametric_Shapes#extrusion\nThe parameter `shape` is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be\nextruded along the Z axis.\nThe parameter `path` is a required array of successive Vector3. This is the axis curve the shape is extruded along.\nThe parameter `rotation` (float, default 0 radians) is the angle value to rotate the shape each step (each path point), from the former step (so rotation added each step) along the curve.\nThe parameter `scale` (float, default 1) is the value to scale the shape.\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nThe optional parameter `instance` is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#extruded-shape\nRemember you can only change the shape or path point positions, not their number when updating an extruded shape.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, shape: Vector3[], path: Vector3[], scale: number, rotation: number, cap: number, s...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"shape","documentation":"","type":"Vector3[]"},{"name":"path","documentation":"","type":"Vector3[]"},{"name":"scale","documentation":"","type":"number"},{"name":"rotation","documentation":"","type":"number"},{"name":"cap","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"sideOrientation","documentation":"","type":"number"},{"name":"instance","documentation":"","type":"Mesh"}],"returnType":"Mesh","documentation":"Creates an extruded shape mesh.\nThe extrusion is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\nPlease consider using the same method from the MeshBuilder class instead.\n\nPlease read this full tutorial to understand how to design an extruded shape : http://doc.babylonjs.com/tutorials/Parametric_Shapes#extrusion\nThe parameter `shape` is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be\nextruded along the Z axis.\nThe parameter `path` is a required array of successive Vector3. This is the axis curve the shape is extruded along.\nThe parameter `rotation` (float, default 0 radians) is the angle value to rotate the shape each step (each path point), from the former step (so rotation added each step) along the curve.\nThe parameter `scale` (float, default 1) is the value to scale the shape.\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nThe optional parameter `instance` is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#extruded-shape\nRemember you can only change the shape or path point positions, not their number when updating an extruded shape.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"ExtrudeShapeCustom","documentation":"Creates an custom extruded shape mesh.\nThe custom extrusion is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\nPlease consider using the same method from the MeshBuilder class instead.\n\nPlease read this full tutorial to understand how to design a custom extruded shape : http://doc.babylonjs.com/tutorials/Parametric_Shapes#extrusion\nThe parameter `shape` is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be\nextruded along the Z axis.\nThe parameter `path` is a required array of successive Vector3. This is the axis curve the shape is extruded along.\nThe parameter `rotationFunction` (JS function) is a custom Javascript function called on each path point. This function is passed the position i of the point in the path\nand the distance of this point from the begining of the path :\n```javascript\nvar rotationFunction = function(i, distance) {\n    // do things\n    return rotationValue; }\n```\nIt must returns a float value that will be the rotation in radians applied to the shape on each path point.\nThe parameter `scaleFunction` (JS function) is a custom Javascript function called on each path point. This function is passed the position i of the point in the path\nand the distance of this point from the begining of the path :\n```javascript\nvar scaleFunction = function(i, distance) {\n    // do things\n   return scaleValue;}\n```\nIt must returns a float value that will be the scale value applied to the shape on each path point.\nThe parameter `ribbonClosePath` (boolean, default false) forces the extrusion underlying ribbon to close all the paths in its `pathArray`.\nThe parameter `ribbonCloseArray` (boolean, default false) forces the extrusion underlying ribbon to close its `pathArray`.\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nThe optional parameter `instance` is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#extruded-shape\nRemember you can only change the shape or path point positions, not their number when updating an extruded shape.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, shape: Vector3[], path: Vector3[], scaleFunction: Function, rotationFunction: Func...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"shape","documentation":"","type":"Vector3[]"},{"name":"path","documentation":"","type":"Vector3[]"},{"name":"scaleFunction","documentation":"","type":"Function"},{"name":"rotationFunction","documentation":"","type":"Function"},{"name":"ribbonCloseArray","documentation":"","type":"boolean"},{"name":"ribbonClosePath","documentation":"","type":"boolean"},{"name":"cap","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"sideOrientation","documentation":"","type":"number"},{"name":"instance","documentation":"","type":"Mesh"}],"returnType":"Mesh","documentation":"Creates an custom extruded shape mesh.\nThe custom extrusion is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\nPlease consider using the same method from the MeshBuilder class instead.\n\nPlease read this full tutorial to understand how to design a custom extruded shape : http://doc.babylonjs.com/tutorials/Parametric_Shapes#extrusion\nThe parameter `shape` is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be\nextruded along the Z axis.\nThe parameter `path` is a required array of successive Vector3. This is the axis curve the shape is extruded along.\nThe parameter `rotationFunction` (JS function) is a custom Javascript function called on each path point. This function is passed the position i of the point in the path\nand the distance of this point from the begining of the path :\n```javascript\nvar rotationFunction = function(i, distance) {\n    // do things\n    return rotationValue; }\n```\nIt must returns a float value that will be the rotation in radians applied to the shape on each path point.\nThe parameter `scaleFunction` (JS function) is a custom Javascript function called on each path point. This function is passed the position i of the point in the path\nand the distance of this point from the begining of the path :\n```javascript\nvar scaleFunction = function(i, distance) {\n    // do things\n   return scaleValue;}\n```\nIt must returns a float value that will be the scale value applied to the shape on each path point.\nThe parameter `ribbonClosePath` (boolean, default false) forces the extrusion underlying ribbon to close all the paths in its `pathArray`.\nThe parameter `ribbonCloseArray` (boolean, default false) forces the extrusion underlying ribbon to close its `pathArray`.\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nThe optional parameter `instance` is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#extruded-shape\nRemember you can only change the shape or path point positions, not their number when updating an extruded shape.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateLathe","documentation":"Creates lathe mesh.\nThe lathe is a shape with a symetry axis : a 2D model shape is rotated around this axis to design the lathe.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `shape` is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be\nrotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero.\nThe parameter `radius` (positive float, default 1) is the radius value of the lathe.\nThe parameter `tessellation` (positive integer, default 64) is the side number of the lathe.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, shape: Vector3[], radius: number, tessellation: number, scene: Scene, updatable?: ...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"shape","documentation":"","type":"Vector3[]"},{"name":"radius","documentation":"","type":"number"},{"name":"tessellation","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"sideOrientation","documentation":"","type":"number"}],"returnType":"Mesh","documentation":"Creates lathe mesh.\nThe lathe is a shape with a symetry axis : a 2D model shape is rotated around this axis to design the lathe.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `shape` is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be\nrotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero.\nThe parameter `radius` (positive float, default 1) is the radius value of the lathe.\nThe parameter `tessellation` (positive integer, default 64) is the side number of the lathe.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreatePlane","documentation":"Creates a plane mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `size` sets the size (float) of both sides of the plane at once (default 1).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number) => Mesh","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"size","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"sideOrientation","documentation":"","type":"number"}],"returnType":"Mesh","documentation":"Creates a plane mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `size` sets the size (float) of both sides of the plane at once (default 1).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateGround","documentation":"Creates a ground mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameters `width` and `height` (floats, default 1) set the width and height sizes of the ground.\nThe parameter `subdivisions` (positive integer) sets the number of subdivisions per side.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, width: number, height: number, subdivisions: number, scene: Scene, updatable?: boo...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"subdivisions","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"}],"returnType":"Mesh","documentation":"Creates a ground mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameters `width` and `height` (floats, default 1) set the width and height sizes of the ground.\nThe parameter `subdivisions` (positive integer) sets the number of subdivisions per side.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateTiledGround","documentation":"Creates a tiled ground mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameters `xmin` and `xmax` (floats, default -1 and 1) set the ground minimum and maximum X coordinates.\nThe parameters `zmin` and `zmax` (floats, default -1 and 1) set the ground minimum and maximum Z coordinates.\nThe parameter `subdivisions` is a javascript object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the\nnumbers of subdivisions on the ground width and height. Each subdivision is called a tile.\nThe parameter `precision` is a javascript object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the\nnumbers of subdivisions on the ground width and height of each tile.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, xmin: number, zmin: number, xmax: number, zmax: number, subdivisions: { w: number;...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"xmin","documentation":"","type":"number"},{"name":"zmin","documentation":"","type":"number"},{"name":"xmax","documentation":"","type":"number"},{"name":"zmax","documentation":"","type":"number"},{"name":"subdivisions","documentation":"","type":"{ w: number; h: number; }"},{"name":"precision","documentation":"","type":"{ w: number; h: number; }"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"}],"returnType":"Mesh","documentation":"Creates a tiled ground mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameters `xmin` and `xmax` (floats, default -1 and 1) set the ground minimum and maximum X coordinates.\nThe parameters `zmin` and `zmax` (floats, default -1 and 1) set the ground minimum and maximum Z coordinates.\nThe parameter `subdivisions` is a javascript object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the\nnumbers of subdivisions on the ground width and height. Each subdivision is called a tile.\nThe parameter `precision` is a javascript object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the\nnumbers of subdivisions on the ground width and height of each tile.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateGroundFromHeightMap","documentation":"Creates a ground mesh from a height map.\ntuto : http://doc.babylonjs.com/tutorials/14._Height_Map\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `url` sets the URL of the height map image resource.\nThe parameters `width` and `height` (positive floats, default 10) set the ground width and height sizes.\nThe parameter `subdivisions` (positive integer, default 1) sets the number of subdivision per side.\nThe parameter `minHeight` (float, default 0) is the minimum altitude on the ground.\nThe parameter `maxHeight` (float, default 1) is the maximum altitude on the ground.\nThe parameter `onReady` is a javascript callback function that will be called  once the mesh is just built (the height map download can last some time).\nThis function is passed the newly built mesh :\n```javascript\nfunction(mesh) { // do things\n    return; }\n```\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, url: string, width: number, height: number, subdivisions: number, minHeight: numbe...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"url","documentation":"","type":"string"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"subdivisions","documentation":"","type":"number"},{"name":"minHeight","documentation":"","type":"number"},{"name":"maxHeight","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"onReady","documentation":"","type":"(mesh: GroundMesh) => void"}],"returnType":"GroundMesh","documentation":"Creates a ground mesh from a height map.\ntuto : http://doc.babylonjs.com/tutorials/14._Height_Map\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `url` sets the URL of the height map image resource.\nThe parameters `width` and `height` (positive floats, default 10) set the ground width and height sizes.\nThe parameter `subdivisions` (positive integer, default 1) sets the number of subdivision per side.\nThe parameter `minHeight` (float, default 0) is the minimum altitude on the ground.\nThe parameter `maxHeight` (float, default 1) is the maximum altitude on the ground.\nThe parameter `onReady` is a javascript callback function that will be called  once the mesh is just built (the height map download can last some time).\nThis function is passed the newly built mesh :\n```javascript\nfunction(mesh) { // do things\n    return; }\n```\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateTube","documentation":"Creates a tube mesh.\nThe tube is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `path` is a required array of successive Vector3. It is the curve used as the axis of the tube.\nThe parameter `radius` (positive float, default 1) sets the tube radius size.\nThe parameter `tessellation` (positive float, default 64) is the number of sides on the tubular surface.\nThe parameter `radiusFunction` (javascript function, default null) is a vanilla javascript function. If it is not null, it overwrittes the parameter `radius`.\nThis function is called on each point of the tube path and is passed the index `i` of the i-th point and the distance of this point from the first point of the path.\nIt must return a radius value (positive float) :\n```javascript\nvar radiusFunction = function(i, distance) {\n    // do things\n    return radius; }\n```\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nThe optional parameter `instance` is an instance of an existing Tube object to be updated with the passed `pathArray` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#tube\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, path: Vector3[], radius: number, tessellation: number, radiusFunction: (i: number,...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"path","documentation":"","type":"Vector3[]"},{"name":"radius","documentation":"","type":"number"},{"name":"tessellation","documentation":"","type":"number"},{"name":"radiusFunction","documentation":"","type":"(i: number, distance: number) => number"},{"name":"cap","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"sideOrientation","documentation":"","type":"number"},{"name":"instance","documentation":"","type":"Mesh"}],"returnType":"Mesh","documentation":"Creates a tube mesh.\nThe tube is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `path` is a required array of successive Vector3. It is the curve used as the axis of the tube.\nThe parameter `radius` (positive float, default 1) sets the tube radius size.\nThe parameter `tessellation` (positive float, default 64) is the number of sides on the tubular surface.\nThe parameter `radiusFunction` (javascript function, default null) is a vanilla javascript function. If it is not null, it overwrittes the parameter `radius`.\nThis function is called on each point of the tube path and is passed the index `i` of the i-th point and the distance of this point from the first point of the path.\nIt must return a radius value (positive float) :\n```javascript\nvar radiusFunction = function(i, distance) {\n    // do things\n    return radius; }\n```\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nThe optional parameter `instance` is an instance of an existing Tube object to be updated with the passed `pathArray` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#tube\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreatePolyhedron","documentation":"Creates a polyhedron mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embbeded types. Please refer to the type sheet in the tutorial\n to choose the wanted type.\nThe parameter `size` (positive float, default 1) sets the polygon size.\nYou can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value).\nYou can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overwrittes the parameter `type`.\nA `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\nYou can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`).\nTo understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : http://doc.babylonjs.com/tutorials/CreateBox_Per_Face_Textures_And_Colors\nThe parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { type?: number; size?: number; sizeX?: number; sizeY?: number; sizeZ?: n...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ type?: number; size?: number; sizeX?: number; sizeY?: number; sizeZ?: number; custom?: any; fac..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates a polyhedron mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embbeded types. Please refer to the type sheet in the tutorial\n to choose the wanted type.\nThe parameter `size` (positive float, default 1) sets the polygon size.\nYou can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value).\nYou can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overwrittes the parameter `type`.\nA `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\nYou can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`).\nTo understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : http://doc.babylonjs.com/tutorials/CreateBox_Per_Face_Textures_And_Colors\nThe parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateIcoSphere","documentation":"Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `radius` sets the radius size (float) of the icosphere (default 1).\nYou can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value than `radius`).\nThe parameter `subdivisions` sets the number of subdivisions (postive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size.\nThe parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { radius?: number; flat?: boolean; subdivisions?: number; sideOrientation...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ radius?: number; flat?: boolean; subdivisions?: number; sideOrientation?: number; updatable?: b..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided.\nPlease consider using the same method from the MeshBuilder class instead.\nThe parameter `radius` sets the radius size (float) of the icosphere (default 1).\nYou can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value than `radius`).\nThe parameter `subdivisions` sets the number of subdivisions (postive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size.\nThe parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateDecal","documentation":"Creates a decal mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nA decal is a mesh usually applied as a model onto the surface of another mesh. So don't forget the parameter `sourceMesh` depicting the decal.\nThe parameter `position` (Vector3, default `(0, 0, 0)`) sets the position of the decal in World coordinates.\nThe parameter `normal` (Vector3, default Vector3.Up) sets the normal of the mesh where the decal is applied onto in World coordinates.\nThe parameter `size` (Vector3, default `(1, 1, 1)`) sets the decal scaling.\nThe parameter `angle` (float in radian, default 0) sets the angle to rotate the decal.","type":"(name: string, sourceMesh: AbstractMesh, position: Vector3, normal: Vector3, size: Vector3, angle...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"sourceMesh","documentation":"","type":"AbstractMesh"},{"name":"position","documentation":"","type":"Vector3"},{"name":"normal","documentation":"","type":"Vector3"},{"name":"size","documentation":"","type":"Vector3"},{"name":"angle","documentation":"","type":"number"}],"returnType":"Mesh","documentation":"Creates a decal mesh.\nPlease consider using the same method from the MeshBuilder class instead.\nA decal is a mesh usually applied as a model onto the surface of another mesh. So don't forget the parameter `sourceMesh` depicting the decal.\nThe parameter `position` (Vector3, default `(0, 0, 0)`) sets the position of the decal in World coordinates.\nThe parameter `normal` (Vector3, default Vector3.Up) sets the normal of the mesh where the decal is applied onto in World coordinates.\nThe parameter `size` (Vector3, default `(1, 1, 1)`) sets the decal scaling.\nThe parameter `angle` (float in radian, default 0) sets the angle to rotate the decal."}],"entryType":"function"},{"name":"setPositionsForCPUSkinning","documentation":"@returns original positions used for CPU skinning.  Useful for integrating Morphing with skeletons in same mesh.","type":"() => Float32Array","functionBody":[{"parameters":[],"returnType":"Float32Array","documentation":"@returns original positions used for CPU skinning.  Useful for integrating Morphing with skeletons in same mesh."}],"entryType":"function"},{"name":"setNormalsForCPUSkinning","documentation":"@returns original normals used for CPU skinning.  Useful for integrating Morphing with skeletons in same mesh.","type":"() => Float32Array","functionBody":[{"parameters":[],"returnType":"Float32Array","documentation":"@returns original normals used for CPU skinning.  Useful for integrating Morphing with skeletons in same mesh."}],"entryType":"function"},{"name":"applySkeleton","documentation":"Update the vertex buffers by applying transformation from the bones","type":"(skeleton: Skeleton) => Mesh","functionBody":[{"parameters":[{"name":"skeleton","documentation":"to apply","type":"Skeleton"}],"returnType":"Mesh","documentation":"Update the vertex buffers by applying transformation from the bones"}],"entryType":"function"},{"name":"MinMax","documentation":"Returns an object `{min:` Vector3`, max:` Vector3`}`\nThis min and max Vector3 are the minimum and maximum vectors of each mesh bounding box from the passed array, in the World system","type":"(meshes: AbstractMesh[]) => { min: Vector3; max: Vector3; }","functionBody":[{"parameters":[{"name":"meshes","documentation":"","type":"AbstractMesh[]"}],"returnType":"{ min: Vector3; max: Vector3; }","documentation":"Returns an object `{min:` Vector3`, max:` Vector3`}`\nThis min and max Vector3 are the minimum and maximum vectors of each mesh bounding box from the passed array, in the World system"}],"entryType":"function"},{"name":"Center","documentation":"Returns a Vector3, the center of the `{min:` Vector3`, max:` Vector3`}` or the center of MinMax vector3 computed from a mesh array.","type":"(meshesOrMinMaxVector: any) => Vector3","functionBody":[{"parameters":[{"name":"meshesOrMinMaxVector","documentation":"","type":"any"}],"returnType":"Vector3","documentation":"Returns a Vector3, the center of the `{min:` Vector3`, max:` Vector3`}` or the center of MinMax vector3 computed from a mesh array."}],"entryType":"function"},{"name":"MergeMeshes","documentation":"Merge the array of meshes into a single mesh for performance reasons.","type":"(meshes: Mesh[], disposeSource?: boolean, allow32BitsIndices?: boolean, meshSubclass?: Mesh) => M...","functionBody":[{"parameters":[{"name":"meshes","documentation":"- The vertices source.  They should all be of the same material.  Entries can empty","type":"Mesh[]"},{"name":"disposeSource","documentation":"- When true (default), dispose of the vertices from the source meshes","type":"boolean"},{"name":"allow32BitsIndices","documentation":"- When the sum of the vertices > 64k, this must be set to true.","type":"boolean"},{"name":"meshSubclass","documentation":"- When set, vertices inserted into this Mesh.  Meshes can then be merged into a Mesh sub-class.","type":"Mesh"}],"returnType":"Mesh","documentation":"Merge the array of meshes into a single mesh for performance reasons."}],"entryType":"function"}],"properties":[{"name":"_FRONTSIDE","documentation":"","type":"number","entryType":"property"},{"name":"_BACKSIDE","documentation":"","type":"number","entryType":"property"},{"name":"_DOUBLESIDE","documentation":"","type":"number","entryType":"property"},{"name":"_DEFAULTSIDE","documentation":"","type":"number","entryType":"property"},{"name":"_NO_CAP","documentation":"","type":"number","entryType":"property"},{"name":"_CAP_START","documentation":"","type":"number","entryType":"property"},{"name":"_CAP_END","documentation":"","type":"number","entryType":"property"},{"name":"_CAP_ALL","documentation":"","type":"number","entryType":"property"},{"name":"FRONTSIDE","documentation":"Mesh side orientation : usually the external or front surface","type":"number","entryType":"property"},{"name":"BACKSIDE","documentation":"Mesh side orientation : usually the internal or back surface","type":"number","entryType":"property"},{"name":"DOUBLESIDE","documentation":"Mesh side orientation : both internal and external or front and back surfaces","type":"number","entryType":"property"},{"name":"DEFAULTSIDE","documentation":"Mesh side orientation : by default, `FRONTSIDE`","type":"number","entryType":"property"},{"name":"NO_CAP","documentation":"Mesh cap setting : no cap","type":"number","entryType":"property"},{"name":"CAP_START","documentation":"Mesh cap setting : one cap at the beginning of the mesh","type":"number","entryType":"property"},{"name":"CAP_END","documentation":"Mesh cap setting : one cap at the end of the mesh","type":"number","entryType":"property"},{"name":"CAP_ALL","documentation":"Mesh cap setting : two caps, one at the beginning  and one at the end of the mesh","type":"number","entryType":"property"},{"name":"onBeforeRenderObservable","documentation":"An event triggered before rendering the mesh\n@type {BABYLON.Observable}","type":"Observable<Mesh>","entryType":"property"},{"name":"onAfterRenderObservable","documentation":"An event triggered after rendering the mesh\n@type {BABYLON.Observable}","type":"Observable<Mesh>","entryType":"property"},{"name":"onBeforeDrawObservable","documentation":"An event triggered before drawing the mesh\n@type {BABYLON.Observable}","type":"Observable<Mesh>","entryType":"property"},{"name":"_onBeforeDrawObserver","documentation":"","type":"any","entryType":"property"},{"name":"onBeforeDraw","documentation":"","type":"() => void","entryType":"property"},{"name":"delayLoadState","documentation":"","type":"number","entryType":"property"},{"name":"instances","documentation":"","type":"InstancedMesh[]","entryType":"property"},{"name":"delayLoadingFile","documentation":"","type":"string","entryType":"property"},{"name":"_binaryInfo","documentation":"","type":"any","entryType":"property"},{"name":"_LODLevels","documentation":"","type":"any","entryType":"property"},{"name":"onLODLevelSelection","documentation":"","type":"(distance: number, mesh: Mesh, selectedLevel: Mesh) => void","entryType":"property"},{"name":"_geometry","documentation":"","type":"Geometry","entryType":"property"},{"name":"_delayInfo","documentation":"","type":"any","entryType":"property"},{"name":"_delayLoadingFunction","documentation":"","type":"(any: any, mesh: Mesh) => void","entryType":"property"},{"name":"_visibleInstances","documentation":"","type":"any","entryType":"property"},{"name":"_renderIdForInstances","documentation":"","type":"any","entryType":"property"},{"name":"_batchCache","documentation":"","type":"any","entryType":"property"},{"name":"_instancesBufferSize","documentation":"","type":"any","entryType":"property"},{"name":"_instancesBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_instancesData","documentation":"","type":"any","entryType":"property"},{"name":"_overridenInstanceCount","documentation":"","type":"any","entryType":"property"},{"name":"_shouldGenerateFlatShading","documentation":"","type":"boolean","entryType":"property"},{"name":"_preActivateId","documentation":"","type":"any","entryType":"property"},{"name":"_sideOrientation","documentation":"","type":"any","entryType":"property"},{"name":"_areNormalsFrozen","documentation":"","type":"any","entryType":"property"},{"name":"_sourcePositions","documentation":"","type":"any","entryType":"property"},{"name":"_sourceNormals","documentation":"","type":"any","entryType":"property"},{"name":"hasLODLevels","documentation":"","type":"boolean","entryType":"property"},{"name":"geometry","documentation":"Returns the mesh internal Geometry object.","type":"Geometry","entryType":"property"},{"name":"isBlocked","documentation":"","type":"boolean","entryType":"property"},{"name":"sideOrientation","documentation":"Sets the mesh side orientation : BABYLON.Mesh.FRONTSIDE, BABYLON.Mesh.BACKSIDE, BABYLON.Mesh.DOUBLESIDE or BABYLON.Mesh.DEFAULTSIDE\ntuto : http://doc.babylonjs.com/tutorials/Discover_Basic_Elements#side-orientation","type":"number","entryType":"property"},{"name":"areNormalsFrozen","documentation":"Boolean : true if the normals aren't to be recomputed on next mesh `positions` array update.\nThis property is pertinent only for updatable parametric shapes.","type":"boolean","entryType":"property"},{"name":"overridenInstanceCount","documentation":"Overrides instance count. Only applicable when custom instanced InterleavedVertexBuffer are used rather than InstancedMeshs","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.AbstractMesh","BABYLON.IGetSetVerticesData"]},{"name":"VertexData","documentation":"","type":"typeof VertexData","constructors":[{"parameters":[],"returnType":"VertexData","documentation":""}],"entryType":"class","functions":[{"name":"set","documentation":"","type":"(data: number[] | Float32Array, kind: string) => void","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"number[] | Float32Array"},{"name":"kind","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"applyToMesh","documentation":"","type":"(mesh: Mesh, updatable?: boolean) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"Mesh"},{"name":"updatable","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"applyToGeometry","documentation":"","type":"(geometry: Geometry, updatable?: boolean) => void","functionBody":[{"parameters":[{"name":"geometry","documentation":"","type":"Geometry"},{"name":"updatable","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateMesh","documentation":"","type":"(mesh: Mesh, updateExtends?: boolean, makeItUnique?: boolean) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"Mesh"},{"name":"updateExtends","documentation":"","type":"boolean"},{"name":"makeItUnique","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateGeometry","documentation":"","type":"(geometry: Geometry, updateExtends?: boolean, makeItUnique?: boolean) => void","functionBody":[{"parameters":[{"name":"geometry","documentation":"","type":"Geometry"},{"name":"updateExtends","documentation":"","type":"boolean"},{"name":"makeItUnique","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_applyTo","documentation":"","type":"(meshOrGeometry: any, updatable?: any) => any","functionBody":[{"parameters":[{"name":"meshOrGeometry","documentation":"","type":"any"},{"name":"updatable","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_update","documentation":"","type":"(meshOrGeometry: any, updateExtends?: any, makeItUnique?: any) => any","functionBody":[{"parameters":[{"name":"meshOrGeometry","documentation":"","type":"any"},{"name":"updateExtends","documentation":"","type":"any"},{"name":"makeItUnique","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"transform","documentation":"","type":"(matrix: Matrix) => void","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"merge","documentation":"","type":"(other: VertexData) => void","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"VertexData"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_mergeElement","documentation":"","type":"(source: any, other: any) => any","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"any"},{"name":"other","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"ExtractFromMesh","documentation":"","type":"(mesh: Mesh, copyWhenShared?: boolean) => VertexData","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"Mesh"},{"name":"copyWhenShared","documentation":"","type":"boolean"}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"ExtractFromGeometry","documentation":"","type":"(geometry: Geometry, copyWhenShared?: boolean) => VertexData","functionBody":[{"parameters":[{"name":"geometry","documentation":"","type":"Geometry"},{"name":"copyWhenShared","documentation":"","type":"boolean"}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"_ExtractFrom","documentation":"","type":"(meshOrGeometry: any, copyWhenShared?: any) => any","functionBody":[{"parameters":[{"name":"meshOrGeometry","documentation":"","type":"any"},{"name":"copyWhenShared","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"CreateRibbon","documentation":"","type":"(options: { pathArray: Vector3[][]; closeArray?: boolean; closePath?: boolean; offset?: number; s...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ pathArray: Vector3[][]; closeArray?: boolean; closePath?: boolean; offset?: number; sideOrienta..."}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreateBox","documentation":"","type":"(options: { size?: number; width?: number; height?: number; depth?: number; faceUV?: Vector4[]; f...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ size?: number; width?: number; height?: number; depth?: number; faceUV?: Vector4[]; faceColors?..."}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreateSphere","documentation":"","type":"(options: { segments?: number; diameter?: number; diameterX?: number; diameterY?: number; diamete...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ segments?: number; diameter?: number; diameterX?: number; diameterY?: number; diameterZ?: numbe..."}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreateCylinder","documentation":"","type":"(options: { height?: number; diameterTop?: number; diameterBottom?: number; diameter?: number; te...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ height?: number; diameterTop?: number; diameterBottom?: number; diameter?: number; tessellation..."}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreateTorus","documentation":"","type":"(options: { diameter?: number; thickness?: number; tessellation?: number; sideOrientation?: numbe...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ diameter?: number; thickness?: number; tessellation?: number; sideOrientation?: number; }"}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreateLineSystem","documentation":"","type":"(options: { lines: Vector3[][]; }) => VertexData","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ lines: Vector3[][]; }"}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreateDashedLines","documentation":"","type":"(options: { points: Vector3[]; dashSize?: number; gapSize?: number; dashNb?: number; }) => Vertex...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ points: Vector3[]; dashSize?: number; gapSize?: number; dashNb?: number; }"}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreateGround","documentation":"","type":"(options: { width?: number; height?: number; subdivisions?: number; subdivisionsX?: number; subdi...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ width?: number; height?: number; subdivisions?: number; subdivisionsX?: number; subdivisionsY?:..."}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreateTiledGround","documentation":"","type":"(options: { xmin: number; zmin: number; xmax: number; zmax: number; subdivisions?: { w: number; h...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ xmin: number; zmin: number; xmax: number; zmax: number; subdivisions?: { w: number; h: number; ..."}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreateGroundFromHeightMap","documentation":"","type":"(options: { width: number; height: number; subdivisions: number; minHeight: number; maxHeight: nu...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ width: number; height: number; subdivisions: number; minHeight: number; maxHeight: number; buff..."}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreatePlane","documentation":"","type":"(options: { size?: number; width?: number; height?: number; sideOrientation?: number; }) => Verte...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ size?: number; width?: number; height?: number; sideOrientation?: number; }"}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreateDisc","documentation":"","type":"(options: { radius?: number; tessellation?: number; arc?: number; sideOrientation?: number; }) =>...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ radius?: number; tessellation?: number; arc?: number; sideOrientation?: number; }"}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreateIcoSphere","documentation":"","type":"(options: { radius?: number; radiusX?: number; radiusY?: number; radiusZ?: number; flat?: boolean...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ radius?: number; radiusX?: number; radiusY?: number; radiusZ?: number; flat?: boolean; subdivis..."}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreatePolyhedron","documentation":"","type":"(options: { type?: number; size?: number; sizeX?: number; sizeY?: number; sizeZ?: number; custom?...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ type?: number; size?: number; sizeX?: number; sizeY?: number; sizeZ?: number; custom?: any; fac..."}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"CreateTorusKnot","documentation":"","type":"(options: { radius?: number; tube?: number; radialSegments?: number; tubularSegments?: number; p?...","functionBody":[{"parameters":[{"name":"options","documentation":"","type":"{ radius?: number; tube?: number; radialSegments?: number; tubularSegments?: number; p?: number; ..."}],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"ComputeNormals","documentation":"","type":"(positions: any, indices: any, normals: any) => void","functionBody":[{"parameters":[{"name":"positions","documentation":"","type":"any"},{"name":"indices","documentation":"","type":"any"},{"name":"normals","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_ComputeSides","documentation":"","type":"(sideOrientation: any, positions: any, indices: any, normals: any, uvs: any) => any","functionBody":[{"parameters":[{"name":"sideOrientation","documentation":"","type":"any"},{"name":"positions","documentation":"","type":"any"},{"name":"indices","documentation":"","type":"any"},{"name":"normals","documentation":"","type":"any"},{"name":"uvs","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"ImportVertexData","documentation":"","type":"(parsedVertexData: any, geometry: Geometry) => void","functionBody":[{"parameters":[{"name":"parsedVertexData","documentation":"","type":"any"},{"name":"geometry","documentation":"","type":"Geometry"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"positions","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"normals","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"uvs","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"uvs2","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"uvs3","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"uvs4","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"uvs5","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"uvs6","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"colors","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"matricesIndices","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"matricesWeights","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"matricesIndicesExtra","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"matricesWeightsExtra","documentation":"","type":"number[] | Float32Array","entryType":"property"},{"name":"indices","documentation":"","type":"number[] | Int32Array","entryType":"property"}]},{"name":"MeshBuilder","documentation":"","type":"typeof MeshBuilder","constructors":[{"parameters":[],"returnType":"MeshBuilder","documentation":""}],"entryType":"class","functions":[{"name":"updateSideOrientationForRightHandedSystem","documentation":"","type":"(orientation: any, scene: any) => any","functionBody":[{"parameters":[{"name":"orientation","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"CreateBox","documentation":"Creates a box mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#box\nThe parameter `size` sets the size (float) of each box side (default 1).\nYou can set some different box dimensions by using the parameters `width`, `height` and `depth` (all by default have the same value than `size`).\nYou can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements).\nPlease read this tutorial : http://doc.babylonjs.com/tutorials/CreateBox_Per_Face_Textures_And_Colors\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { size?: number; width?: number; height?: number; depth?: number; faceUV?...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ size?: number; width?: number; height?: number; depth?: number; faceUV?: Vector4[]; faceColors?..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates a box mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#box\nThe parameter `size` sets the size (float) of each box side (default 1).\nYou can set some different box dimensions by using the parameters `width`, `height` and `depth` (all by default have the same value than `size`).\nYou can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements).\nPlease read this tutorial : http://doc.babylonjs.com/tutorials/CreateBox_Per_Face_Textures_And_Colors\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateSphere","documentation":"Creates a sphere mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#sphere\nThe parameter `diameter` sets the diameter size (float) of the sphere (default 1).\nYou can set some different sphere dimensions, for instance to build an ellipsoid, by using the parameters `diameterX`, `diameterY` and `diameterZ` (all by default have the same value than `diameter`).\nThe parameter `segments` sets the sphere number of horizontal stripes (positive integer, default 32).\nYou can create an unclosed sphere with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference (latitude) : 2 x PI x ratio\nYou can create an unclosed sphere on its height with the parameter `slice` (positive float, default1), valued between 0 and 1, what is the height ratio (longitude).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { segments?: number; diameter?: number; diameterX?: number; diameterY?: n...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ segments?: number; diameter?: number; diameterX?: number; diameterY?: number; diameterZ?: numbe..."},{"name":"scene","documentation":"","type":"any"}],"returnType":"Mesh","documentation":"Creates a sphere mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#sphere\nThe parameter `diameter` sets the diameter size (float) of the sphere (default 1).\nYou can set some different sphere dimensions, for instance to build an ellipsoid, by using the parameters `diameterX`, `diameterY` and `diameterZ` (all by default have the same value than `diameter`).\nThe parameter `segments` sets the sphere number of horizontal stripes (positive integer, default 32).\nYou can create an unclosed sphere with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference (latitude) : 2 x PI x ratio\nYou can create an unclosed sphere on its height with the parameter `slice` (positive float, default1), valued between 0 and 1, what is the height ratio (longitude).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateDisc","documentation":"Creates a plane polygonal mesh.  By default, this is a disc.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#disc\nThe parameter `radius` sets the radius size (float) of the polygon (default 0.5).\nThe parameter `tessellation` sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc.\nYou can create an unclosed polygon with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference : 2 x PI x ratio\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { radius?: number; tessellation?: number; arc?: number; updatable?: boole...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ radius?: number; tessellation?: number; arc?: number; updatable?: boolean; sideOrientation?: nu..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates a plane polygonal mesh.  By default, this is a disc.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#disc\nThe parameter `radius` sets the radius size (float) of the polygon (default 0.5).\nThe parameter `tessellation` sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc.\nYou can create an unclosed polygon with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference : 2 x PI x ratio\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateIcoSphere","documentation":"Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#icosphere\nThe parameter `radius` sets the radius size (float) of the icosphere (default 1).\nYou can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value than `radius`).\nThe parameter `subdivisions` sets the number of subdivisions (postive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size.\nThe parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { radius?: number; radiusX?: number; radiusY?: number; radiusZ?: number; ...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ radius?: number; radiusX?: number; radiusY?: number; radiusZ?: number; flat?: boolean; subdivis..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#icosphere\nThe parameter `radius` sets the radius size (float) of the icosphere (default 1).\nYou can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value than `radius`).\nThe parameter `subdivisions` sets the number of subdivisions (postive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size.\nThe parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateRibbon","documentation":"Creates a ribbon mesh.\nThe ribbon is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\n\nPlease read this full tutorial to understand how to design a ribbon : http://doc.babylonjs.com/tutorials/Ribbon_Tutorial\nThe parameter `pathArray` is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry.\nThe parameter `closeArray` (boolean, default false) creates a seam between the first and the last paths of the path array.\nThe parameter `closePath` (boolean, default false) creates a seam between the first and the last points of each path of the path array.\nThe parameter `offset` (positive integer, default : rounded half size of the pathArray length), is taken in account only if the `pathArray` is containing a single path.\nIt's the offset to join the points from the same path. Ex : offset = 10 means the point 1 is joined to the point 11.\nThe optional parameter `instance` is an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#ribbon\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { pathArray: Vector3[][]; closeArray?: boolean; closePath?: boolean; offs...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ pathArray: Vector3[][]; closeArray?: boolean; closePath?: boolean; offset?: number; updatable?:..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates a ribbon mesh.\nThe ribbon is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\n\nPlease read this full tutorial to understand how to design a ribbon : http://doc.babylonjs.com/tutorials/Ribbon_Tutorial\nThe parameter `pathArray` is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry.\nThe parameter `closeArray` (boolean, default false) creates a seam between the first and the last paths of the path array.\nThe parameter `closePath` (boolean, default false) creates a seam between the first and the last points of each path of the path array.\nThe parameter `offset` (positive integer, default : rounded half size of the pathArray length), is taken in account only if the `pathArray` is containing a single path.\nIt's the offset to join the points from the same path. Ex : offset = 10 means the point 1 is joined to the point 11.\nThe optional parameter `instance` is an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#ribbon\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateCylinder","documentation":"Creates a cylinder or a cone mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#cylinder-or-cone\nThe parameter `height` sets the height size (float) of the cylinder/cone (float, default 2).\nThe parameter `diameter` sets the diameter of the top and bottom cap at once (float, default 1).\nThe parameters `diameterTop` and `diameterBottom` overwrite the parameter `diameter` and set respectively the top cap and bottom cap diameter (floats, default 1). The parameter \"diameterBottom\" can't be zero.\nThe parameter `tessellation` sets the number of cylinder sides (positive integer, default 24). Set it to 3 to get a prism for instance.\nThe parameter `subdivisions` sets the number of rings along the cylinder height (positive integer, default 1).\nThe parameter `hasRings` (boolean, default false) makes the subdivisions independent from each other, so they become different faces.\nThe parameter `enclose`  (boolean, default false) adds two extra faces per subdivision to a sliced cylinder to close it around its height axis.\nThe parameter `arc` (float, default 1) is the ratio (max 1) to apply to the circumference to slice the cylinder.\nYou can set different colors and different images to each box side by using the parameters `faceColors` (an array of n Color3 elements) and `faceUV` (an array of n Vector4 elements).\nThe value of n is the number of cylinder faces. If the cylinder has only 1 subdivisions, n equals : top face + cylinder surface + bottom face = 3\nNow, if the cylinder has 5 independent subdivisions (hasRings = true), n equals : top face + 5 stripe surfaces + bottom face = 2 + 5 = 7\nFinally, if the cylinder has 5 independent subdivisions and is enclose, n equals : top face + 5 x (stripe surface + 2 closing faces) + bottom face = 2 + 5 * 3 = 17\nEach array (color or UVs) is always ordered the same way : the first element is the bottom cap, the last element is the top cap. The other elements are each a ring surface.\nIf `enclose` is false, a ring surface is one element.\nIf `enclose` is true, a ring surface is 3 successive elements in the array : the tubular surface, then the two closing faces.\nExample how to set colors and textures on a sliced cylinder : http://www.html5gamedevs.com/topic/17945-creating-a-closed-slice-of-a-cylinder/#comment-106379\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { height?: number; diameterTop?: number; diameterBottom?: number; diamete...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ height?: number; diameterTop?: number; diameterBottom?: number; diameter?: number; tessellation..."},{"name":"scene","documentation":"","type":"any"}],"returnType":"Mesh","documentation":"Creates a cylinder or a cone mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#cylinder-or-cone\nThe parameter `height` sets the height size (float) of the cylinder/cone (float, default 2).\nThe parameter `diameter` sets the diameter of the top and bottom cap at once (float, default 1).\nThe parameters `diameterTop` and `diameterBottom` overwrite the parameter `diameter` and set respectively the top cap and bottom cap diameter (floats, default 1). The parameter \"diameterBottom\" can't be zero.\nThe parameter `tessellation` sets the number of cylinder sides (positive integer, default 24). Set it to 3 to get a prism for instance.\nThe parameter `subdivisions` sets the number of rings along the cylinder height (positive integer, default 1).\nThe parameter `hasRings` (boolean, default false) makes the subdivisions independent from each other, so they become different faces.\nThe parameter `enclose`  (boolean, default false) adds two extra faces per subdivision to a sliced cylinder to close it around its height axis.\nThe parameter `arc` (float, default 1) is the ratio (max 1) to apply to the circumference to slice the cylinder.\nYou can set different colors and different images to each box side by using the parameters `faceColors` (an array of n Color3 elements) and `faceUV` (an array of n Vector4 elements).\nThe value of n is the number of cylinder faces. If the cylinder has only 1 subdivisions, n equals : top face + cylinder surface + bottom face = 3\nNow, if the cylinder has 5 independent subdivisions (hasRings = true), n equals : top face + 5 stripe surfaces + bottom face = 2 + 5 = 7\nFinally, if the cylinder has 5 independent subdivisions and is enclose, n equals : top face + 5 x (stripe surface + 2 closing faces) + bottom face = 2 + 5 * 3 = 17\nEach array (color or UVs) is always ordered the same way : the first element is the bottom cap, the last element is the top cap. The other elements are each a ring surface.\nIf `enclose` is false, a ring surface is one element.\nIf `enclose` is true, a ring surface is 3 successive elements in the array : the tubular surface, then the two closing faces.\nExample how to set colors and textures on a sliced cylinder : http://www.html5gamedevs.com/topic/17945-creating-a-closed-slice-of-a-cylinder/#comment-106379\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateTorus","documentation":"Creates a torus mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#torus\nThe parameter `diameter` sets the diameter size (float) of the torus (default 1).\nThe parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5).\nThe parameter `tessellation` sets the number of torus sides (postive integer, default 16).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { diameter?: number; thickness?: number; tessellation?: number; updatable...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ diameter?: number; thickness?: number; tessellation?: number; updatable?: boolean; sideOrientat..."},{"name":"scene","documentation":"","type":"any"}],"returnType":"Mesh","documentation":"Creates a torus mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#torus\nThe parameter `diameter` sets the diameter size (float) of the torus (default 1).\nThe parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5).\nThe parameter `tessellation` sets the number of torus sides (postive integer, default 16).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateTorusKnot","documentation":"Creates a torus knot mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#torus-knot\nThe parameter `radius` sets the global radius size (float) of the torus knot (default 2).\nThe parameter `radialSegments` sets the number of sides on each tube segments (positive integer, default 32).\nThe parameter `tubularSegments` sets the number of tubes to decompose the knot into (positive integer, default 32).\nThe parameters `p` and `q` are the number of windings on each axis (positive integers, default 2 and 3).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { radius?: number; tube?: number; radialSegments?: number; tubularSegment...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ radius?: number; tube?: number; radialSegments?: number; tubularSegments?: number; p?: number; ..."},{"name":"scene","documentation":"","type":"any"}],"returnType":"Mesh","documentation":"Creates a torus knot mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#torus-knot\nThe parameter `radius` sets the global radius size (float) of the torus knot (default 2).\nThe parameter `radialSegments` sets the number of sides on each tube segments (positive integer, default 32).\nThe parameter `tubularSegments` sets the number of tubes to decompose the knot into (positive integer, default 32).\nThe parameters `p` and `q` are the number of windings on each axis (positive integers, default 2 and 3).\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateLineSystem","documentation":"Creates a line system mesh.\nA line system is a pool of many lines gathered in a single mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#linesystem\nA line system mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of lines as an input parameter.\nLike every other parametric shape, it is dynamically updatable by passing an existing instance of LineSystem to this static function.\nThe parameter `lines` is an array of lines, each line being an array of successive Vector3.\nThe optional parameter `instance` is an instance of an existing LineSystem object to be updated with the passed `lines` parameter. The way to update it is the same than for\nupdating a simple Line mesh, you just need to update every line in the `lines` array : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#lines-and-dashedlines\nWhen updating an instance, remember that only line point positions can change, not the number of points, neither the number of lines.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { lines: Vector3[][]; updatable: boolean; instance?: LinesMesh; }, scene:...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ lines: Vector3[][]; updatable: boolean; instance?: LinesMesh; }"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"LinesMesh","documentation":"Creates a line system mesh.\nA line system is a pool of many lines gathered in a single mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#linesystem\nA line system mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of lines as an input parameter.\nLike every other parametric shape, it is dynamically updatable by passing an existing instance of LineSystem to this static function.\nThe parameter `lines` is an array of lines, each line being an array of successive Vector3.\nThe optional parameter `instance` is an instance of an existing LineSystem object to be updated with the passed `lines` parameter. The way to update it is the same than for\nupdating a simple Line mesh, you just need to update every line in the `lines` array : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#lines-and-dashedlines\nWhen updating an instance, remember that only line point positions can change, not the number of points, neither the number of lines.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateLines","documentation":"Creates a line mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#lines\nA line mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of points as an input parameter.\nLike every other parametric shape, it is dynamically updatable by passing an existing instance of LineMesh to this static function.\nThe parameter `points` is an array successive Vector3.\nThe optional parameter `instance` is an instance of an existing LineMesh object to be updated with the passed `points` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#lines-and-dashedlines\nWhen updating an instance, remember that only point positions can change, not the number of points.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { points: Vector3[]; updatable?: boolean; instance?: LinesMesh; }, scene:...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ points: Vector3[]; updatable?: boolean; instance?: LinesMesh; }"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"LinesMesh","documentation":"Creates a line mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#lines\nA line mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of points as an input parameter.\nLike every other parametric shape, it is dynamically updatable by passing an existing instance of LineMesh to this static function.\nThe parameter `points` is an array successive Vector3.\nThe optional parameter `instance` is an instance of an existing LineMesh object to be updated with the passed `points` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#lines-and-dashedlines\nWhen updating an instance, remember that only point positions can change, not the number of points.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateDashedLines","documentation":"Creates a dashed line mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#dashed-lines\nA dashed line mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of points as an input parameter.\nLike every other parametric shape, it is dynamically updatable by passing an existing instance of LineMesh to this static function.\nThe parameter `points` is an array successive Vector3.\nThe parameter `dashNb` is the intended total number of dashes (positive integer, default 200).\nThe parameter `dashSize` is the size of the dashes relatively the dash number (positive float, default 3).\nThe parameter `gapSize` is the size of the gap between two successive dashes relatively the dash number (positive float, default 1).\nThe optional parameter `instance` is an instance of an existing LineMesh object to be updated with the passed `points` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#lines-and-dashedlines\nWhen updating an instance, remember that only point positions can change, not the number of points.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { points: Vector3[]; dashSize?: number; gapSize?: number; dashNb?: number...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ points: Vector3[]; dashSize?: number; gapSize?: number; dashNb?: number; updatable?: boolean; i..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"LinesMesh","documentation":"Creates a dashed line mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#dashed-lines\nA dashed line mesh is considered as a parametric shape since it has no predefined original shape. Its shape is determined by the passed array of points as an input parameter.\nLike every other parametric shape, it is dynamically updatable by passing an existing instance of LineMesh to this static function.\nThe parameter `points` is an array successive Vector3.\nThe parameter `dashNb` is the intended total number of dashes (positive integer, default 200).\nThe parameter `dashSize` is the size of the dashes relatively the dash number (positive float, default 3).\nThe parameter `gapSize` is the size of the gap between two successive dashes relatively the dash number (positive float, default 1).\nThe optional parameter `instance` is an instance of an existing LineMesh object to be updated with the passed `points` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#lines-and-dashedlines\nWhen updating an instance, remember that only point positions can change, not the number of points.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"ExtrudeShape","documentation":"Creates an extruded shape mesh.\nThe extrusion is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#extruded-shapes\n\nPlease read this full tutorial to understand how to design an extruded shape : http://doc.babylonjs.com/tutorials/Parametric_Shapes#extrusion\nThe parameter `shape` is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be\nextruded along the Z axis.\nThe parameter `path` is a required array of successive Vector3. This is the axis curve the shape is extruded along.\nThe parameter `rotation` (float, default 0 radians) is the angle value to rotate the shape each step (each path point), from the former step (so rotation added each step) along the curve.\nThe parameter `scale` (float, default 1) is the value to scale the shape.\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nThe optional parameter `instance` is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#extruded-shape\nRemember you can only change the shape or path point positions, not their number when updating an extruded shape.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { shape: Vector3[]; path: Vector3[]; scale?: number; rotation?: number; c...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ shape: Vector3[]; path: Vector3[]; scale?: number; rotation?: number; cap?: number; updatable?:..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates an extruded shape mesh.\nThe extrusion is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#extruded-shapes\n\nPlease read this full tutorial to understand how to design an extruded shape : http://doc.babylonjs.com/tutorials/Parametric_Shapes#extrusion\nThe parameter `shape` is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be\nextruded along the Z axis.\nThe parameter `path` is a required array of successive Vector3. This is the axis curve the shape is extruded along.\nThe parameter `rotation` (float, default 0 radians) is the angle value to rotate the shape each step (each path point), from the former step (so rotation added each step) along the curve.\nThe parameter `scale` (float, default 1) is the value to scale the shape.\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nThe optional parameter `instance` is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#extruded-shape\nRemember you can only change the shape or path point positions, not their number when updating an extruded shape.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"ExtrudeShapeCustom","documentation":"Creates an custom extruded shape mesh.\nThe custom extrusion is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\ntuto :http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#custom-extruded-shapes\n\nPlease read this full tutorial to understand how to design a custom extruded shape : http://doc.babylonjs.com/tutorials/Parametric_Shapes#extrusion\nThe parameter `shape` is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be\nextruded along the Z axis.\nThe parameter `path` is a required array of successive Vector3. This is the axis curve the shape is extruded along.\nThe parameter `rotationFunction` (JS function) is a custom Javascript function called on each path point. This function is passed the position i of the point in the path\nand the distance of this point from the begining of the path :\n```javascript\nvar rotationFunction = function(i, distance) {\n    // do things\n    return rotationValue; }\n```\nIt must returns a float value that will be the rotation in radians applied to the shape on each path point.\nThe parameter `scaleFunction` (JS function) is a custom Javascript function called on each path point. This function is passed the position i of the point in the path\nand the distance of this point from the begining of the path :\n```javascript\nvar scaleFunction = function(i, distance) {\n    // do things\n    return scaleValue;}\n```\nIt must returns a float value that will be the scale value applied to the shape on each path point.\nThe parameter `ribbonClosePath` (boolean, default false) forces the extrusion underlying ribbon to close all the paths in its `pathArray`.\nThe parameter `ribbonCloseArray` (boolean, default false) forces the extrusion underlying ribbon to close its `pathArray`.\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nThe optional parameter `instance` is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#extruded-shape\nRemember you can only change the shape or path point positions, not their number when updating an extruded shape.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { shape: Vector3[]; path: Vector3[]; scaleFunction?: any; rotationFunctio...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ shape: Vector3[]; path: Vector3[]; scaleFunction?: any; rotationFunction?: any; ribbonCloseArra..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates an custom extruded shape mesh.\nThe custom extrusion is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\ntuto :http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#custom-extruded-shapes\n\nPlease read this full tutorial to understand how to design a custom extruded shape : http://doc.babylonjs.com/tutorials/Parametric_Shapes#extrusion\nThe parameter `shape` is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be\nextruded along the Z axis.\nThe parameter `path` is a required array of successive Vector3. This is the axis curve the shape is extruded along.\nThe parameter `rotationFunction` (JS function) is a custom Javascript function called on each path point. This function is passed the position i of the point in the path\nand the distance of this point from the begining of the path :\n```javascript\nvar rotationFunction = function(i, distance) {\n    // do things\n    return rotationValue; }\n```\nIt must returns a float value that will be the rotation in radians applied to the shape on each path point.\nThe parameter `scaleFunction` (JS function) is a custom Javascript function called on each path point. This function is passed the position i of the point in the path\nand the distance of this point from the begining of the path :\n```javascript\nvar scaleFunction = function(i, distance) {\n    // do things\n    return scaleValue;}\n```\nIt must returns a float value that will be the scale value applied to the shape on each path point.\nThe parameter `ribbonClosePath` (boolean, default false) forces the extrusion underlying ribbon to close all the paths in its `pathArray`.\nThe parameter `ribbonCloseArray` (boolean, default false) forces the extrusion underlying ribbon to close its `pathArray`.\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nThe optional parameter `instance` is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#extruded-shape\nRemember you can only change the shape or path point positions, not their number when updating an extruded shape.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateLathe","documentation":"Creates lathe mesh.\nThe lathe is a shape with a symetry axis : a 2D model shape is rotated around this axis to design the lathe.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#lathe\n\nThe parameter `shape` is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be\nrotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero.\nThe parameter `radius` (positive float, default 1) is the radius value of the lathe.\nThe parameter `tessellation` (positive integer, default 64) is the side number of the lathe.\nThe parameter `arc` (positive float, default 1) is the ratio of the lathe. 0.5 builds for instance half a lathe, so an opened shape.\nThe parameter `closed` (boolean, default true) opens/closes the lathe circumference. This should be set to false when used with the parameter \"arc\".\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { shape: Vector3[]; radius?: number; tessellation?: number; arc?: number;...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ shape: Vector3[]; radius?: number; tessellation?: number; arc?: number; closed?: boolean; updat..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates lathe mesh.\nThe lathe is a shape with a symetry axis : a 2D model shape is rotated around this axis to design the lathe.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#lathe\n\nThe parameter `shape` is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be\nrotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero.\nThe parameter `radius` (positive float, default 1) is the radius value of the lathe.\nThe parameter `tessellation` (positive integer, default 64) is the side number of the lathe.\nThe parameter `arc` (positive float, default 1) is the ratio of the lathe. 0.5 builds for instance half a lathe, so an opened shape.\nThe parameter `closed` (boolean, default true) opens/closes the lathe circumference. This should be set to false when used with the parameter \"arc\".\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreatePlane","documentation":"Creates a plane mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#plane\nThe parameter `size` sets the size (float) of both sides of the plane at once (default 1).\nYou can set some different plane dimensions by using the parameters `width` and `height` (both by default have the same value than `size`).\nThe parameter `sourcePlane` is a Plane instance. It builds a mesh plane from a Math plane.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { size?: number; width?: number; height?: number; sideOrientation?: numbe...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ size?: number; width?: number; height?: number; sideOrientation?: number; updatable?: boolean; ..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates a plane mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#plane\nThe parameter `size` sets the size (float) of both sides of the plane at once (default 1).\nYou can set some different plane dimensions by using the parameters `width` and `height` (both by default have the same value than `size`).\nThe parameter `sourcePlane` is a Plane instance. It builds a mesh plane from a Math plane.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateGround","documentation":"Creates a ground mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#plane\nThe parameters `width` and `height` (floats, default 1) set the width and height sizes of the ground.\nThe parameter `subdivisions` (positive integer) sets the number of subdivisions per side.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { width?: number; height?: number; subdivisions?: number; subdivisionsX?:...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ width?: number; height?: number; subdivisions?: number; subdivisionsX?: number; subdivisionsY?:..."},{"name":"scene","documentation":"","type":"any"}],"returnType":"Mesh","documentation":"Creates a ground mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#plane\nThe parameters `width` and `height` (floats, default 1) set the width and height sizes of the ground.\nThe parameter `subdivisions` (positive integer) sets the number of subdivisions per side.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateTiledGround","documentation":"Creates a tiled ground mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#tiled-ground\nThe parameters `xmin` and `xmax` (floats, default -1 and 1) set the ground minimum and maximum X coordinates.\nThe parameters `zmin` and `zmax` (floats, default -1 and 1) set the ground minimum and maximum Z coordinates.\nThe parameter `subdivisions` is a javascript object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the\nnumbers of subdivisions on the ground width and height. Each subdivision is called a tile.\nThe parameter `precision` is a javascript object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the\nnumbers of subdivisions on the ground width and height of each tile.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { xmin: number; zmin: number; xmax: number; zmax: number; subdivisions?: ...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ xmin: number; zmin: number; xmax: number; zmax: number; subdivisions?: { w: number; h: number; ..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates a tiled ground mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#tiled-ground\nThe parameters `xmin` and `xmax` (floats, default -1 and 1) set the ground minimum and maximum X coordinates.\nThe parameters `zmin` and `zmax` (floats, default -1 and 1) set the ground minimum and maximum Z coordinates.\nThe parameter `subdivisions` is a javascript object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the\nnumbers of subdivisions on the ground width and height. Each subdivision is called a tile.\nThe parameter `precision` is a javascript object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the\nnumbers of subdivisions on the ground width and height of each tile.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateGroundFromHeightMap","documentation":"Creates a ground mesh from a height map.\ntuto : http://doc.babylonjs.com/tutorials/14._Height_Map\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#ground-from-a-height-map\nThe parameter `url` sets the URL of the height map image resource.\nThe parameters `width` and `height` (positive floats, default 10) set the ground width and height sizes.\nThe parameter `subdivisions` (positive integer, default 1) sets the number of subdivision per side.\nThe parameter `minHeight` (float, default 0) is the minimum altitude on the ground.\nThe parameter `maxHeight` (float, default 1) is the maximum altitude on the ground.\nThe parameter `onReady` is a javascript callback function that will be called  once the mesh is just built (the height map download can last some time).\nThis function is passed the newly built mesh :\n```javascript\nfunction(mesh) { // do things\n    return; }\n```\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, url: string, options: { width?: number; height?: number; subdivisions?: number; mi...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"url","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ width?: number; height?: number; subdivisions?: number; minHeight?: number; maxHeight?: number;..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"GroundMesh","documentation":"Creates a ground mesh from a height map.\ntuto : http://doc.babylonjs.com/tutorials/14._Height_Map\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#ground-from-a-height-map\nThe parameter `url` sets the URL of the height map image resource.\nThe parameters `width` and `height` (positive floats, default 10) set the ground width and height sizes.\nThe parameter `subdivisions` (positive integer, default 1) sets the number of subdivision per side.\nThe parameter `minHeight` (float, default 0) is the minimum altitude on the ground.\nThe parameter `maxHeight` (float, default 1) is the maximum altitude on the ground.\nThe parameter `onReady` is a javascript callback function that will be called  once the mesh is just built (the height map download can last some time).\nThis function is passed the newly built mesh :\n```javascript\nfunction(mesh) { // do things\n    return; }\n```\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateTube","documentation":"Creates a tube mesh.\nThe tube is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\n\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#tube\nThe parameter `path` is a required array of successive Vector3. It is the curve used as the axis of the tube.\nThe parameter `radius` (positive float, default 1) sets the tube radius size.\nThe parameter `tessellation` (positive float, default 64) is the number of sides on the tubular surface.\nThe parameter `radiusFunction` (javascript function, default null) is a vanilla javascript function. If it is not null, it overwrittes the parameter `radius`.\nThis function is called on each point of the tube path and is passed the index `i` of the i-th point and the distance of this point from the first point of the path.\nIt must return a radius value (positive float) :\n```javascript\nvar radiusFunction = function(i, distance) {\n    // do things\n    return radius; }\n```\nThe parameter `arc` (positive float, maximum 1, default 1) is the ratio to apply to the tube circumference : 2 x PI x arc.\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nThe optional parameter `instance` is an instance of an existing Tube object to be updated with the passed `pathArray` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#tube\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { path: Vector3[]; radius?: number; tessellation?: number; radiusFunction...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ path: Vector3[]; radius?: number; tessellation?: number; radiusFunction?: (i: number, distance:..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates a tube mesh.\nThe tube is a parametric shape :  http://doc.babylonjs.com/tutorials/Parametric_Shapes.  It has no predefined shape. Its final shape will depend on the input parameters.\n\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#tube\nThe parameter `path` is a required array of successive Vector3. It is the curve used as the axis of the tube.\nThe parameter `radius` (positive float, default 1) sets the tube radius size.\nThe parameter `tessellation` (positive float, default 64) is the number of sides on the tubular surface.\nThe parameter `radiusFunction` (javascript function, default null) is a vanilla javascript function. If it is not null, it overwrittes the parameter `radius`.\nThis function is called on each point of the tube path and is passed the index `i` of the i-th point and the distance of this point from the first point of the path.\nIt must return a radius value (positive float) :\n```javascript\nvar radiusFunction = function(i, distance) {\n    // do things\n    return radius; }\n```\nThe parameter `arc` (positive float, maximum 1, default 1) is the ratio to apply to the tube circumference : 2 x PI x arc.\nThe parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\nThe optional parameter `instance` is an instance of an existing Tube object to be updated with the passed `pathArray` parameter : http://doc.babylonjs.com/tutorials/How_to_dynamically_morph_a_mesh#tube\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture.\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreatePolyhedron","documentation":"Creates a polyhedron mesh.\n\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#polyhedron\nThe parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embbeded types. Please refer to the type sheet in the tutorial\n to choose the wanted type.\nThe parameter `size` (positive float, default 1) sets the polygon size.\nYou can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value).\nYou can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overwrittes the parameter `type`.\nA `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\nYou can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`).\nTo understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : http://doc.babylonjs.com/tutorials/CreateBox_Per_Face_Textures_And_Colors\nThe parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.","type":"(name: string, options: { type?: number; size?: number; sizeX?: number; sizeY?: number; sizeZ?: n...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"{ type?: number; size?: number; sizeX?: number; sizeY?: number; sizeZ?: number; custom?: any; fac..."},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates a polyhedron mesh.\n\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#polyhedron\nThe parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embbeded types. Please refer to the type sheet in the tutorial\n to choose the wanted type.\nThe parameter `size` (positive float, default 1) sets the polygon size.\nYou can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value).\nYou can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overwrittes the parameter `type`.\nA `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\nYou can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`).\nTo understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : http://doc.babylonjs.com/tutorials/CreateBox_Per_Face_Textures_And_Colors\nThe parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored.\nYou can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\nDetail here : http://doc.babylonjs.com/tutorials/02._Discover_Basic_Elements#side-orientation\nThe mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created."}],"entryType":"function"},{"name":"CreateDecal","documentation":"Creates a decal mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#decals\nA decal is a mesh usually applied as a model onto the surface of another mesh. So don't forget the parameter `sourceMesh` depicting the decal.\nThe parameter `position` (Vector3, default `(0, 0, 0)`) sets the position of the decal in World coordinates.\nThe parameter `normal` (Vector3, default `Vector3.Up`) sets the normal of the mesh where the decal is applied onto in World coordinates.\nThe parameter `size` (Vector3, default `(1, 1, 1)`) sets the decal scaling.\nThe parameter `angle` (float in radian, default 0) sets the angle to rotate the decal.","type":"(name: string, sourceMesh: AbstractMesh, options: { position?: Vector3; normal?: Vector3; size?: ...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"sourceMesh","documentation":"","type":"AbstractMesh"},{"name":"options","documentation":"","type":"{ position?: Vector3; normal?: Vector3; size?: Vector3; angle?: number; }"}],"returnType":"Mesh","documentation":"Creates a decal mesh.\ntuto : http://doc.babylonjs.com/tutorials/Mesh_CreateXXX_Methods_With_Options_Parameter#decals\nA decal is a mesh usually applied as a model onto the surface of another mesh. So don't forget the parameter `sourceMesh` depicting the decal.\nThe parameter `position` (Vector3, default `(0, 0, 0)`) sets the position of the decal in World coordinates.\nThe parameter `normal` (Vector3, default `Vector3.Up`) sets the normal of the mesh where the decal is applied onto in World coordinates.\nThe parameter `size` (Vector3, default `(1, 1, 1)`) sets the decal scaling.\nThe parameter `angle` (float in radian, default 0) sets the angle to rotate the decal."}],"entryType":"function"},{"name":"_ExtrudeShapeGeneric","documentation":"","type":"(name: any, shape: any, curve: any, scale: any, rotation: any, scaleFunction: any, rotateFunction...","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"any"},{"name":"shape","documentation":"","type":"any"},{"name":"curve","documentation":"","type":"any"},{"name":"scale","documentation":"","type":"any"},{"name":"rotation","documentation":"","type":"any"},{"name":"scaleFunction","documentation":"","type":"any"},{"name":"rotateFunction","documentation":"","type":"any"},{"name":"rbCA","documentation":"","type":"any"},{"name":"rbCP","documentation":"","type":"any"},{"name":"cap","documentation":"","type":"any"},{"name":"custom","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"any"},{"name":"updtbl","documentation":"","type":"any"},{"name":"side","documentation":"","type":"any"},{"name":"instance","documentation":"","type":"any"},{"name":"invertUV","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"SimplificationSettings","documentation":"","type":"typeof SimplificationSettings","constructors":[{"parameters":[{"name":"quality","documentation":"","type":"number"},{"name":"distance","documentation":"","type":"number"},{"name":"optimizeMesh","documentation":"","type":"boolean"}],"returnType":"SimplificationSettings","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"quality","documentation":"","type":"number","entryType":"property"},{"name":"distance","documentation":"","type":"number","entryType":"property"},{"name":"optimizeMesh","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.ISimplificationSettings"]},{"name":"SimplificationQueue","documentation":"","type":"typeof SimplificationQueue","constructors":[{"parameters":[],"returnType":"SimplificationQueue","documentation":""}],"entryType":"class","functions":[{"name":"addTask","documentation":"","type":"(task: ISimplificationTask) => void","functionBody":[{"parameters":[{"name":"task","documentation":"","type":"ISimplificationTask"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"executeNext","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"runSimplification","documentation":"","type":"(task: ISimplificationTask) => void","functionBody":[{"parameters":[{"name":"task","documentation":"","type":"ISimplificationTask"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getSimplifier","documentation":"","type":"(task: any) => any","functionBody":[{"parameters":[{"name":"task","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_simplificationArray","documentation":"","type":"any","entryType":"property"},{"name":"running","documentation":"","type":"any","entryType":"property"}]},{"name":"DecimationTriangle","documentation":"","type":"typeof DecimationTriangle","constructors":[{"parameters":[{"name":"vertices","documentation":"","type":"DecimationVertex[]"}],"returnType":"DecimationTriangle","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"vertices","documentation":"","type":"DecimationVertex[]","entryType":"property"},{"name":"normal","documentation":"","type":"Vector3","entryType":"property"},{"name":"error","documentation":"","type":"number[]","entryType":"property"},{"name":"deleted","documentation":"","type":"boolean","entryType":"property"},{"name":"isDirty","documentation":"","type":"boolean","entryType":"property"},{"name":"borderFactor","documentation":"","type":"number","entryType":"property"},{"name":"deletePending","documentation":"","type":"boolean","entryType":"property"},{"name":"originalOffset","documentation":"","type":"number","entryType":"property"}]},{"name":"DecimationVertex","documentation":"","type":"typeof DecimationVertex","constructors":[{"parameters":[{"name":"position","documentation":"","type":"Vector3"},{"name":"id","documentation":"","type":"any"}],"returnType":"DecimationVertex","documentation":""}],"entryType":"class","functions":[{"name":"updatePosition","documentation":"","type":"(newPosition: Vector3) => void","functionBody":[{"parameters":[{"name":"newPosition","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"position","documentation":"","type":"Vector3","entryType":"property"},{"name":"id","documentation":"","type":"any","entryType":"property"},{"name":"q","documentation":"","type":"QuadraticMatrix","entryType":"property"},{"name":"isBorder","documentation":"","type":"boolean","entryType":"property"},{"name":"triangleStart","documentation":"","type":"number","entryType":"property"},{"name":"triangleCount","documentation":"","type":"number","entryType":"property"},{"name":"originalOffsets","documentation":"","type":"number[]","entryType":"property"}]},{"name":"QuadraticMatrix","documentation":"","type":"typeof QuadraticMatrix","constructors":[{"parameters":[{"name":"data","documentation":"","type":"number[]"}],"returnType":"QuadraticMatrix","documentation":""}],"entryType":"class","functions":[{"name":"det","documentation":"","type":"(a11: any, a12: any, a13: any, a21: any, a22: any, a23: any, a31: any, a32: any, a33: any) => num...","functionBody":[{"parameters":[{"name":"a11","documentation":"","type":"any"},{"name":"a12","documentation":"","type":"any"},{"name":"a13","documentation":"","type":"any"},{"name":"a21","documentation":"","type":"any"},{"name":"a22","documentation":"","type":"any"},{"name":"a23","documentation":"","type":"any"},{"name":"a31","documentation":"","type":"any"},{"name":"a32","documentation":"","type":"any"},{"name":"a33","documentation":"","type":"any"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"addInPlace","documentation":"","type":"(matrix: QuadraticMatrix) => void","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"QuadraticMatrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addArrayInPlace","documentation":"","type":"(data: number[]) => void","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"number[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"add","documentation":"","type":"(matrix: QuadraticMatrix) => QuadraticMatrix","functionBody":[{"parameters":[{"name":"matrix","documentation":"","type":"QuadraticMatrix"}],"returnType":"QuadraticMatrix","documentation":""}],"entryType":"function"},{"name":"FromData","documentation":"","type":"(a: number, b: number, c: number, d: number) => QuadraticMatrix","functionBody":[{"parameters":[{"name":"a","documentation":"","type":"number"},{"name":"b","documentation":"","type":"number"},{"name":"c","documentation":"","type":"number"},{"name":"d","documentation":"","type":"number"}],"returnType":"QuadraticMatrix","documentation":""}],"entryType":"function"},{"name":"DataFromNumbers","documentation":"","type":"(a: number, b: number, c: number, d: number) => number[]","functionBody":[{"parameters":[{"name":"a","documentation":"","type":"number"},{"name":"b","documentation":"","type":"number"},{"name":"c","documentation":"","type":"number"},{"name":"d","documentation":"","type":"number"}],"returnType":"number[]","documentation":""}],"entryType":"function"}],"properties":[{"name":"data","documentation":"","type":"number[]","entryType":"property"}]},{"name":"Reference","documentation":"","type":"typeof Reference","constructors":[{"parameters":[{"name":"vertexId","documentation":"","type":"number"},{"name":"triangleId","documentation":"","type":"number"}],"returnType":"Reference","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"vertexId","documentation":"","type":"number","entryType":"property"},{"name":"triangleId","documentation":"","type":"number","entryType":"property"}]},{"name":"QuadraticErrorSimplification","documentation":"An implementation of the Quadratic Error simplification algorithm.\nOriginal paper : http://www1.cs.columbia.edu/~cs4162/html05s/garland97.pdf\nPorted mostly from QSlim and http://voxels.blogspot.de/2014/05/quadric-mesh-simplification-with-source.html to babylon JS\n@author RaananW","type":"typeof QuadraticErrorSimplification","constructors":[{"parameters":[{"name":"_mesh","documentation":"","type":"Mesh"}],"returnType":"QuadraticErrorSimplification","documentation":""}],"entryType":"class","functions":[{"name":"simplify","documentation":"","type":"(settings: ISimplificationSettings, successCallback: (simplifiedMesh: Mesh) => void) => void","functionBody":[{"parameters":[{"name":"settings","documentation":"","type":"ISimplificationSettings"},{"name":"successCallback","documentation":"","type":"(simplifiedMesh: Mesh) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isTriangleOnBoundingBox","documentation":"","type":"(triangle: any) => any","functionBody":[{"parameters":[{"name":"triangle","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"runDecimation","documentation":"","type":"(settings: any, submeshIndex: any, successCallback: any) => any","functionBody":[{"parameters":[{"name":"settings","documentation":"","type":"any"},{"name":"submeshIndex","documentation":"","type":"any"},{"name":"successCallback","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"initWithMesh","documentation":"","type":"(submeshIndex: any, callback: any, optimizeMesh?: any) => any","functionBody":[{"parameters":[{"name":"submeshIndex","documentation":"","type":"any"},{"name":"callback","documentation":"","type":"any"},{"name":"optimizeMesh","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"init","documentation":"","type":"(callback: any) => any","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"reconstructMesh","documentation":"","type":"(submeshIndex: any) => any","functionBody":[{"parameters":[{"name":"submeshIndex","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"initDecimatedMesh","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"isFlipped","documentation":"","type":"(vertex1: any, vertex2: any, point: any, deletedArray: any, borderFactor: any, delTr: any) => any","functionBody":[{"parameters":[{"name":"vertex1","documentation":"","type":"any"},{"name":"vertex2","documentation":"","type":"any"},{"name":"point","documentation":"","type":"any"},{"name":"deletedArray","documentation":"","type":"any"},{"name":"borderFactor","documentation":"","type":"any"},{"name":"delTr","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"updateTriangles","documentation":"","type":"(origVertex: any, vertex: any, deletedArray: any, deletedTriangles: any) => any","functionBody":[{"parameters":[{"name":"origVertex","documentation":"","type":"any"},{"name":"vertex","documentation":"","type":"any"},{"name":"deletedArray","documentation":"","type":"any"},{"name":"deletedTriangles","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"identifyBorder","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"updateMesh","documentation":"","type":"(identifyBorders?: any) => any","functionBody":[{"parameters":[{"name":"identifyBorders","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"vertexError","documentation":"","type":"(q: any, point: any) => any","functionBody":[{"parameters":[{"name":"q","documentation":"","type":"any"},{"name":"point","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"calculateError","documentation":"","type":"(vertex1: any, vertex2: any, pointResult?: any, normalResult?: any, uvResult?: any, colorResult?:...","functionBody":[{"parameters":[{"name":"vertex1","documentation":"","type":"any"},{"name":"vertex2","documentation":"","type":"any"},{"name":"pointResult","documentation":"","type":"any"},{"name":"normalResult","documentation":"","type":"any"},{"name":"uvResult","documentation":"","type":"any"},{"name":"colorResult","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_mesh","documentation":"","type":"any","entryType":"property"},{"name":"triangles","documentation":"","type":"any","entryType":"property"},{"name":"vertices","documentation":"","type":"any","entryType":"property"},{"name":"references","documentation":"","type":"any","entryType":"property"},{"name":"initialized","documentation":"","type":"any","entryType":"property"},{"name":"_reconstructedMesh","documentation":"","type":"any","entryType":"property"},{"name":"syncIterations","documentation":"","type":"number","entryType":"property"},{"name":"aggressiveness","documentation":"","type":"number","entryType":"property"},{"name":"decimationIterations","documentation":"","type":"number","entryType":"property"},{"name":"boundingBoxEpsilon","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.ISimplifier"]},{"name":"Polygon","documentation":"","type":"typeof Polygon","constructors":[{"parameters":[],"returnType":"Polygon","documentation":""}],"entryType":"class","functions":[{"name":"Rectangle","documentation":"","type":"(xmin: number, ymin: number, xmax: number, ymax: number) => Vector2[]","functionBody":[{"parameters":[{"name":"xmin","documentation":"","type":"number"},{"name":"ymin","documentation":"","type":"number"},{"name":"xmax","documentation":"","type":"number"},{"name":"ymax","documentation":"","type":"number"}],"returnType":"Vector2[]","documentation":""}],"entryType":"function"},{"name":"Circle","documentation":"","type":"(radius: number, cx?: number, cy?: number, numberOfSides?: number) => Vector2[]","functionBody":[{"parameters":[{"name":"radius","documentation":"","type":"number"},{"name":"cx","documentation":"","type":"number"},{"name":"cy","documentation":"","type":"number"},{"name":"numberOfSides","documentation":"","type":"number"}],"returnType":"Vector2[]","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(input: string) => Vector2[]","functionBody":[{"parameters":[{"name":"input","documentation":"","type":"string"}],"returnType":"Vector2[]","documentation":""}],"entryType":"function"},{"name":"StartingAt","documentation":"","type":"(x: number, y: number) => Path2","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"}],"returnType":"Path2","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"PolygonMeshBuilder","documentation":"","type":"typeof PolygonMeshBuilder","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"contours","documentation":"","type":"Path2"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"PolygonMeshBuilder","documentation":""},{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"contours","documentation":"","type":"Vector2[]"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"PolygonMeshBuilder","documentation":""}],"entryType":"class","functions":[{"name":"_addToepoint","documentation":"","type":"(points: any) => any","functionBody":[{"parameters":[{"name":"points","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"addHole","documentation":"","type":"(hole: Vector2[]) => PolygonMeshBuilder","functionBody":[{"parameters":[{"name":"hole","documentation":"","type":"Vector2[]"}],"returnType":"PolygonMeshBuilder","documentation":""}],"entryType":"function"},{"name":"build","documentation":"","type":"(updatable?: boolean, depth?: number) => Mesh","functionBody":[{"parameters":[{"name":"updatable","documentation":"","type":"boolean"},{"name":"depth","documentation":"","type":"number"}],"returnType":"Mesh","documentation":""}],"entryType":"function"},{"name":"addSide","documentation":"","type":"(positions: any, normals: any, uvs: any, indices: any, bounds: any, points: any, depth: any, flip...","functionBody":[{"parameters":[{"name":"positions","documentation":"","type":"any"},{"name":"normals","documentation":"","type":"any"},{"name":"uvs","documentation":"","type":"any"},{"name":"indices","documentation":"","type":"any"},{"name":"bounds","documentation":"","type":"any"},{"name":"points","documentation":"","type":"any"},{"name":"depth","documentation":"","type":"any"},{"name":"flip","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_points","documentation":"","type":"any","entryType":"property"},{"name":"_outlinepoints","documentation":"","type":"any","entryType":"property"},{"name":"_holes","documentation":"","type":"any","entryType":"property"},{"name":"_name","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_epoints","documentation":"","type":"any","entryType":"property"},{"name":"_eholes","documentation":"","type":"any","entryType":"property"}]},{"name":"SubMesh","documentation":"","type":"typeof SubMesh","constructors":[{"parameters":[{"name":"materialIndex","documentation":"","type":"number"},{"name":"verticesStart","documentation":"","type":"number"},{"name":"verticesCount","documentation":"","type":"number"},{"name":"indexStart","documentation":"","type":"any"},{"name":"indexCount","documentation":"","type":"number"},{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"renderingMesh","documentation":"","type":"Mesh"},{"name":"createBoundingBox","documentation":"","type":"boolean"}],"returnType":"SubMesh","documentation":""}],"entryType":"class","functions":[{"name":"getBoundingInfo","documentation":"","type":"() => BoundingInfo","functionBody":[{"parameters":[],"returnType":"BoundingInfo","documentation":""}],"entryType":"function"},{"name":"getMesh","documentation":"","type":"() => AbstractMesh","functionBody":[{"parameters":[],"returnType":"AbstractMesh","documentation":""}],"entryType":"function"},{"name":"getRenderingMesh","documentation":"","type":"() => Mesh","functionBody":[{"parameters":[],"returnType":"Mesh","documentation":""}],"entryType":"function"},{"name":"getMaterial","documentation":"","type":"() => Material","functionBody":[{"parameters":[],"returnType":"Material","documentation":""}],"entryType":"function"},{"name":"refreshBoundingInfo","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_checkCollision","documentation":"","type":"(collider: Collider) => boolean","functionBody":[{"parameters":[{"name":"collider","documentation":"","type":"Collider"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"updateBoundingInfo","documentation":"","type":"(world: Matrix) => void","functionBody":[{"parameters":[{"name":"world","documentation":"","type":"Matrix"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isInFrustum","documentation":"","type":"(frustumPlanes: Plane[]) => boolean","functionBody":[{"parameters":[{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"isCompletelyInFrustum","documentation":"","type":"(frustumPlanes: Plane[]) => boolean","functionBody":[{"parameters":[{"name":"frustumPlanes","documentation":"","type":"Plane[]"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"render","documentation":"","type":"(enableAlphaMode: boolean) => void","functionBody":[{"parameters":[{"name":"enableAlphaMode","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getLinesIndexBuffer","documentation":"","type":"(indices: number[] | Int32Array, engine: Engine) => WebGLBuffer","functionBody":[{"parameters":[{"name":"indices","documentation":"","type":"number[] | Int32Array"},{"name":"engine","documentation":"","type":"Engine"}],"returnType":"WebGLBuffer","documentation":""}],"entryType":"function"},{"name":"canIntersects","documentation":"","type":"(ray: Ray) => boolean","functionBody":[{"parameters":[{"name":"ray","documentation":"","type":"Ray"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"intersects","documentation":"","type":"(ray: Ray, positions: Vector3[], indices: number[] | Int32Array, fastCheck?: boolean) => Intersec...","functionBody":[{"parameters":[{"name":"ray","documentation":"","type":"Ray"},{"name":"positions","documentation":"","type":"Vector3[]"},{"name":"indices","documentation":"","type":"number[] | Int32Array"},{"name":"fastCheck","documentation":"","type":"boolean"}],"returnType":"IntersectionInfo","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(newMesh: AbstractMesh, newRenderingMesh?: Mesh) => SubMesh","functionBody":[{"parameters":[{"name":"newMesh","documentation":"","type":"AbstractMesh"},{"name":"newRenderingMesh","documentation":"","type":"Mesh"}],"returnType":"SubMesh","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"CreateFromIndices","documentation":"","type":"(materialIndex: number, startIndex: number, indexCount: number, mesh: AbstractMesh, renderingMesh...","functionBody":[{"parameters":[{"name":"materialIndex","documentation":"","type":"number"},{"name":"startIndex","documentation":"","type":"number"},{"name":"indexCount","documentation":"","type":"number"},{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"renderingMesh","documentation":"","type":"Mesh"}],"returnType":"SubMesh","documentation":""}],"entryType":"function"}],"properties":[{"name":"materialIndex","documentation":"","type":"number","entryType":"property"},{"name":"verticesStart","documentation":"","type":"number","entryType":"property"},{"name":"verticesCount","documentation":"","type":"number","entryType":"property"},{"name":"indexStart","documentation":"","type":"any","entryType":"property"},{"name":"indexCount","documentation":"","type":"number","entryType":"property"},{"name":"linesIndexCount","documentation":"","type":"number","entryType":"property"},{"name":"_mesh","documentation":"","type":"any","entryType":"property"},{"name":"_renderingMesh","documentation":"","type":"any","entryType":"property"},{"name":"_boundingInfo","documentation":"","type":"any","entryType":"property"},{"name":"_linesIndexBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_lastColliderWorldVertices","documentation":"","type":"Vector3[]","entryType":"property"},{"name":"_trianglePlanes","documentation":"","type":"Plane[]","entryType":"property"},{"name":"_lastColliderTransformMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"_renderId","documentation":"","type":"number","entryType":"property"},{"name":"_alphaIndex","documentation":"","type":"number","entryType":"property"},{"name":"_distanceToCamera","documentation":"","type":"number","entryType":"property"},{"name":"_id","documentation":"","type":"number","entryType":"property"},{"name":"IsGlobal","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.ICullable"]},{"name":"VertexBuffer","documentation":"","type":"typeof VertexBuffer","constructors":[{"parameters":[{"name":"engine","documentation":"","type":"any"},{"name":"data","documentation":"","type":"number[] | Float32Array | Buffer"},{"name":"kind","documentation":"","type":"string"},{"name":"updatable","documentation":"","type":"boolean"},{"name":"postponeInternalCreation","documentation":"","type":"boolean"},{"name":"stride","documentation":"","type":"number"},{"name":"instanced","documentation":"","type":"boolean"},{"name":"offset","documentation":"","type":"number"},{"name":"size","documentation":"","type":"number"}],"returnType":"VertexBuffer","documentation":""}],"entryType":"class","functions":[{"name":"getKind","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"isUpdatable","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getData","documentation":"","type":"() => number[] | Float32Array","functionBody":[{"parameters":[],"returnType":"number[] | Float32Array","documentation":""}],"entryType":"function"},{"name":"getBuffer","documentation":"","type":"() => WebGLBuffer","functionBody":[{"parameters":[],"returnType":"WebGLBuffer","documentation":""}],"entryType":"function"},{"name":"getStrideSize","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getOffset","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getSize","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"getIsInstanced","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"create","documentation":"","type":"(data?: number[] | Float32Array) => void","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"number[] | Float32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"update","documentation":"","type":"(data: number[] | Float32Array) => void","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"number[] | Float32Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateDirectly","documentation":"","type":"(data: Float32Array, offset: number) => void","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"Float32Array"},{"name":"offset","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_buffer","documentation":"","type":"any","entryType":"property"},{"name":"_kind","documentation":"","type":"any","entryType":"property"},{"name":"_offset","documentation":"","type":"any","entryType":"property"},{"name":"_size","documentation":"","type":"any","entryType":"property"},{"name":"_stride","documentation":"","type":"any","entryType":"property"},{"name":"_ownsBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_PositionKind","documentation":"","type":"any","entryType":"property"},{"name":"_NormalKind","documentation":"","type":"any","entryType":"property"},{"name":"_UVKind","documentation":"","type":"any","entryType":"property"},{"name":"_UV2Kind","documentation":"","type":"any","entryType":"property"},{"name":"_UV3Kind","documentation":"","type":"any","entryType":"property"},{"name":"_UV4Kind","documentation":"","type":"any","entryType":"property"},{"name":"_UV5Kind","documentation":"","type":"any","entryType":"property"},{"name":"_UV6Kind","documentation":"","type":"any","entryType":"property"},{"name":"_ColorKind","documentation":"","type":"any","entryType":"property"},{"name":"_MatricesIndicesKind","documentation":"","type":"any","entryType":"property"},{"name":"_MatricesWeightsKind","documentation":"","type":"any","entryType":"property"},{"name":"_MatricesIndicesExtraKind","documentation":"","type":"any","entryType":"property"},{"name":"_MatricesWeightsExtraKind","documentation":"","type":"any","entryType":"property"},{"name":"PositionKind","documentation":"","type":"string","entryType":"property"},{"name":"NormalKind","documentation":"","type":"string","entryType":"property"},{"name":"UVKind","documentation":"","type":"string","entryType":"property"},{"name":"UV2Kind","documentation":"","type":"string","entryType":"property"},{"name":"UV3Kind","documentation":"","type":"string","entryType":"property"},{"name":"UV4Kind","documentation":"","type":"string","entryType":"property"},{"name":"UV5Kind","documentation":"","type":"string","entryType":"property"},{"name":"UV6Kind","documentation":"","type":"string","entryType":"property"},{"name":"ColorKind","documentation":"","type":"string","entryType":"property"},{"name":"MatricesIndicesKind","documentation":"","type":"string","entryType":"property"},{"name":"MatricesWeightsKind","documentation":"","type":"string","entryType":"property"},{"name":"MatricesIndicesExtraKind","documentation":"","type":"string","entryType":"property"},{"name":"MatricesWeightsExtraKind","documentation":"","type":"string","entryType":"property"}]},{"name":"Particle","documentation":"","type":"typeof Particle","constructors":[{"parameters":[],"returnType":"Particle","documentation":""}],"entryType":"class","functions":[{"name":"copyTo","documentation":"","type":"(other: Particle) => void","functionBody":[{"parameters":[{"name":"other","documentation":"","type":"Particle"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"position","documentation":"","type":"Vector3","entryType":"property"},{"name":"direction","documentation":"","type":"Vector3","entryType":"property"},{"name":"color","documentation":"","type":"Color4","entryType":"property"},{"name":"colorStep","documentation":"","type":"Color4","entryType":"property"},{"name":"lifeTime","documentation":"","type":"number","entryType":"property"},{"name":"age","documentation":"","type":"number","entryType":"property"},{"name":"size","documentation":"","type":"number","entryType":"property"},{"name":"angle","documentation":"","type":"number","entryType":"property"},{"name":"angularSpeed","documentation":"","type":"number","entryType":"property"}]},{"name":"ParticleSystem","documentation":"","type":"typeof ParticleSystem","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"capacity","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"customEffect","documentation":"","type":"Effect"}],"returnType":"ParticleSystem","documentation":""}],"entryType":"class","functions":[{"name":"recycleParticle","documentation":"","type":"(particle: Particle) => void","functionBody":[{"parameters":[{"name":"particle","documentation":"","type":"Particle"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getCapacity","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"isAlive","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"isStarted","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"start","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"stop","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_appendParticleVertex","documentation":"","type":"(index: number, particle: Particle, offsetX: number, offsetY: number) => void","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"number"},{"name":"particle","documentation":"","type":"Particle"},{"name":"offsetX","documentation":"","type":"number"},{"name":"offsetY","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_update","documentation":"","type":"(newParticles: any) => any","functionBody":[{"parameters":[{"name":"newParticles","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getEffect","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"animate","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"render","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"(name: string, newEmitter: any) => ParticleSystem","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"newEmitter","documentation":"","type":"any"}],"returnType":"ParticleSystem","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedParticleSystem: any, scene: Scene, rootUrl: string) => ParticleSystem","functionBody":[{"parameters":[{"name":"parsedParticleSystem","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"ParticleSystem","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"BLENDMODE_ONEONE","documentation":"","type":"number","entryType":"property"},{"name":"BLENDMODE_STANDARD","documentation":"","type":"number","entryType":"property"},{"name":"animations","documentation":"","type":"Animation[]","entryType":"property"},{"name":"id","documentation":"","type":"string","entryType":"property"},{"name":"renderingGroupId","documentation":"","type":"number","entryType":"property"},{"name":"emitter","documentation":"","type":"any","entryType":"property"},{"name":"emitRate","documentation":"","type":"number","entryType":"property"},{"name":"manualEmitCount","documentation":"","type":"number","entryType":"property"},{"name":"updateSpeed","documentation":"","type":"number","entryType":"property"},{"name":"targetStopDuration","documentation":"","type":"number","entryType":"property"},{"name":"disposeOnStop","documentation":"","type":"boolean","entryType":"property"},{"name":"minEmitPower","documentation":"","type":"number","entryType":"property"},{"name":"maxEmitPower","documentation":"","type":"number","entryType":"property"},{"name":"minLifeTime","documentation":"","type":"number","entryType":"property"},{"name":"maxLifeTime","documentation":"","type":"number","entryType":"property"},{"name":"minSize","documentation":"","type":"number","entryType":"property"},{"name":"maxSize","documentation":"","type":"number","entryType":"property"},{"name":"minAngularSpeed","documentation":"","type":"number","entryType":"property"},{"name":"maxAngularSpeed","documentation":"","type":"number","entryType":"property"},{"name":"particleTexture","documentation":"","type":"Texture","entryType":"property"},{"name":"layerMask","documentation":"","type":"number","entryType":"property"},{"name":"onDisposeObservable","documentation":"An event triggered when the system is disposed.\n@type {BABYLON.Observable}","type":"Observable<ParticleSystem>","entryType":"property"},{"name":"_onDisposeObserver","documentation":"","type":"any","entryType":"property"},{"name":"onDispose","documentation":"","type":"() => void","entryType":"property"},{"name":"updateFunction","documentation":"","type":"(particles: Particle[]) => void","entryType":"property"},{"name":"blendMode","documentation":"","type":"number","entryType":"property"},{"name":"forceDepthWrite","documentation":"","type":"boolean","entryType":"property"},{"name":"gravity","documentation":"","type":"Vector3","entryType":"property"},{"name":"direction1","documentation":"","type":"Vector3","entryType":"property"},{"name":"direction2","documentation":"","type":"Vector3","entryType":"property"},{"name":"minEmitBox","documentation":"","type":"Vector3","entryType":"property"},{"name":"maxEmitBox","documentation":"","type":"Vector3","entryType":"property"},{"name":"color1","documentation":"","type":"Color4","entryType":"property"},{"name":"color2","documentation":"","type":"Color4","entryType":"property"},{"name":"colorDead","documentation":"","type":"Color4","entryType":"property"},{"name":"textureMask","documentation":"","type":"Color4","entryType":"property"},{"name":"startDirectionFunction","documentation":"","type":"(emitPower: number, worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle) => void","entryType":"property"},{"name":"startPositionFunction","documentation":"","type":"(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle) => void","entryType":"property"},{"name":"particles","documentation":"","type":"any","entryType":"property"},{"name":"_capacity","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_stockParticles","documentation":"","type":"any","entryType":"property"},{"name":"_newPartsExcess","documentation":"","type":"any","entryType":"property"},{"name":"_vertexData","documentation":"","type":"any","entryType":"property"},{"name":"_vertexBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_vertexBuffers","documentation":"","type":"any","entryType":"property"},{"name":"_indexBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_effect","documentation":"","type":"any","entryType":"property"},{"name":"_customEffect","documentation":"","type":"any","entryType":"property"},{"name":"_cachedDefines","documentation":"","type":"any","entryType":"property"},{"name":"_scaledColorStep","documentation":"","type":"any","entryType":"property"},{"name":"_colorDiff","documentation":"","type":"any","entryType":"property"},{"name":"_scaledDirection","documentation":"","type":"any","entryType":"property"},{"name":"_scaledGravity","documentation":"","type":"any","entryType":"property"},{"name":"_currentRenderId","documentation":"","type":"any","entryType":"property"},{"name":"_alive","documentation":"","type":"any","entryType":"property"},{"name":"_started","documentation":"","type":"any","entryType":"property"},{"name":"_stopped","documentation":"","type":"any","entryType":"property"},{"name":"_actualFrame","documentation":"","type":"any","entryType":"property"},{"name":"_scaledUpdateSpeed","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.IDisposable","BABYLON.IAnimatable"]},{"name":"SolidParticle","documentation":"","type":"typeof SolidParticle","constructors":[{"parameters":[{"name":"particleIndex","documentation":"","type":"number"},{"name":"positionIndex","documentation":"","type":"number"},{"name":"model","documentation":"","type":"ModelShape"},{"name":"shapeId","documentation":"","type":"number"},{"name":"idxInShape","documentation":"","type":"number"}],"returnType":"SolidParticle","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"idx","documentation":"","type":"number","entryType":"property"},{"name":"color","documentation":"","type":"Color4","entryType":"property"},{"name":"position","documentation":"","type":"Vector3","entryType":"property"},{"name":"rotation","documentation":"","type":"Vector3","entryType":"property"},{"name":"rotationQuaternion","documentation":"","type":"Quaternion","entryType":"property"},{"name":"scaling","documentation":"","type":"Vector3","entryType":"property"},{"name":"uvs","documentation":"","type":"Vector4","entryType":"property"},{"name":"velocity","documentation":"","type":"Vector3","entryType":"property"},{"name":"alive","documentation":"","type":"boolean","entryType":"property"},{"name":"isVisible","documentation":"","type":"boolean","entryType":"property"},{"name":"_pos","documentation":"","type":"number","entryType":"property"},{"name":"_model","documentation":"","type":"ModelShape","entryType":"property"},{"name":"shapeId","documentation":"","type":"number","entryType":"property"},{"name":"idxInShape","documentation":"","type":"number","entryType":"property"},{"name":"scale","documentation":"","type":"Vector3","entryType":"property"},{"name":"quaternion","documentation":"","type":"Quaternion","entryType":"property"}]},{"name":"ModelShape","documentation":"","type":"typeof ModelShape","constructors":[{"parameters":[{"name":"id","documentation":"","type":"number"},{"name":"shape","documentation":"","type":"Vector3[]"},{"name":"shapeUV","documentation":"","type":"number[]"},{"name":"posFunction","documentation":"","type":"(particle: SolidParticle, i: number, s: number) => void"},{"name":"vtxFunction","documentation":"","type":"(particle: SolidParticle, vertex: Vector3, i: number) => void"}],"returnType":"ModelShape","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"shapeID","documentation":"","type":"number","entryType":"property"},{"name":"_shape","documentation":"","type":"Vector3[]","entryType":"property"},{"name":"_shapeUV","documentation":"","type":"number[]","entryType":"property"},{"name":"_positionFunction","documentation":"","type":"(particle: SolidParticle, i: number, s: number) => void","entryType":"property"},{"name":"_vertexFunction","documentation":"","type":"(particle: SolidParticle, vertex: Vector3, i: number) => void","entryType":"property"}]},{"name":"SolidParticleSystem","documentation":"Full documentation here : http://doc.babylonjs.com/overviews/Solid_Particle_System","type":"typeof SolidParticleSystem","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"options","documentation":"","type":"{ updatable?: boolean; isPickable?: boolean; }"}],"returnType":"SolidParticleSystem","documentation":"Creates a SPS (Solid Particle System) object.\n`name` (String) is the SPS name, this will be the underlying mesh name.\n`scene` (Scene) is the scene in which the SPS is added.\n`updatable` (default true) : if the SPS must be updatable or immutable.\n`isPickable` (default false) : if the solid particles must be pickable."}],"entryType":"class","functions":[{"name":"buildMesh","documentation":"Builds the SPS underlying mesh. Returns a standard Mesh.\nIf no model shape was added to the SPS, the returned mesh is just a single triangular plane.","type":"() => Mesh","functionBody":[{"parameters":[],"returnType":"Mesh","documentation":"Builds the SPS underlying mesh. Returns a standard Mesh.\nIf no model shape was added to the SPS, the returned mesh is just a single triangular plane."}],"entryType":"function"},{"name":"digest","documentation":"Digests the mesh and generates as many solid particles in the system as wanted. Returns the SPS.\nThese particles will have the same geometry than the mesh parts and will be positioned at the same localisation than the mesh original places.\nThus the particles generated from `digest()` have their property `position` set yet.\n`mesh` ( Mesh ) is the mesh to be digested\n`facetNb` (optional integer, default 1) is the number of mesh facets per particle, this parameter is overriden by the parameter `number` if any\n`delta` (optional integer, default 0) is the random extra number of facets per particle , each particle will have between `facetNb` and `facetNb + delta` facets\n`number` (optional positive integer) is the wanted number of particles : each particle is built with `mesh_total_facets / number` facets","type":"(mesh: Mesh, options?: { facetNb?: number; number?: number; delta?: number; }) => SolidParticleSy...","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"Mesh"},{"name":"options","documentation":"","type":"{ facetNb?: number; number?: number; delta?: number; }"}],"returnType":"SolidParticleSystem","documentation":"Digests the mesh and generates as many solid particles in the system as wanted. Returns the SPS.\nThese particles will have the same geometry than the mesh parts and will be positioned at the same localisation than the mesh original places.\nThus the particles generated from `digest()` have their property `position` set yet.\n`mesh` ( Mesh ) is the mesh to be digested\n`facetNb` (optional integer, default 1) is the number of mesh facets per particle, this parameter is overriden by the parameter `number` if any\n`delta` (optional integer, default 0) is the random extra number of facets per particle , each particle will have between `facetNb` and `facetNb + delta` facets\n`number` (optional positive integer) is the wanted number of particles : each particle is built with `mesh_total_facets / number` facets"}],"entryType":"function"},{"name":"_resetCopy","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_meshBuilder","documentation":"","type":"(p: any, shape: any, positions: any, meshInd: any, indices: any, meshUV: any, uvs: any, meshCol: ...","functionBody":[{"parameters":[{"name":"p","documentation":"","type":"any"},{"name":"shape","documentation":"","type":"any"},{"name":"positions","documentation":"","type":"any"},{"name":"meshInd","documentation":"","type":"any"},{"name":"indices","documentation":"","type":"any"},{"name":"meshUV","documentation":"","type":"any"},{"name":"uvs","documentation":"","type":"any"},{"name":"meshCol","documentation":"","type":"any"},{"name":"colors","documentation":"","type":"any"},{"name":"meshNor","documentation":"","type":"any"},{"name":"normals","documentation":"","type":"any"},{"name":"idx","documentation":"","type":"any"},{"name":"idxInShape","documentation":"","type":"any"},{"name":"options","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_posToShape","documentation":"","type":"(positions: any) => any","functionBody":[{"parameters":[{"name":"positions","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_uvsToShapeUV","documentation":"","type":"(uvs: any) => any","functionBody":[{"parameters":[{"name":"uvs","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_addParticle","documentation":"","type":"(idx: any, idxpos: any, model: any, shapeId: any, idxInShape: any) => any","functionBody":[{"parameters":[{"name":"idx","documentation":"","type":"any"},{"name":"idxpos","documentation":"","type":"any"},{"name":"model","documentation":"","type":"any"},{"name":"shapeId","documentation":"","type":"any"},{"name":"idxInShape","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"addShape","documentation":"Adds some particles to the SPS from the model shape. Returns the shape id.\nPlease read the doc : http://doc.babylonjs.com/overviews/Solid_Particle_System#create-an-immutable-sps\n`mesh` is any Mesh object that will be used as a model for the solid particles.\n`nb` (positive integer) the number of particles to be created from this model\n`positionFunction` is an optional javascript function to called for each particle on SPS creation.\n`vertexFunction` is an optional javascript function to called for each vertex of each particle on SPS creation","type":"(mesh: Mesh, nb: number, options?: { positionFunction?: any; vertexFunction?: any; }) => number","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"Mesh"},{"name":"nb","documentation":"","type":"number"},{"name":"options","documentation":"","type":"{ positionFunction?: any; vertexFunction?: any; }"}],"returnType":"number","documentation":"Adds some particles to the SPS from the model shape. Returns the shape id.\nPlease read the doc : http://doc.babylonjs.com/overviews/Solid_Particle_System#create-an-immutable-sps\n`mesh` is any Mesh object that will be used as a model for the solid particles.\n`nb` (positive integer) the number of particles to be created from this model\n`positionFunction` is an optional javascript function to called for each particle on SPS creation.\n`vertexFunction` is an optional javascript function to called for each vertex of each particle on SPS creation"}],"entryType":"function"},{"name":"_rebuildParticle","documentation":"","type":"(particle: any) => any","functionBody":[{"parameters":[{"name":"particle","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"rebuildMesh","documentation":"Rebuilds the whole mesh and updates the VBO : custom positions and vertices are recomputed if needed.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Rebuilds the whole mesh and updates the VBO : custom positions and vertices are recomputed if needed."}],"entryType":"function"},{"name":"setParticles","documentation":"Sets all the particles : this method actually really updates the mesh according to the particle positions, rotations, colors, textures, etc.\nThis method calls `updateParticle()` for each particle of the SPS.\nFor an animated SPS, it is usually called within the render loop.","type":"(start?: number, end?: number, update?: boolean) => void","functionBody":[{"parameters":[{"name":"start","documentation":"The particle index in the particle array where to start to compute the particle property values _(default 0)_","type":"number"},{"name":"end","documentation":"The particle index in the particle array where to stop to compute the particle property values _(default nbParticle - 1)_","type":"number"},{"name":"update","documentation":"If the mesh must be finally updated on this call after all the particle computations _(default true)_","type":"boolean"}],"returnType":"void","documentation":"Sets all the particles : this method actually really updates the mesh according to the particle positions, rotations, colors, textures, etc.\nThis method calls `updateParticle()` for each particle of the SPS.\nFor an animated SPS, it is usually called within the render loop."}],"entryType":"function"},{"name":"_quaternionRotationYPR","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_quaternionToRotationMatrix","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"Disposes the SPS","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Disposes the SPS"}],"entryType":"function"},{"name":"refreshVisibleSize","documentation":"Visibilty helper : Recomputes the visible size according to the mesh bounding box\ndoc : http://doc.babylonjs.com/overviews/Solid_Particle_System#sps-visibility","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Visibilty helper : Recomputes the visible size according to the mesh bounding box\ndoc : http://doc.babylonjs.com/overviews/Solid_Particle_System#sps-visibility"}],"entryType":"function"},{"name":"setVisibilityBox","documentation":"Visibility helper : Sets the size of a visibility box, this sets the underlying mesh bounding box.","type":"(size: number) => void","functionBody":[{"parameters":[{"name":"size","documentation":"the size (float) of the visibility box\nnote : this doesn't lock the SPS mesh bounding box.\ndoc : http://doc.babylonjs.com/overviews/Solid_Particle_System#sps-visibility","type":"number"}],"returnType":"void","documentation":"Visibility helper : Sets the size of a visibility box, this sets the underlying mesh bounding box."}],"entryType":"function"},{"name":"initParticles","documentation":"This function does nothing. It may be overwritten to set all the particle first values.\nThe SPS doesn't call this function, you may have to call it by your own.\ndoc : http://doc.babylonjs.com/overviews/Solid_Particle_System#particle-management","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"This function does nothing. It may be overwritten to set all the particle first values.\nThe SPS doesn't call this function, you may have to call it by your own.\ndoc : http://doc.babylonjs.com/overviews/Solid_Particle_System#particle-management"}],"entryType":"function"},{"name":"recycleParticle","documentation":"This function does nothing. It may be overwritten to recycle a particle.\nThe SPS doesn't call this function, you may have to call it by your own.\ndoc : http://doc.babylonjs.com/overviews/Solid_Particle_System#particle-management","type":"(particle: SolidParticle) => SolidParticle","functionBody":[{"parameters":[{"name":"particle","documentation":"","type":"SolidParticle"}],"returnType":"SolidParticle","documentation":"This function does nothing. It may be overwritten to recycle a particle.\nThe SPS doesn't call this function, you may have to call it by your own.\ndoc : http://doc.babylonjs.com/overviews/Solid_Particle_System#particle-management"}],"entryType":"function"},{"name":"updateParticle","documentation":"Updates a particle : this function should  be overwritten by the user.\nIt is called on each particle by `setParticles()`. This is the place to code each particle behavior.\ndoc : http://doc.babylonjs.com/overviews/Solid_Particle_System#particle-management\nex : just set a particle position or velocity and recycle conditions","type":"(particle: SolidParticle) => SolidParticle","functionBody":[{"parameters":[{"name":"particle","documentation":"","type":"SolidParticle"}],"returnType":"SolidParticle","documentation":"Updates a particle : this function should  be overwritten by the user.\nIt is called on each particle by `setParticles()`. This is the place to code each particle behavior.\ndoc : http://doc.babylonjs.com/overviews/Solid_Particle_System#particle-management\nex : just set a particle position or velocity and recycle conditions"}],"entryType":"function"},{"name":"updateParticleVertex","documentation":"Updates a vertex of a particle : it can be overwritten by the user.\nThis will be called on each vertex particle by `setParticles()` if `computeParticleVertex` is set to true only.","type":"(particle: SolidParticle, vertex: Vector3, pt: number) => Vector3","functionBody":[{"parameters":[{"name":"particle","documentation":"the current particle","type":"SolidParticle"},{"name":"vertex","documentation":"the current index of the current particle","type":"Vector3"},{"name":"pt","documentation":"the index of the current vertex in the particle shape\ndoc : http://doc.babylonjs.com/overviews/Solid_Particle_System#update-each-particle-shape\nex : just set a vertex particle position","type":"number"}],"returnType":"Vector3","documentation":"Updates a vertex of a particle : it can be overwritten by the user.\nThis will be called on each vertex particle by `setParticles()` if `computeParticleVertex` is set to true only."}],"entryType":"function"},{"name":"beforeUpdateParticles","documentation":"This will be called before any other treatment by `setParticles()` and will be passed three parameters.\nThis does nothing and may be overwritten by the user.","type":"(start?: number, stop?: number, update?: boolean) => void","functionBody":[{"parameters":[{"name":"start","documentation":"the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()","type":"number"},{"name":"stop","documentation":"the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()","type":"number"},{"name":"update","documentation":"the boolean update value actually passed to setParticles()","type":"boolean"}],"returnType":"void","documentation":"This will be called before any other treatment by `setParticles()` and will be passed three parameters.\nThis does nothing and may be overwritten by the user."}],"entryType":"function"},{"name":"afterUpdateParticles","documentation":"This will be called  by `setParticles()` after all the other treatments and just before the actual mesh update.\nThis will be passed three parameters.\nThis does nothing and may be overwritten by the user.","type":"(start?: number, stop?: number, update?: boolean) => void","functionBody":[{"parameters":[{"name":"start","documentation":"the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()","type":"number"},{"name":"stop","documentation":"the particle index in the particle array where to stop to iterate, same than the value passed to setParticle()","type":"number"},{"name":"update","documentation":"the boolean update value actually passed to setParticles()","type":"boolean"}],"returnType":"void","documentation":"This will be called  by `setParticles()` after all the other treatments and just before the actual mesh update.\nThis will be passed three parameters.\nThis does nothing and may be overwritten by the user."}],"entryType":"function"}],"properties":[{"name":"particles","documentation":"The SPS array of Solid Particle objects. Just access each particle as with any classic array.\nExample : var p = SPS.particles[i];","type":"SolidParticle[]","entryType":"property"},{"name":"nbParticles","documentation":"The SPS total number of particles. Read only. Use SPS.counter instead if you need to set your own value.","type":"number","entryType":"property"},{"name":"billboard","documentation":"If the particles must ever face the camera (default false). Useful for planar particles.","type":"boolean","entryType":"property"},{"name":"recomputeNormals","documentation":"Recompute normals when adding a shape","type":"boolean","entryType":"property"},{"name":"counter","documentation":"This a counter ofr your own usage. It's not set by any SPS functions.","type":"number","entryType":"property"},{"name":"name","documentation":"The SPS name. This name is also given to the underlying mesh.","type":"string","entryType":"property"},{"name":"mesh","documentation":"The SPS mesh. It's a standard BJS Mesh, so all the methods from the Mesh class are avalaible.","type":"Mesh","entryType":"property"},{"name":"vars","documentation":"This empty object is intended to store some SPS specific or temporary values in order to lower the Garbage Collector activity.\nPlease read : http://doc.babylonjs.com/overviews/Solid_Particle_System#garbage-collector-concerns","type":"any","entryType":"property"},{"name":"pickedParticles","documentation":"This array is populated when the SPS is set as 'pickable'.\nEach key of this array is a `faceId` value that you can get from a pickResult object.\nEach element of this array is an object `{idx: int, faceId: int}`.\n`idx` is the picked particle index in the `SPS.particles` array\n`faceId` is the picked face index counted within this particle.\nPlease read : http://doc.babylonjs.com/overviews/Solid_Particle_System#pickable-particles","type":"{ idx: number; faceId: number; }[]","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_positions","documentation":"","type":"any","entryType":"property"},{"name":"_indices","documentation":"","type":"any","entryType":"property"},{"name":"_normals","documentation":"","type":"any","entryType":"property"},{"name":"_colors","documentation":"","type":"any","entryType":"property"},{"name":"_uvs","documentation":"","type":"any","entryType":"property"},{"name":"_positions32","documentation":"","type":"any","entryType":"property"},{"name":"_normals32","documentation":"","type":"any","entryType":"property"},{"name":"_fixedNormal32","documentation":"","type":"any","entryType":"property"},{"name":"_colors32","documentation":"","type":"any","entryType":"property"},{"name":"_uvs32","documentation":"","type":"any","entryType":"property"},{"name":"_index","documentation":"","type":"any","entryType":"property"},{"name":"_updatable","documentation":"","type":"any","entryType":"property"},{"name":"_pickable","documentation":"","type":"any","entryType":"property"},{"name":"_isVisibilityBoxLocked","documentation":"","type":"any","entryType":"property"},{"name":"_alwaysVisible","documentation":"","type":"any","entryType":"property"},{"name":"_shapeCounter","documentation":"","type":"any","entryType":"property"},{"name":"_copy","documentation":"","type":"any","entryType":"property"},{"name":"_shape","documentation":"","type":"any","entryType":"property"},{"name":"_shapeUV","documentation":"","type":"any","entryType":"property"},{"name":"_color","documentation":"","type":"any","entryType":"property"},{"name":"_computeParticleColor","documentation":"","type":"any","entryType":"property"},{"name":"_computeParticleTexture","documentation":"","type":"any","entryType":"property"},{"name":"_computeParticleRotation","documentation":"","type":"any","entryType":"property"},{"name":"_computeParticleVertex","documentation":"","type":"any","entryType":"property"},{"name":"_computeBoundingBox","documentation":"","type":"any","entryType":"property"},{"name":"_cam_axisZ","documentation":"","type":"any","entryType":"property"},{"name":"_cam_axisY","documentation":"","type":"any","entryType":"property"},{"name":"_cam_axisX","documentation":"","type":"any","entryType":"property"},{"name":"_axisX","documentation":"","type":"any","entryType":"property"},{"name":"_axisY","documentation":"","type":"any","entryType":"property"},{"name":"_axisZ","documentation":"","type":"any","entryType":"property"},{"name":"_camera","documentation":"","type":"any","entryType":"property"},{"name":"_particle","documentation":"","type":"any","entryType":"property"},{"name":"_camDir","documentation":"","type":"any","entryType":"property"},{"name":"_rotMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_invertMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_rotated","documentation":"","type":"any","entryType":"property"},{"name":"_quaternion","documentation":"","type":"any","entryType":"property"},{"name":"_vertex","documentation":"","type":"any","entryType":"property"},{"name":"_normal","documentation":"","type":"any","entryType":"property"},{"name":"_yaw","documentation":"","type":"any","entryType":"property"},{"name":"_pitch","documentation":"","type":"any","entryType":"property"},{"name":"_roll","documentation":"","type":"any","entryType":"property"},{"name":"_halfroll","documentation":"","type":"any","entryType":"property"},{"name":"_halfpitch","documentation":"","type":"any","entryType":"property"},{"name":"_halfyaw","documentation":"","type":"any","entryType":"property"},{"name":"_sinRoll","documentation":"","type":"any","entryType":"property"},{"name":"_cosRoll","documentation":"","type":"any","entryType":"property"},{"name":"_sinPitch","documentation":"","type":"any","entryType":"property"},{"name":"_cosPitch","documentation":"","type":"any","entryType":"property"},{"name":"_sinYaw","documentation":"","type":"any","entryType":"property"},{"name":"_cosYaw","documentation":"","type":"any","entryType":"property"},{"name":"_w","documentation":"","type":"any","entryType":"property"},{"name":"_minimum","documentation":"","type":"any","entryType":"property"},{"name":"_maximum","documentation":"","type":"any","entryType":"property"},{"name":"isAlwaysVisible","documentation":"Sets the SPS as always visible or not\ndoc : http://doc.babylonjs.com/overviews/Solid_Particle_System#sps-visibility","type":"boolean","entryType":"property"},{"name":"isVisibilityBoxLocked","documentation":"Sets the SPS visibility box as locked or not. This enables/disables the underlying mesh bounding box updates.\ndoc : http://doc.babylonjs.com/overviews/Solid_Particle_System#sps-visibility","type":"boolean","entryType":"property"},{"name":"computeParticleRotation","documentation":"Tells to `setParticles()` to compute the particle rotations or not.\nDefault value : true. The SPS is faster when it's set to false.\nNote : the particle rotations aren't stored values, so setting `computeParticleRotation` to false will prevents the particle to rotate.","type":"boolean","entryType":"property"},{"name":"computeParticleColor","documentation":"Tells to `setParticles()` to compute the particle colors or not.\nDefault value : true. The SPS is faster when it's set to false.\nNote : the particle colors are stored values, so setting `computeParticleColor` to false will keep yet the last colors set.","type":"boolean","entryType":"property"},{"name":"computeParticleTexture","documentation":"Tells to `setParticles()` to compute the particle textures or not.\nDefault value : true. The SPS is faster when it's set to false.\nNote : the particle textures are stored values, so setting `computeParticleTexture` to false will keep yet the last colors set.","type":"boolean","entryType":"property"},{"name":"computeParticleVertex","documentation":"Tells to `setParticles()` to call the vertex function for each vertex of each particle, or not.\nDefault value : false. The SPS is faster when it's set to false.\nNote : the particle custom vertex positions aren't stored values.","type":"boolean","entryType":"property"},{"name":"computeBoundingBox","documentation":"Tells to `setParticles()` to compute or not the mesh bounding box when computing the particle positions.","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.IDisposable"]},{"name":"PhysicsEngine","documentation":"","type":"typeof PhysicsEngine","constructors":[{"parameters":[{"name":"gravity","documentation":"","type":"Vector3"},{"name":"_physicsPlugin","documentation":"","type":"IPhysicsEnginePlugin"}],"returnType":"PhysicsEngine","documentation":""}],"entryType":"class","functions":[{"name":"setGravity","documentation":"","type":"(gravity: Vector3) => void","functionBody":[{"parameters":[{"name":"gravity","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setTimeStep","documentation":"Set the time step of the physics engine.\ndefault is 1/60.\nTo slow it down, enter 1/600 for example.\nTo speed it up, 1/30","type":"(newTimeStep?: number) => void","functionBody":[{"parameters":[{"name":"newTimeStep","documentation":"the new timestep to apply to this world.","type":"number"}],"returnType":"void","documentation":"Set the time step of the physics engine.\ndefault is 1/60.\nTo slow it down, enter 1/600 for example.\nTo speed it up, 1/30"}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getPhysicsPluginName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"addImpostor","documentation":"Adding a new impostor for the impostor tracking.\nThis will be done by the impostor itself.","type":"(impostor: PhysicsImpostor) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"the impostor to add","type":"PhysicsImpostor"}],"returnType":"void","documentation":"Adding a new impostor for the impostor tracking.\nThis will be done by the impostor itself."}],"entryType":"function"},{"name":"removeImpostor","documentation":"Remove an impostor from the engine.\nThis impostor and its mesh will not longer be updated by the physics engine.","type":"(impostor: PhysicsImpostor) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"the impostor to remove","type":"PhysicsImpostor"}],"returnType":"void","documentation":"Remove an impostor from the engine.\nThis impostor and its mesh will not longer be updated by the physics engine."}],"entryType":"function"},{"name":"addJoint","documentation":"Add a joint to the physics engine","type":"(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint) => void","functionBody":[{"parameters":[{"name":"mainImpostor","documentation":"the main impostor to which the joint is added.","type":"PhysicsImpostor"},{"name":"connectedImpostor","documentation":"the impostor that is connected to the main impostor using this joint","type":"PhysicsImpostor"},{"name":"joint","documentation":"","type":"PhysicsJoint"}],"returnType":"void","documentation":"Add a joint to the physics engine"}],"entryType":"function"},{"name":"removeJoint","documentation":"","type":"(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint) => void","functionBody":[{"parameters":[{"name":"mainImpostor","documentation":"","type":"PhysicsImpostor"},{"name":"connectedImpostor","documentation":"","type":"PhysicsImpostor"},{"name":"joint","documentation":"","type":"PhysicsJoint"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_step","documentation":"Called by the scene. no need to call it.","type":"(delta: number) => void","functionBody":[{"parameters":[{"name":"delta","documentation":"","type":"number"}],"returnType":"void","documentation":"Called by the scene. no need to call it."}],"entryType":"function"},{"name":"getPhysicsPlugin","documentation":"","type":"() => IPhysicsEnginePlugin","functionBody":[{"parameters":[],"returnType":"IPhysicsEnginePlugin","documentation":""}],"entryType":"function"},{"name":"getImpostorForPhysicsObject","documentation":"","type":"(object: IPhysicsEnabledObject) => PhysicsImpostor","functionBody":[{"parameters":[{"name":"object","documentation":"","type":"IPhysicsEnabledObject"}],"returnType":"PhysicsImpostor","documentation":""}],"entryType":"function"},{"name":"getImpostorWithPhysicsBody","documentation":"","type":"(body: any) => PhysicsImpostor","functionBody":[{"parameters":[{"name":"body","documentation":"","type":"any"}],"returnType":"PhysicsImpostor","documentation":""}],"entryType":"function"}],"properties":[{"name":"_physicsPlugin","documentation":"","type":"any","entryType":"property"},{"name":"gravity","documentation":"","type":"Vector3","entryType":"property"},{"name":"NoImpostor","documentation":"@Deprecated","type":"number","entryType":"property"},{"name":"SphereImpostor","documentation":"","type":"number","entryType":"property"},{"name":"BoxImpostor","documentation":"","type":"number","entryType":"property"},{"name":"PlaneImpostor","documentation":"","type":"number","entryType":"property"},{"name":"MeshImpostor","documentation":"","type":"number","entryType":"property"},{"name":"CylinderImpostor","documentation":"","type":"number","entryType":"property"},{"name":"HeightmapImpostor","documentation":"","type":"number","entryType":"property"},{"name":"CapsuleImpostor","documentation":"","type":"number","entryType":"property"},{"name":"ConeImpostor","documentation":"","type":"number","entryType":"property"},{"name":"ConvexHullImpostor","documentation":"","type":"number","entryType":"property"},{"name":"Epsilon","documentation":"","type":"number","entryType":"property"},{"name":"_impostors","documentation":"","type":"any","entryType":"property"},{"name":"_joints","documentation":"","type":"any","entryType":"property"}]},{"name":"PhysicsImpostor","documentation":"","type":"typeof PhysicsImpostor","constructors":[{"parameters":[{"name":"object","documentation":"","type":"IPhysicsEnabledObject"},{"name":"type","documentation":"","type":"number"},{"name":"_options","documentation":"","type":"PhysicsImpostorParameters"},{"name":"_scene","documentation":"","type":"Scene"}],"returnType":"PhysicsImpostor","documentation":""}],"entryType":"class","functions":[{"name":"_init","documentation":"This function will completly initialize this impostor.\nIt will create a new body - but only if this mesh has no parent.\nIf it has, this impostor will not be used other than to define the impostor\nof the child mesh.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"This function will completly initialize this impostor.\nIt will create a new body - but only if this mesh has no parent.\nIf it has, this impostor will not be used other than to define the impostor\nof the child mesh."}],"entryType":"function"},{"name":"_getPhysicsParent","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"isBodyInitRequired","documentation":"Should a new body be generated.","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"Should a new body be generated."}],"entryType":"function"},{"name":"setScalingUpdated","documentation":"","type":"(updated: boolean) => void","functionBody":[{"parameters":[{"name":"updated","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"forceUpdate","documentation":"Force a regeneration of this or the parent's impostor's body.\nUse under cautious - This will remove all joints already implemented.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Force a regeneration of this or the parent's impostor's body.\nUse under cautious - This will remove all joints already implemented."}],"entryType":"function"},{"name":"resetUpdateFlags","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getObjectExtendSize","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"getObjectCenter","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"getParam","documentation":"Get a specific parametes from the options parameter.","type":"(paramName: string) => any","functionBody":[{"parameters":[{"name":"paramName","documentation":"","type":"string"}],"returnType":"any","documentation":"Get a specific parametes from the options parameter."}],"entryType":"function"},{"name":"setParam","documentation":"Sets a specific parameter in the options given to the physics plugin","type":"(paramName: string, value: number) => void","functionBody":[{"parameters":[{"name":"paramName","documentation":"","type":"string"},{"name":"value","documentation":"","type":"number"}],"returnType":"void","documentation":"Sets a specific parameter in the options given to the physics plugin"}],"entryType":"function"},{"name":"setMass","documentation":"Specifically change the body's mass option. Won't recreate the physics body object","type":"(mass: number) => void","functionBody":[{"parameters":[{"name":"mass","documentation":"","type":"number"}],"returnType":"void","documentation":"Specifically change the body's mass option. Won't recreate the physics body object"}],"entryType":"function"},{"name":"getLinearVelocity","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"setLinearVelocity","documentation":"Set the body's linear velocity.","type":"(velocity: Vector3) => void","functionBody":[{"parameters":[{"name":"velocity","documentation":"","type":"Vector3"}],"returnType":"void","documentation":"Set the body's linear velocity."}],"entryType":"function"},{"name":"getAngularVelocity","documentation":"","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"setAngularVelocity","documentation":"Set the body's linear velocity.","type":"(velocity: Vector3) => void","functionBody":[{"parameters":[{"name":"velocity","documentation":"","type":"Vector3"}],"returnType":"void","documentation":"Set the body's linear velocity."}],"entryType":"function"},{"name":"executeNativeFunction","documentation":"Execute a function with the physics plugin native code.\nProvide a function the will have two variables - the world object and the physics body object.","type":"(func: (world: any, physicsBody: any) => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"(world: any, physicsBody: any) => void"}],"returnType":"void","documentation":"Execute a function with the physics plugin native code.\nProvide a function the will have two variables - the world object and the physics body object."}],"entryType":"function"},{"name":"registerBeforePhysicsStep","documentation":"Register a function that will be executed before the physics world is stepping forward.","type":"(func: (impostor: PhysicsImpostor) => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"(impostor: PhysicsImpostor) => void"}],"returnType":"void","documentation":"Register a function that will be executed before the physics world is stepping forward."}],"entryType":"function"},{"name":"unregisterBeforePhysicsStep","documentation":"","type":"(func: (impostor: PhysicsImpostor) => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"(impostor: PhysicsImpostor) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"registerAfterPhysicsStep","documentation":"Register a function that will be executed after the physics step","type":"(func: (impostor: PhysicsImpostor) => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"(impostor: PhysicsImpostor) => void"}],"returnType":"void","documentation":"Register a function that will be executed after the physics step"}],"entryType":"function"},{"name":"unregisterAfterPhysicsStep","documentation":"","type":"(func: (impostor: PhysicsImpostor) => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"","type":"(impostor: PhysicsImpostor) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"registerOnPhysicsCollide","documentation":"register a function that will be executed when this impostor collides against a different body.","type":"(collideAgainst: PhysicsImpostor | PhysicsImpostor[], func: (collider: PhysicsImpostor, collidedA...","functionBody":[{"parameters":[{"name":"collideAgainst","documentation":"","type":"PhysicsImpostor | PhysicsImpostor[]"},{"name":"func","documentation":"","type":"(collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor) => void"}],"returnType":"void","documentation":"register a function that will be executed when this impostor collides against a different body."}],"entryType":"function"},{"name":"unregisterOnPhysicsCollide","documentation":"","type":"(collideAgainst: PhysicsImpostor | PhysicsImpostor[], func: (collider: PhysicsImpostor, collidedA...","functionBody":[{"parameters":[{"name":"collideAgainst","documentation":"","type":"PhysicsImpostor | PhysicsImpostor[]"},{"name":"func","documentation":"","type":"(collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor | PhysicsImpostor[]) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"applyForce","documentation":"Apply a force","type":"(force: Vector3, contactPoint: Vector3) => void","functionBody":[{"parameters":[{"name":"force","documentation":"","type":"Vector3"},{"name":"contactPoint","documentation":"","type":"Vector3"}],"returnType":"void","documentation":"Apply a force"}],"entryType":"function"},{"name":"applyImpulse","documentation":"Apply an impulse","type":"(force: Vector3, contactPoint: Vector3) => void","functionBody":[{"parameters":[{"name":"force","documentation":"","type":"Vector3"},{"name":"contactPoint","documentation":"","type":"Vector3"}],"returnType":"void","documentation":"Apply an impulse"}],"entryType":"function"},{"name":"createJoint","documentation":"A help function to create a joint.","type":"(otherImpostor: PhysicsImpostor, jointType: number, jointData: PhysicsJointData) => void","functionBody":[{"parameters":[{"name":"otherImpostor","documentation":"","type":"PhysicsImpostor"},{"name":"jointType","documentation":"","type":"number"},{"name":"jointData","documentation":"","type":"PhysicsJointData"}],"returnType":"void","documentation":"A help function to create a joint."}],"entryType":"function"},{"name":"addJoint","documentation":"Add a joint to this impostor with a different impostor.","type":"(otherImpostor: PhysicsImpostor, joint: PhysicsJoint) => void","functionBody":[{"parameters":[{"name":"otherImpostor","documentation":"","type":"PhysicsImpostor"},{"name":"joint","documentation":"","type":"PhysicsJoint"}],"returnType":"void","documentation":"Add a joint to this impostor with a different impostor."}],"entryType":"function"},{"name":"sleep","documentation":"Will keep this body still, in a sleep mode.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Will keep this body still, in a sleep mode."}],"entryType":"function"},{"name":"wakeUp","documentation":"Wake the body up.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Wake the body up."}],"entryType":"function"},{"name":"clone","documentation":"","type":"(newObject: IPhysicsEnabledObject) => PhysicsImpostor","functionBody":[{"parameters":[{"name":"newObject","documentation":"","type":"IPhysicsEnabledObject"}],"returnType":"PhysicsImpostor","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setDeltaPosition","documentation":"","type":"(position: Vector3) => void","functionBody":[{"parameters":[{"name":"position","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setDeltaRotation","documentation":"","type":"(rotation: Quaternion) => void","functionBody":[{"parameters":[{"name":"rotation","documentation":"","type":"Quaternion"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"object","documentation":"","type":"IPhysicsEnabledObject","entryType":"property"},{"name":"type","documentation":"","type":"number","entryType":"property"},{"name":"_options","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"DEFAULT_OBJECT_SIZE","documentation":"","type":"Vector3","entryType":"property"},{"name":"_physicsEngine","documentation":"","type":"any","entryType":"property"},{"name":"_physicsBody","documentation":"","type":"any","entryType":"property"},{"name":"_bodyUpdateRequired","documentation":"","type":"any","entryType":"property"},{"name":"_onBeforePhysicsStepCallbacks","documentation":"","type":"any","entryType":"property"},{"name":"_onAfterPhysicsStepCallbacks","documentation":"","type":"any","entryType":"property"},{"name":"_onPhysicsCollideCallbacks","documentation":"","type":"any","entryType":"property"},{"name":"_deltaPosition","documentation":"","type":"any","entryType":"property"},{"name":"_deltaRotation","documentation":"","type":"any","entryType":"property"},{"name":"_deltaRotationConjugated","documentation":"","type":"any","entryType":"property"},{"name":"_parent","documentation":"","type":"any","entryType":"property"},{"name":"uniqueId","documentation":"","type":"number","entryType":"property"},{"name":"_joints","documentation":"","type":"any","entryType":"property"},{"name":"physicsBody","documentation":"Gets the body that holds this impostor. Either its own, or its parent.\nSet the physics body. Used mainly by the physics engine/plugin","type":"any","entryType":"property"},{"name":"parent","documentation":"","type":"PhysicsImpostor","entryType":"property"},{"name":"_tmpPositionWithDelta","documentation":"","type":"any","entryType":"property"},{"name":"_tmpRotationWithDelta","documentation":"","type":"any","entryType":"property"},{"name":"beforeStep","documentation":"this function is executed by the physics engine.","type":"() => void","entryType":"property"},{"name":"afterStep","documentation":"this function is executed by the physics engine.","type":"() => void","entryType":"property"},{"name":"onCollide","documentation":"","type":"(e: { body: any; }) => void","entryType":"property"},{"name":"NoImpostor","documentation":"","type":"number","entryType":"property"},{"name":"SphereImpostor","documentation":"","type":"number","entryType":"property"},{"name":"BoxImpostor","documentation":"","type":"number","entryType":"property"},{"name":"PlaneImpostor","documentation":"","type":"number","entryType":"property"},{"name":"MeshImpostor","documentation":"","type":"number","entryType":"property"},{"name":"CylinderImpostor","documentation":"","type":"number","entryType":"property"},{"name":"ParticleImpostor","documentation":"","type":"number","entryType":"property"},{"name":"HeightmapImpostor","documentation":"","type":"number","entryType":"property"}]},{"name":"PhysicsJoint","documentation":"This is a holder class for the physics joint created by the physics plugin.\nIt holds a set of functions to control the underlying joint.","type":"typeof PhysicsJoint","constructors":[{"parameters":[{"name":"type","documentation":"","type":"number"},{"name":"jointData","documentation":"","type":"PhysicsJointData"}],"returnType":"PhysicsJoint","documentation":""}],"entryType":"class","functions":[{"name":"executeNativeFunction","documentation":"Execute a function that is physics-plugin specific.","type":"(func: (world: any, physicsJoint: any) => void) => void","functionBody":[{"parameters":[{"name":"func","documentation":"the function that will be executed.\nIt accepts two parameters: the physics world and the physics joint.","type":"(world: any, physicsJoint: any) => void"}],"returnType":"void","documentation":"Execute a function that is physics-plugin specific."}],"entryType":"function"}],"properties":[{"name":"type","documentation":"","type":"number","entryType":"property"},{"name":"jointData","documentation":"","type":"PhysicsJointData","entryType":"property"},{"name":"_physicsJoint","documentation":"","type":"any","entryType":"property"},{"name":"_physicsPlugin","documentation":"","type":"IPhysicsEnginePlugin","entryType":"property"},{"name":"physicsJoint","documentation":"","type":"any","entryType":"property"},{"name":"physicsPlugin","documentation":"","type":"IPhysicsEnginePlugin","entryType":"property"},{"name":"DistanceJoint","documentation":"","type":"number","entryType":"property"},{"name":"HingeJoint","documentation":"","type":"number","entryType":"property"},{"name":"BallAndSocketJoint","documentation":"","type":"number","entryType":"property"},{"name":"WheelJoint","documentation":"","type":"number","entryType":"property"},{"name":"SliderJoint","documentation":"","type":"number","entryType":"property"},{"name":"PrismaticJoint","documentation":"","type":"number","entryType":"property"},{"name":"UniversalJoint","documentation":"","type":"number","entryType":"property"},{"name":"Hinge2Joint","documentation":"","type":"number","entryType":"property"},{"name":"PointToPointJoint","documentation":"","type":"number","entryType":"property"},{"name":"SpringJoint","documentation":"","type":"number","entryType":"property"},{"name":"LockJoint","documentation":"","type":"number","entryType":"property"}]},{"name":"DistanceJoint","documentation":"A class representing a physics distance joint.","type":"typeof DistanceJoint","constructors":[{"parameters":[{"name":"jointData","documentation":"","type":"DistanceJointData"}],"returnType":"DistanceJoint","documentation":""}],"entryType":"class","functions":[{"name":"updateDistance","documentation":"Update the predefined distance.","type":"(maxDistance: number, minDistance?: number) => void","functionBody":[{"parameters":[{"name":"maxDistance","documentation":"","type":"number"},{"name":"minDistance","documentation":"","type":"number"}],"returnType":"void","documentation":"Update the predefined distance."}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.PhysicsJoint"]},{"name":"MotorEnabledJoint","documentation":"","type":"typeof MotorEnabledJoint","constructors":[{"parameters":[{"name":"type","documentation":"","type":"number"},{"name":"jointData","documentation":"","type":"PhysicsJointData"}],"returnType":"MotorEnabledJoint","documentation":""}],"entryType":"class","functions":[{"name":"setMotor","documentation":"Set the motor values.\nAttention, this function is plugin specific. Engines won't react 100% the same.","type":"(force?: number, maxForce?: number) => void","functionBody":[{"parameters":[{"name":"force","documentation":"the force to apply","type":"number"},{"name":"maxForce","documentation":"max force for this motor.","type":"number"}],"returnType":"void","documentation":"Set the motor values.\nAttention, this function is plugin specific. Engines won't react 100% the same."}],"entryType":"function"},{"name":"setLimit","documentation":"Set the motor's limits.\nAttention, this function is plugin specific. Engines won't react 100% the same.","type":"(upperLimit: number, lowerLimit?: number) => void","functionBody":[{"parameters":[{"name":"upperLimit","documentation":"","type":"number"},{"name":"lowerLimit","documentation":"","type":"number"}],"returnType":"void","documentation":"Set the motor's limits.\nAttention, this function is plugin specific. Engines won't react 100% the same."}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.PhysicsJoint","BABYLON.IMotorEnabledJoint"]},{"name":"HingeJoint","documentation":"This class represents a single hinge physics joint","type":"typeof HingeJoint","constructors":[{"parameters":[{"name":"jointData","documentation":"","type":"PhysicsJointData"}],"returnType":"HingeJoint","documentation":""}],"entryType":"class","functions":[{"name":"setMotor","documentation":"Set the motor values.\nAttention, this function is plugin specific. Engines won't react 100% the same.","type":"(force?: number, maxForce?: number) => void","functionBody":[{"parameters":[{"name":"force","documentation":"the force to apply","type":"number"},{"name":"maxForce","documentation":"max force for this motor.","type":"number"}],"returnType":"void","documentation":"Set the motor values.\nAttention, this function is plugin specific. Engines won't react 100% the same."}],"entryType":"function"},{"name":"setLimit","documentation":"Set the motor's limits.\nAttention, this function is plugin specific. Engines won't react 100% the same.","type":"(upperLimit: number, lowerLimit?: number) => void","functionBody":[{"parameters":[{"name":"upperLimit","documentation":"","type":"number"},{"name":"lowerLimit","documentation":"","type":"number"}],"returnType":"void","documentation":"Set the motor's limits.\nAttention, this function is plugin specific. Engines won't react 100% the same."}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.MotorEnabledJoint"]},{"name":"Hinge2Joint","documentation":"This class represents a dual hinge physics joint (same as wheel joint)","type":"typeof Hinge2Joint","constructors":[{"parameters":[{"name":"jointData","documentation":"","type":"PhysicsJointData"}],"returnType":"Hinge2Joint","documentation":""}],"entryType":"class","functions":[{"name":"setMotor","documentation":"Set the motor values.\nAttention, this function is plugin specific. Engines won't react 100% the same.","type":"(force?: number, maxForce?: number, motorIndex?: number) => void","functionBody":[{"parameters":[{"name":"force","documentation":"the force to apply","type":"number"},{"name":"maxForce","documentation":"max force for this motor.","type":"number"},{"name":"motorIndex","documentation":"","type":"number"}],"returnType":"void","documentation":"Set the motor values.\nAttention, this function is plugin specific. Engines won't react 100% the same."}],"entryType":"function"},{"name":"setLimit","documentation":"Set the motor limits.\nAttention, this function is plugin specific. Engines won't react 100% the same.","type":"(upperLimit: number, lowerLimit?: number, motorIndex?: number) => void","functionBody":[{"parameters":[{"name":"upperLimit","documentation":"the upper limit","type":"number"},{"name":"lowerLimit","documentation":"lower limit","type":"number"},{"name":"motorIndex","documentation":"","type":"number"}],"returnType":"void","documentation":"Set the motor limits.\nAttention, this function is plugin specific. Engines won't react 100% the same."}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.MotorEnabledJoint"]},{"name":"ReflectionProbe","documentation":"","type":"typeof ReflectionProbe","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"size","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"generateMipMaps","documentation":"","type":"boolean"}],"returnType":"ReflectionProbe","documentation":""}],"entryType":"class","functions":[{"name":"getScene","documentation":"","type":"() => Scene","functionBody":[{"parameters":[],"returnType":"Scene","documentation":""}],"entryType":"function"},{"name":"attachToMesh","documentation":"","type":"(mesh: AbstractMesh) => void","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"AbstractMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_renderTargetTexture","documentation":"","type":"any","entryType":"property"},{"name":"_projectionMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_viewMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_target","documentation":"","type":"any","entryType":"property"},{"name":"_add","documentation":"","type":"any","entryType":"property"},{"name":"_attachedMesh","documentation":"","type":"any","entryType":"property"},{"name":"invertYAxis","documentation":"","type":"boolean","entryType":"property"},{"name":"position","documentation":"","type":"Vector3","entryType":"property"},{"name":"refreshRate","documentation":"","type":"number","entryType":"property"},{"name":"cubeTexture","documentation":"","type":"RenderTargetTexture","entryType":"property"},{"name":"renderList","documentation":"","type":"AbstractMesh[]","entryType":"property"}]},{"name":"AnaglyphPostProcess","documentation":"","type":"typeof AnaglyphPostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"number | { width: number; height: number; }"},{"name":"rigCameras","documentation":"","type":"Camera[]"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"reusable","documentation":"","type":"boolean"}],"returnType":"AnaglyphPostProcess","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"_passedProcess","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.PostProcess"]},{"name":"BlackAndWhitePostProcess","documentation":"","type":"typeof BlackAndWhitePostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"number | { width: number; height: number; }"},{"name":"camera","documentation":"","type":"Camera"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"reusable","documentation":"","type":"boolean"}],"returnType":"BlackAndWhitePostProcess","documentation":""}],"entryType":"class","functions":[],"properties":[],"heritageClauses":["BABYLON.PostProcess"]},{"name":"BlurPostProcess","documentation":"","type":"typeof BlurPostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"direction","documentation":"","type":"Vector2"},{"name":"blurWidth","documentation":"","type":"number"},{"name":"options","documentation":"","type":"number | { width: number; height: number; }"},{"name":"camera","documentation":"","type":"Camera"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"reusable","documentation":"","type":"boolean"}],"returnType":"BlurPostProcess","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"direction","documentation":"","type":"Vector2","entryType":"property"},{"name":"blurWidth","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.PostProcess"]},{"name":"ColorCorrectionPostProcess","documentation":"","type":"typeof ColorCorrectionPostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"colorTableUrl","documentation":"","type":"string"},{"name":"options","documentation":"","type":"number | { width: number; height: number; }"},{"name":"camera","documentation":"","type":"Camera"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"reusable","documentation":"","type":"boolean"}],"returnType":"ColorCorrectionPostProcess","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"_colorTableTexture","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.PostProcess"]},{"name":"ConvolutionPostProcess","documentation":"","type":"typeof ConvolutionPostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"kernel","documentation":"","type":"number[]"},{"name":"options","documentation":"","type":"number | { width: number; height: number; }"},{"name":"camera","documentation":"","type":"Camera"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"reusable","documentation":"","type":"boolean"}],"returnType":"ConvolutionPostProcess","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"kernel","documentation":"","type":"number[]","entryType":"property"},{"name":"EdgeDetect0Kernel","documentation":"","type":"number[]","entryType":"property"},{"name":"EdgeDetect1Kernel","documentation":"","type":"number[]","entryType":"property"},{"name":"EdgeDetect2Kernel","documentation":"","type":"number[]","entryType":"property"},{"name":"SharpenKernel","documentation":"","type":"number[]","entryType":"property"},{"name":"EmbossKernel","documentation":"","type":"number[]","entryType":"property"},{"name":"GaussianKernel","documentation":"","type":"number[]","entryType":"property"}],"heritageClauses":["BABYLON.PostProcess"]},{"name":"DisplayPassPostProcess","documentation":"","type":"typeof DisplayPassPostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"number | { width: number; height: number; }"},{"name":"camera","documentation":"","type":"Camera"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"reusable","documentation":"","type":"boolean"}],"returnType":"DisplayPassPostProcess","documentation":""}],"entryType":"class","functions":[],"properties":[],"heritageClauses":["BABYLON.PostProcess"]},{"name":"FilterPostProcess","documentation":"","type":"typeof FilterPostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"kernelMatrix","documentation":"","type":"Matrix"},{"name":"options","documentation":"","type":"number | { width: number; height: number; }"},{"name":"camera","documentation":"","type":"Camera"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"reusable","documentation":"","type":"boolean"}],"returnType":"FilterPostProcess","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"kernelMatrix","documentation":"","type":"Matrix","entryType":"property"}],"heritageClauses":["BABYLON.PostProcess"]},{"name":"FxaaPostProcess","documentation":"","type":"typeof FxaaPostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"number | { width: number; height: number; }"},{"name":"camera","documentation":"","type":"Camera"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"reusable","documentation":"","type":"boolean"}],"returnType":"FxaaPostProcess","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"texelWidth","documentation":"","type":"number","entryType":"property"},{"name":"texelHeight","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.PostProcess"]},{"name":"HDRRenderingPipeline","documentation":"","type":"typeof HDRRenderingPipeline","constructors":[{"parameters":[{"name":"name","documentation":"- The rendering pipeline name","type":"string"},{"name":"scene","documentation":"- The scene linked to this pipeline","type":"Scene"},{"name":"ratio","documentation":"- The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)","type":"number | IHDRRenderingPipelineRatio"},{"name":"originalPostProcess","documentation":"- the custom original color post-process. Must be \"reusable\". Can be null.","type":"PostProcess"},{"name":"cameras","documentation":"- The array of cameras that the rendering pipeline will be attached to","type":"Camera[]"},{"name":"lensTexture","documentation":"","type":"Texture"}],"returnType":"HDRRenderingPipeline","documentation":"@constructor"}],"entryType":"class","functions":[{"name":"update","documentation":"Tells the pipeline to update its post-processes","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Tells the pipeline to update its post-processes"}],"entryType":"function"},{"name":"getCurrentLuminance","documentation":"Returns the current calculated luminance","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":"Returns the current calculated luminance"}],"entryType":"function"},{"name":"getOutputLuminance","documentation":"Returns the currently drawn luminance","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":"Returns the currently drawn luminance"}],"entryType":"function"},{"name":"dispose","documentation":"Releases the rendering pipeline and its internal effects. Detaches pipeline from cameras","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Releases the rendering pipeline and its internal effects. Detaches pipeline from cameras"}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(source: any, scene: Scene, rootUrl: string) => HDRRenderingPipeline","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"HDRRenderingPipeline","documentation":""}],"entryType":"function"},{"name":"_createHDRPostProcess","documentation":"Creates the HDR post-process and computes the luminance adaptation","type":"(scene: any, ratio: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":"Creates the HDR post-process and computes the luminance adaptation"}],"entryType":"function"},{"name":"_createTextureAdderPostProcess","documentation":"Texture Adder post-process","type":"(scene: any, ratio: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":"Texture Adder post-process"}],"entryType":"function"},{"name":"_createDownSampleX4PostProcess","documentation":"Down sample X4 post-process","type":"(scene: any, ratio: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":"Down sample X4 post-process"}],"entryType":"function"},{"name":"_createDownSampleX16PostProcess","documentation":"Down sample X16 post-process (anamorphic lens-flare)","type":"(scene: any, ratio: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":"Down sample X16 post-process (anamorphic lens-flare)"}],"entryType":"function"},{"name":"_createBrightPassPostProcess","documentation":"Bright pass post-process","type":"(scene: any, ratio: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":"Bright pass post-process"}],"entryType":"function"},{"name":"_createLuminanceGeneratorPostProcess","documentation":"Luminance generator. Creates the luminance post-process and down sample post-processes","type":"(scene: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"}],"returnType":"any","documentation":"Luminance generator. Creates the luminance post-process and down sample post-processes"}],"entryType":"function"},{"name":"_createGaussianBlurPostProcess","documentation":"Gaussian blur post-processes. Horizontal and Vertical","type":"(scene: any, ratio: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":"Gaussian blur post-processes. Horizontal and Vertical"}],"entryType":"function"}],"properties":[{"name":"gaussCoeff","documentation":"Public members\nGaussian blur coefficient\n@type {number}","type":"number","entryType":"property"},{"name":"gaussMean","documentation":"Gaussian blur mean\n@type {number}","type":"number","entryType":"property"},{"name":"gaussStandDev","documentation":"Gaussian blur standard deviation\n@type {number}","type":"number","entryType":"property"},{"name":"gaussMultiplier","documentation":"Gaussian blur multiplier. Multiplies the blur effect\n@type {number}","type":"number","entryType":"property"},{"name":"exposure","documentation":"Exposure, controls the overall intensity of the pipeline\n@type {number}","type":"number","entryType":"property"},{"name":"exposureAdjustment","documentation":"Exposure adjustment, related to the tonemap post-process\n@type {number}\nExposure adjustment, related to the tonemap post-process\n@type {number}","type":"number","entryType":"property"},{"name":"minimumLuminance","documentation":"Minimum luminance that the post-process can output. Luminance is >= 0\n@type {number}","type":"number","entryType":"property"},{"name":"maximumLuminance","documentation":"Maximum luminance that the post-process can output. Must be suprerior to minimumLuminance\n@type {number}","type":"number","entryType":"property"},{"name":"luminanceIncreaserate","documentation":"Increase rate for luminance: eye adaptation speed to dark\n@type {number}","type":"number","entryType":"property"},{"name":"luminanceDecreaseRate","documentation":"Decrease rate for luminance: eye adaptation speed to bright\n@type {number}","type":"number","entryType":"property"},{"name":"brightThreshold","documentation":"Minimum luminance needed to compute HDR\n@type {number}","type":"number","entryType":"property"},{"name":"lensDirtPower","documentation":"Power of the lens dirt effect\n@type {number}","type":"number","entryType":"property"},{"name":"enableAnamorphicLensFlare","documentation":"Returns if the pipeline should compute the anamorphic\nlens flares\n@return {boolean}\nSets if the pipeline should compute the anamorphic\nlens flares\n@type {boolean}","type":"boolean","entryType":"property"},{"name":"_guassianBlurHPostProcess","documentation":"Private members","type":"any","entryType":"property"},{"name":"_guassianBlurVPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_brightPassPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_toneMappingPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_textureAdderPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_downSampleX4PostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_downSampleX16PostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_originalPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_hdrPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_hdrCurrentLuminance","documentation":"","type":"any","entryType":"property"},{"name":"_hdrOutputLuminance","documentation":"","type":"any","entryType":"property"},{"name":"_lensTexture","documentation":"","type":"any","entryType":"property"},{"name":"LUM_STEPS","documentation":"","type":"number","entryType":"property"},{"name":"_downSamplePostProcesses","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_needUpdate","documentation":"","type":"any","entryType":"property"},{"name":"_ratio","documentation":"","type":"any","entryType":"property"},{"name":"_enableAnamorphicLensFlare","documentation":"","type":"any","entryType":"property"},{"name":"lensTexture","documentation":"Returns the lens texture\nSets the lens texture","type":"Texture","entryType":"property"}],"heritageClauses":["BABYLON.PostProcessRenderPipeline","BABYLON.IDisposable"]},{"name":"LensRenderingPipeline","documentation":"","type":"typeof LensRenderingPipeline","constructors":[{"parameters":[{"name":"name","documentation":"- The rendering pipeline name","type":"string"},{"name":"parameters","documentation":"- An object containing all parameters (see above)","type":"any"},{"name":"scene","documentation":"- The scene linked to this pipeline","type":"Scene"},{"name":"ratio","documentation":"- The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)","type":"number"},{"name":"cameras","documentation":"- The array of cameras that the rendering pipeline will be attached to","type":"Camera[]"}],"returnType":"LensRenderingPipeline","documentation":"@constructor\n\nEffect parameters are as follow:\n{\n     chromatic_aberration: number;       // from 0 to x (1 for realism)\n     edge_blur: number;                  // from 0 to x (1 for realism)\n     distortion: number;                 // from 0 to x (1 for realism)\n     grain_amount: number;               // from 0 to 1\n     grain_texture: BABYLON.Texture;     // texture to use for grain effect; if unset, use random B&W noise\n     dof_focus_distance: number;         // depth-of-field: focus distance; unset to disable (disabled by default)\n     dof_aperture: number;               // depth-of-field: focus blur bias (default: 1)\n     dof_darken: number;                 // depth-of-field: darken that which is out of focus (from 0 to 1, disabled by default)\n     dof_pentagon: boolean;              // depth-of-field: makes a pentagon-like \"bokeh\" effect\n     dof_gain: number;                   // depth-of-field: highlights gain; unset to disable (disabled by default)\n     dof_threshold: number;              // depth-of-field: highlights threshold (default: 1)\n     blur_noise: boolean;                // add a little bit of noise to the blur (default: true)\n}\nNote: if an effect parameter is unset, effect is disabled"}],"entryType":"class","functions":[{"name":"setEdgeBlur","documentation":"","type":"(amount: number) => void","functionBody":[{"parameters":[{"name":"amount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"disableEdgeBlur","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setGrainAmount","documentation":"","type":"(amount: number) => void","functionBody":[{"parameters":[{"name":"amount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"disableGrain","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setChromaticAberration","documentation":"","type":"(amount: number) => void","functionBody":[{"parameters":[{"name":"amount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"disableChromaticAberration","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setEdgeDistortion","documentation":"","type":"(amount: number) => void","functionBody":[{"parameters":[{"name":"amount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"disableEdgeDistortion","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setFocusDistance","documentation":"","type":"(amount: number) => void","functionBody":[{"parameters":[{"name":"amount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"disableDepthOfField","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setAperture","documentation":"","type":"(amount: number) => void","functionBody":[{"parameters":[{"name":"amount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setDarkenOutOfFocus","documentation":"","type":"(amount: number) => void","functionBody":[{"parameters":[{"name":"amount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"enablePentagonBokeh","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"disablePentagonBokeh","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"enableNoiseBlur","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"disableNoiseBlur","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setHighlightsGain","documentation":"","type":"(amount: number) => void","functionBody":[{"parameters":[{"name":"amount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setHighlightsThreshold","documentation":"","type":"(amount: number) => void","functionBody":[{"parameters":[{"name":"amount","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"disableHighlights","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"Removes the internal pipeline assets and detaches the pipeline from the scene cameras","type":"(disableDepthRender?: boolean) => void","functionBody":[{"parameters":[{"name":"disableDepthRender","documentation":"","type":"boolean"}],"returnType":"void","documentation":"Removes the internal pipeline assets and detaches the pipeline from the scene cameras"}],"entryType":"function"},{"name":"_createChromaticAberrationPostProcess","documentation":"","type":"(ratio: any) => any","functionBody":[{"parameters":[{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createHighlightsPostProcess","documentation":"","type":"(ratio: any) => any","functionBody":[{"parameters":[{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createDepthOfFieldPostProcess","documentation":"","type":"(ratio: any) => any","functionBody":[{"parameters":[{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createGrainTexture","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"LensChromaticAberrationEffect","documentation":"The chromatic aberration PostProcess id in the pipeline\n@type {string}","type":"string","entryType":"property"},{"name":"HighlightsEnhancingEffect","documentation":"The highlights enhancing PostProcess id in the pipeline\n@type {string}","type":"string","entryType":"property"},{"name":"LensDepthOfFieldEffect","documentation":"The depth-of-field PostProcess id in the pipeline\n@type {string}","type":"string","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_depthTexture","documentation":"","type":"any","entryType":"property"},{"name":"_grainTexture","documentation":"","type":"any","entryType":"property"},{"name":"_chromaticAberrationPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_highlightsPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_depthOfFieldPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_edgeBlur","documentation":"","type":"any","entryType":"property"},{"name":"_grainAmount","documentation":"","type":"any","entryType":"property"},{"name":"_chromaticAberration","documentation":"","type":"any","entryType":"property"},{"name":"_distortion","documentation":"","type":"any","entryType":"property"},{"name":"_highlightsGain","documentation":"","type":"any","entryType":"property"},{"name":"_highlightsThreshold","documentation":"","type":"any","entryType":"property"},{"name":"_dofDistance","documentation":"","type":"any","entryType":"property"},{"name":"_dofAperture","documentation":"","type":"any","entryType":"property"},{"name":"_dofDarken","documentation":"","type":"any","entryType":"property"},{"name":"_dofPentagon","documentation":"","type":"any","entryType":"property"},{"name":"_blurNoise","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.PostProcessRenderPipeline"]},{"name":"PassPostProcess","documentation":"","type":"typeof PassPostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"number | { width: number; height: number; }"},{"name":"camera","documentation":"","type":"Camera"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"reusable","documentation":"","type":"boolean"}],"returnType":"PassPostProcess","documentation":""}],"entryType":"class","functions":[],"properties":[],"heritageClauses":["BABYLON.PostProcess"]},{"name":"PostProcess","documentation":"","type":"typeof PostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"fragmentUrl","documentation":"","type":"string"},{"name":"parameters","documentation":"","type":"string[]"},{"name":"samplers","documentation":"","type":"string[]"},{"name":"options","documentation":"","type":"number | { width: number; height: number; }"},{"name":"camera","documentation":"","type":"Camera"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"reusable","documentation":"","type":"boolean"},{"name":"defines","documentation":"","type":"string"},{"name":"textureType","documentation":"","type":"number"}],"returnType":"PostProcess","documentation":""}],"entryType":"class","functions":[{"name":"updateEffect","documentation":"","type":"(defines?: string) => void","functionBody":[{"parameters":[{"name":"defines","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isReusable","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"markTextureDirty","documentation":"invalidate frameBuffer to hint the postprocess to create a depth buffer ","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"invalidate frameBuffer to hint the postprocess to create a depth buffer "}],"entryType":"function"},{"name":"activate","documentation":"","type":"(camera: Camera, sourceTexture?: WebGLTexture) => void","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"Camera"},{"name":"sourceTexture","documentation":"","type":"WebGLTexture"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"apply","documentation":"","type":"() => Effect","functionBody":[{"parameters":[],"returnType":"Effect","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"(camera?: Camera) => void","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"Camera"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"width","documentation":"","type":"number","entryType":"property"},{"name":"height","documentation":"","type":"number","entryType":"property"},{"name":"renderTargetSamplingMode","documentation":"","type":"number","entryType":"property"},{"name":"clearColor","documentation":"","type":"Color4","entryType":"property"},{"name":"enablePixelPerfectMode","documentation":"","type":"boolean","entryType":"property"},{"name":"_camera","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_engine","documentation":"","type":"any","entryType":"property"},{"name":"_options","documentation":"","type":"any","entryType":"property"},{"name":"_reusable","documentation":"","type":"any","entryType":"property"},{"name":"_textureType","documentation":"","type":"any","entryType":"property"},{"name":"_textures","documentation":"","type":"SmartArray<WebGLTexture>","entryType":"property"},{"name":"_currentRenderTextureInd","documentation":"","type":"number","entryType":"property"},{"name":"_effect","documentation":"","type":"any","entryType":"property"},{"name":"_samplers","documentation":"","type":"any","entryType":"property"},{"name":"_fragmentUrl","documentation":"","type":"any","entryType":"property"},{"name":"_parameters","documentation":"","type":"any","entryType":"property"},{"name":"_scaleRatio","documentation":"","type":"any","entryType":"property"},{"name":"onActivateObservable","documentation":"An event triggered when the postprocess is activated.\n@type {BABYLON.Observable}","type":"Observable<Camera>","entryType":"property"},{"name":"_onActivateObserver","documentation":"","type":"any","entryType":"property"},{"name":"onActivate","documentation":"","type":"(camera: Camera) => void","entryType":"property"},{"name":"onSizeChangedObservable","documentation":"An event triggered when the postprocess changes its size.\n@type {BABYLON.Observable}","type":"Observable<PostProcess>","entryType":"property"},{"name":"_onSizeChangedObserver","documentation":"","type":"any","entryType":"property"},{"name":"onSizeChanged","documentation":"","type":"(postProcess: PostProcess) => void","entryType":"property"},{"name":"onApplyObservable","documentation":"An event triggered when the postprocess applies its effect.\n@type {BABYLON.Observable}","type":"Observable<Effect>","entryType":"property"},{"name":"_onApplyObserver","documentation":"","type":"any","entryType":"property"},{"name":"onApply","documentation":"","type":"(effect: Effect) => void","entryType":"property"},{"name":"onBeforeRenderObservable","documentation":"An event triggered before rendering the postprocess\n@type {BABYLON.Observable}","type":"Observable<Effect>","entryType":"property"},{"name":"_onBeforeRenderObserver","documentation":"","type":"any","entryType":"property"},{"name":"onBeforeRender","documentation":"","type":"(effect: Effect) => void","entryType":"property"},{"name":"onAfterRenderObservable","documentation":"An event triggered after rendering the postprocess\n@type {BABYLON.Observable}","type":"Observable<Effect>","entryType":"property"},{"name":"_onAfterRenderObserver","documentation":"","type":"any","entryType":"property"},{"name":"onAfterRender","documentation":"","type":"(efect: Effect) => void","entryType":"property"},{"name":"isSupported","documentation":"","type":"boolean","entryType":"property"}]},{"name":"PostProcessManager","documentation":"","type":"typeof PostProcessManager","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"}],"returnType":"PostProcessManager","documentation":""}],"entryType":"class","functions":[{"name":"_prepareBuffers","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_prepareFrame","documentation":"","type":"(sourceTexture?: WebGLTexture) => boolean","functionBody":[{"parameters":[{"name":"sourceTexture","documentation":"","type":"WebGLTexture"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"directRender","documentation":"","type":"(postProcesses: PostProcess[], targetTexture?: WebGLTexture) => void","functionBody":[{"parameters":[{"name":"postProcesses","documentation":"","type":"PostProcess[]"},{"name":"targetTexture","documentation":"","type":"WebGLTexture"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_finalizeFrame","documentation":"","type":"(doNotPresent?: boolean, targetTexture?: WebGLTexture, faceIndex?: number, postProcesses?: PostPr...","functionBody":[{"parameters":[{"name":"doNotPresent","documentation":"","type":"boolean"},{"name":"targetTexture","documentation":"","type":"WebGLTexture"},{"name":"faceIndex","documentation":"","type":"number"},{"name":"postProcesses","documentation":"","type":"PostProcess[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_indexBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_vertexBuffers","documentation":"","type":"any","entryType":"property"}]},{"name":"RefractionPostProcess","documentation":"","type":"typeof RefractionPostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"refractionTextureUrl","documentation":"","type":"string"},{"name":"color","documentation":"","type":"Color3"},{"name":"depth","documentation":"","type":"number"},{"name":"colorLevel","documentation":"","type":"number"},{"name":"options","documentation":"","type":"number | { width: number; height: number; }"},{"name":"camera","documentation":"","type":"Camera"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"reusable","documentation":"","type":"boolean"}],"returnType":"RefractionPostProcess","documentation":""}],"entryType":"class","functions":[{"name":"dispose","documentation":"","type":"(camera: Camera) => void","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"Camera"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"color","documentation":"","type":"Color3","entryType":"property"},{"name":"depth","documentation":"","type":"number","entryType":"property"},{"name":"colorLevel","documentation":"","type":"number","entryType":"property"},{"name":"_refRexture","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.PostProcess"]},{"name":"SSAORenderingPipeline","documentation":"","type":"typeof SSAORenderingPipeline","constructors":[{"parameters":[{"name":"name","documentation":"- The rendering pipeline name","type":"string"},{"name":"scene","documentation":"- The scene linked to this pipeline","type":"Scene"},{"name":"ratio","documentation":"- The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, combineRatio: 1.0 }","type":"any"},{"name":"cameras","documentation":"- The array of cameras that the rendering pipeline will be attached to","type":"Camera[]"}],"returnType":"SSAORenderingPipeline","documentation":"@constructor"}],"entryType":"class","functions":[{"name":"getBlurHPostProcess","documentation":"Returns the horizontal blur PostProcess\n@return {BABYLON.BlurPostProcess} The horizontal blur post-process","type":"() => BlurPostProcess","functionBody":[{"parameters":[],"returnType":"BlurPostProcess","documentation":"Returns the horizontal blur PostProcess\n@return {BABYLON.BlurPostProcess} The horizontal blur post-process"}],"entryType":"function"},{"name":"getBlurVPostProcess","documentation":"Returns the vertical blur PostProcess\n@return {BABYLON.BlurPostProcess} The vertical blur post-process","type":"() => BlurPostProcess","functionBody":[{"parameters":[],"returnType":"BlurPostProcess","documentation":"Returns the vertical blur PostProcess\n@return {BABYLON.BlurPostProcess} The vertical blur post-process"}],"entryType":"function"},{"name":"dispose","documentation":"Removes the internal pipeline assets and detatches the pipeline from the scene cameras","type":"(disableDepthRender?: boolean) => void","functionBody":[{"parameters":[{"name":"disableDepthRender","documentation":"","type":"boolean"}],"returnType":"void","documentation":"Removes the internal pipeline assets and detatches the pipeline from the scene cameras"}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(source: any, scene: Scene, rootUrl: string) => SSAORenderingPipeline","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"SSAORenderingPipeline","documentation":""}],"entryType":"function"},{"name":"_createBlurPostProcess","documentation":"","type":"(ratio: any) => any","functionBody":[{"parameters":[{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createSSAOPostProcess","documentation":"","type":"(ratio: any) => any","functionBody":[{"parameters":[{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createSSAOCombinePostProcess","documentation":"","type":"(ratio: any) => any","functionBody":[{"parameters":[{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createRandomTexture","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"SSAOOriginalSceneColorEffect","documentation":"The PassPostProcess id in the pipeline that contains the original scene color\n@type {string}","type":"string","entryType":"property"},{"name":"SSAORenderEffect","documentation":"The SSAO PostProcess id in the pipeline\n@type {string}","type":"string","entryType":"property"},{"name":"SSAOBlurHRenderEffect","documentation":"The horizontal blur PostProcess id in the pipeline\n@type {string}","type":"string","entryType":"property"},{"name":"SSAOBlurVRenderEffect","documentation":"The vertical blur PostProcess id in the pipeline\n@type {string}","type":"string","entryType":"property"},{"name":"SSAOCombineRenderEffect","documentation":"The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\n@type {string}","type":"string","entryType":"property"},{"name":"totalStrength","documentation":"The output strength of the SSAO post-process. Default value is 1.0.\n@type {number}","type":"number","entryType":"property"},{"name":"radius","documentation":"The radius around the analyzed pixel used by the SSAO post-process. Default value is 0.0006\n@type {number}","type":"number","entryType":"property"},{"name":"area","documentation":"Related to fallOff, used to interpolate SSAO samples (first interpolate function input) based on the occlusion difference of each pixel\nMust not be equal to fallOff and superior to fallOff.\nDefault value is 0.975\n@type {number}","type":"number","entryType":"property"},{"name":"fallOff","documentation":"Related to area, used to interpolate SSAO samples (second interpolate function input) based on the occlusion difference of each pixel\nMust not be equal to area and inferior to area.\nDefault value is 0.0\n@type {number}","type":"number","entryType":"property"},{"name":"base","documentation":"The base color of the SSAO post-process\nThe final result is \"base + ssao\" between [0, 1]\n@type {number}","type":"number","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_depthTexture","documentation":"","type":"any","entryType":"property"},{"name":"_randomTexture","documentation":"","type":"any","entryType":"property"},{"name":"_originalColorPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_ssaoPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_blurHPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_blurVPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_ssaoCombinePostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_firstUpdate","documentation":"","type":"any","entryType":"property"},{"name":"_ratio","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.PostProcessRenderPipeline"]},{"name":"StandardRenderingPipeline","documentation":"","type":"typeof StandardRenderingPipeline","constructors":[{"parameters":[{"name":"name","documentation":"- The rendering pipeline name","type":"string"},{"name":"scene","documentation":"- The scene linked to this pipeline","type":"Scene"},{"name":"ratio","documentation":"- The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)","type":"number"},{"name":"originalPostProcess","documentation":"- the custom original color post-process. Must be \"reusable\". Can be null.","type":"PostProcess"},{"name":"cameras","documentation":"- The array of cameras that the rendering pipeline will be attached to","type":"Camera[]"}],"returnType":"StandardRenderingPipeline","documentation":"@constructor"}],"entryType":"class","functions":[{"name":"_createDownSampleX4PostProcess","documentation":"","type":"(scene: any, ratio: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createBrightPassPostProcess","documentation":"","type":"(scene: any, ratio: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createGaussianBlurPostProcesses","documentation":"","type":"(scene: any, ratio: any, indice: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"},{"name":"indice","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createTextureAdderPostProcess","documentation":"","type":"(scene: any, ratio: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createLensFlarePostProcess","documentation":"","type":"(scene: any, ratio: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createDepthOfFieldPostProcess","documentation":"","type":"(scene: any, ratio: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"originalPostProcess","documentation":"Public members","type":"PostProcess","entryType":"property"},{"name":"downSampleX4PostProcess","documentation":"","type":"PostProcess","entryType":"property"},{"name":"brightPassPostProcess","documentation":"","type":"PostProcess","entryType":"property"},{"name":"gaussianBlurHPostProcesses","documentation":"","type":"PostProcess[]","entryType":"property"},{"name":"gaussianBlurVPostProcesses","documentation":"","type":"PostProcess[]","entryType":"property"},{"name":"textureAdderPostProcess","documentation":"","type":"PostProcess","entryType":"property"},{"name":"textureAdderFinalPostProcess","documentation":"","type":"PostProcess","entryType":"property"},{"name":"lensFlarePostProcess","documentation":"","type":"PostProcess","entryType":"property"},{"name":"lensFlareShiftPostProcess","documentation":"","type":"PostProcess","entryType":"property"},{"name":"lensFlareComposePostProcess","documentation":"","type":"PostProcess","entryType":"property"},{"name":"depthOfFieldPostProcess","documentation":"","type":"PostProcess","entryType":"property"},{"name":"motionBlurPostProcess","documentation":"","type":"PostProcess","entryType":"property"},{"name":"brightThreshold","documentation":"","type":"number","entryType":"property"},{"name":"gaussianCoefficient","documentation":"","type":"number","entryType":"property"},{"name":"gaussianMean","documentation":"","type":"number","entryType":"property"},{"name":"gaussianStandardDeviation","documentation":"","type":"number","entryType":"property"},{"name":"exposure","documentation":"","type":"number","entryType":"property"},{"name":"lensTexture","documentation":"","type":"Texture","entryType":"property"},{"name":"lensColorTexture","documentation":"","type":"Texture","entryType":"property"},{"name":"lensFlareStrength","documentation":"","type":"number","entryType":"property"},{"name":"lensFlareGhostDispersal","documentation":"","type":"number","entryType":"property"},{"name":"lensFlareHaloWidth","documentation":"","type":"number","entryType":"property"},{"name":"lensFlareDistortionStrength","documentation":"","type":"number","entryType":"property"},{"name":"lensStarTexture","documentation":"","type":"Texture","entryType":"property"},{"name":"lensFlareDirtTexture","documentation":"","type":"Texture","entryType":"property"},{"name":"depthOfFieldDistance","documentation":"","type":"number","entryType":"property"},{"name":"animations","documentation":"","type":"Animation[]","entryType":"property"},{"name":"_scene","documentation":"Private members","type":"any","entryType":"property"},{"name":"_depthRenderer","documentation":"","type":"any","entryType":"property"},{"name":"_depthOfFieldEnabled","documentation":"","type":"any","entryType":"property"},{"name":"_lensFlareEnabled","documentation":"","type":"any","entryType":"property"},{"name":"DepthOfFieldEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"LensFlareEnabled","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.PostProcessRenderPipeline","BABYLON.IDisposable","BABYLON.IAnimatable"]},{"name":"StereoscopicInterlacePostProcess","documentation":"","type":"typeof StereoscopicInterlacePostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"rigCameras","documentation":"","type":"Camera[]"},{"name":"isStereoscopicHoriz","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"reusable","documentation":"","type":"boolean"}],"returnType":"StereoscopicInterlacePostProcess","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"_stepSize","documentation":"","type":"any","entryType":"property"},{"name":"_passedProcess","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.PostProcess"]},{"name":"TonemapPostProcess","documentation":"","type":"typeof TonemapPostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"_operator","documentation":"","type":"TonemappingOperator"},{"name":"exposureAdjustment","documentation":"","type":"number"},{"name":"camera","documentation":"","type":"Camera"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"textureFormat","documentation":"","type":"number"}],"returnType":"TonemapPostProcess","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"_operator","documentation":"","type":"any","entryType":"property"},{"name":"exposureAdjustment","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.PostProcess"]},{"name":"VolumetricLightScatteringPostProcess","documentation":"","type":"typeof VolumetricLightScatteringPostProcess","constructors":[{"parameters":[{"name":"name","documentation":"- The post-process name","type":"string"},{"name":"ratio","documentation":"- The size of the post-process and/or internal pass (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)","type":"any"},{"name":"camera","documentation":"- The camera that the post-process will be attached to","type":"Camera"},{"name":"mesh","documentation":"- The mesh used to create the light scattering","type":"Mesh"},{"name":"samples","documentation":"- The post-process quality, default 100","type":"number"},{"name":"samplingMode","documentation":"- The post-process filtering mode","type":"number"},{"name":"engine","documentation":"- The babylon engine","type":"Engine"},{"name":"reusable","documentation":"- If the post-process is reusable","type":"boolean"},{"name":"scene","documentation":"- The constructor needs a scene reference to initialize internal components. If \"camera\" is null (RenderPipelineà, \"scene\" must be provided","type":"Scene"}],"returnType":"VolumetricLightScatteringPostProcess","documentation":"@constructor"}],"entryType":"class","functions":[{"name":"isReady","documentation":"","type":"(subMesh: SubMesh, useInstances: boolean) => boolean","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"useInstances","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"setCustomMeshPosition","documentation":"Sets the new light position for light scattering effect","type":"(position: Vector3) => void","functionBody":[{"parameters":[{"name":"position","documentation":"","type":"Vector3"}],"returnType":"void","documentation":"Sets the new light position for light scattering effect"}],"entryType":"function"},{"name":"getCustomMeshPosition","documentation":"Returns the light position for light scattering effect\n@return {BABYLON.Vector3} The custom light position","type":"() => Vector3","functionBody":[{"parameters":[],"returnType":"Vector3","documentation":"Returns the light position for light scattering effect\n@return {BABYLON.Vector3} The custom light position"}],"entryType":"function"},{"name":"dispose","documentation":"Disposes the internal assets and detaches the post-process from the camera","type":"(camera: Camera) => void","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"Camera"}],"returnType":"void","documentation":"Disposes the internal assets and detaches the post-process from the camera"}],"entryType":"function"},{"name":"getPass","documentation":"Returns the render target texture used by the post-process\n@return {BABYLON.RenderTargetTexture} The render target texture used by the post-process","type":"() => RenderTargetTexture","functionBody":[{"parameters":[],"returnType":"RenderTargetTexture","documentation":"Returns the render target texture used by the post-process\n@return {BABYLON.RenderTargetTexture} The render target texture used by the post-process"}],"entryType":"function"},{"name":"_meshExcluded","documentation":"","type":"(mesh: any) => any","functionBody":[{"parameters":[{"name":"mesh","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createPass","documentation":"","type":"(scene: any, ratio: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"},{"name":"ratio","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updateMeshScreenCoordinates","documentation":"","type":"(scene: any) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"CreateDefaultMesh","documentation":"Creates a default mesh for the Volumeric Light Scattering post-process\n@return {BABYLON.Mesh} the default mesh","type":"(name: string, scene: Scene) => Mesh","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Mesh","documentation":"Creates a default mesh for the Volumeric Light Scattering post-process\n@return {BABYLON.Mesh} the default mesh"}],"entryType":"function"}],"properties":[{"name":"_volumetricLightScatteringPass","documentation":"","type":"any","entryType":"property"},{"name":"_volumetricLightScatteringRTT","documentation":"","type":"any","entryType":"property"},{"name":"_viewPort","documentation":"","type":"any","entryType":"property"},{"name":"_screenCoordinates","documentation":"","type":"any","entryType":"property"},{"name":"_cachedDefines","documentation":"","type":"any","entryType":"property"},{"name":"attachedNode","documentation":"If not undefined, the mesh position is computed from the attached node position\n@type {{position: Vector3}}","type":"{ position: Vector3; }","entryType":"property"},{"name":"customMeshPosition","documentation":"Custom position of the mesh. Used if \"useCustomMeshPosition\" is set to \"true\"\n@type {Vector3}","type":"Vector3","entryType":"property"},{"name":"useCustomMeshPosition","documentation":"Set if the post-process should use a custom position for the light source (true) or the internal mesh position (false)\n@type {boolean}","type":"boolean","entryType":"property"},{"name":"invert","documentation":"If the post-process should inverse the light scattering direction\n@type {boolean}","type":"boolean","entryType":"property"},{"name":"mesh","documentation":"The internal mesh used by the post-process\n@type {boolean}","type":"Mesh","entryType":"property"},{"name":"useDiffuseColor","documentation":"","type":"boolean","entryType":"property"},{"name":"excludedMeshes","documentation":"Array containing the excluded meshes not rendered in the internal pass","type":"AbstractMesh[]","entryType":"property"},{"name":"exposure","documentation":"Controls the overall intensity of the post-process\n@type {number}","type":"number","entryType":"property"},{"name":"decay","documentation":"Dissipates each sample's contribution in range [0, 1]\n@type {number}","type":"number","entryType":"property"},{"name":"weight","documentation":"Controls the overall intensity of each sample\n@type {number}","type":"number","entryType":"property"},{"name":"density","documentation":"Controls the density of each sample\n@type {number}","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.PostProcess"]},{"name":"VRDistortionCorrectionPostProcess","documentation":"","type":"typeof VRDistortionCorrectionPostProcess","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"camera","documentation":"","type":"Camera"},{"name":"isRightEye","documentation":"","type":"boolean"},{"name":"vrMetrics","documentation":"","type":"VRCameraMetrics"}],"returnType":"VRDistortionCorrectionPostProcess","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"aspectRatio","documentation":"","type":"number","entryType":"property"},{"name":"_isRightEye","documentation":"","type":"any","entryType":"property"},{"name":"_distortionFactors","documentation":"","type":"any","entryType":"property"},{"name":"_postProcessScaleFactor","documentation":"","type":"any","entryType":"property"},{"name":"_lensCenterOffset","documentation":"","type":"any","entryType":"property"},{"name":"_scaleIn","documentation":"","type":"any","entryType":"property"},{"name":"_scaleFactor","documentation":"","type":"any","entryType":"property"},{"name":"_lensCenter","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.PostProcess"]},{"name":"BoundingBoxRenderer","documentation":"","type":"typeof BoundingBoxRenderer","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"}],"returnType":"BoundingBoxRenderer","documentation":""}],"entryType":"class","functions":[{"name":"_prepareRessources","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"reset","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"render","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"frontColor","documentation":"","type":"Color3","entryType":"property"},{"name":"backColor","documentation":"","type":"Color3","entryType":"property"},{"name":"showBackLines","documentation":"","type":"boolean","entryType":"property"},{"name":"renderList","documentation":"","type":"SmartArray<BoundingBox>","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_colorShader","documentation":"","type":"any","entryType":"property"},{"name":"_vertexBuffers","documentation":"","type":"any","entryType":"property"},{"name":"_indexBuffer","documentation":"","type":"any","entryType":"property"}]},{"name":"DepthRenderer","documentation":"","type":"typeof DepthRenderer","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"type","documentation":"","type":"number"}],"returnType":"DepthRenderer","documentation":""}],"entryType":"class","functions":[{"name":"isReady","documentation":"","type":"(subMesh: SubMesh, useInstances: boolean) => boolean","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"useInstances","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getDepthMap","documentation":"","type":"() => RenderTargetTexture","functionBody":[{"parameters":[],"returnType":"RenderTargetTexture","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_depthMap","documentation":"","type":"any","entryType":"property"},{"name":"_effect","documentation":"","type":"any","entryType":"property"},{"name":"_viewMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_projectionMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_transformMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_worldViewProjection","documentation":"","type":"any","entryType":"property"},{"name":"_cachedDefines","documentation":"","type":"any","entryType":"property"}]},{"name":"EdgesRenderer","documentation":"","type":"typeof EdgesRenderer","constructors":[{"parameters":[{"name":"source","documentation":"","type":"AbstractMesh"},{"name":"epsilon","documentation":"","type":"number"},{"name":"checkVerticesInsteadOfIndices","documentation":"","type":"boolean"}],"returnType":"EdgesRenderer","documentation":""}],"entryType":"class","functions":[{"name":"_prepareRessources","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_processEdgeForAdjacencies","documentation":"","type":"(pa: any, pb: any, p0: any, p1: any, p2: any) => any","functionBody":[{"parameters":[{"name":"pa","documentation":"","type":"any"},{"name":"pb","documentation":"","type":"any"},{"name":"p0","documentation":"","type":"any"},{"name":"p1","documentation":"","type":"any"},{"name":"p2","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_processEdgeForAdjacenciesWithVertices","documentation":"","type":"(pa: any, pb: any, p0: any, p1: any, p2: any) => any","functionBody":[{"parameters":[{"name":"pa","documentation":"","type":"any"},{"name":"pb","documentation":"","type":"any"},{"name":"p0","documentation":"","type":"any"},{"name":"p1","documentation":"","type":"any"},{"name":"p2","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_checkEdge","documentation":"","type":"(faceIndex: any, edge: any, faceNormals: any, p0: any, p1: any) => any","functionBody":[{"parameters":[{"name":"faceIndex","documentation":"","type":"any"},{"name":"edge","documentation":"","type":"any"},{"name":"faceNormals","documentation":"","type":"any"},{"name":"p0","documentation":"","type":"any"},{"name":"p1","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_generateEdgesLines","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"render","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"edgesWidthScalerForOrthographic","documentation":"","type":"number","entryType":"property"},{"name":"edgesWidthScalerForPerspective","documentation":"","type":"number","entryType":"property"},{"name":"_source","documentation":"","type":"any","entryType":"property"},{"name":"_linesPositions","documentation":"","type":"any","entryType":"property"},{"name":"_linesNormals","documentation":"","type":"any","entryType":"property"},{"name":"_linesIndices","documentation":"","type":"any","entryType":"property"},{"name":"_epsilon","documentation":"","type":"any","entryType":"property"},{"name":"_indicesCount","documentation":"","type":"any","entryType":"property"},{"name":"_lineShader","documentation":"","type":"any","entryType":"property"},{"name":"_ib","documentation":"","type":"any","entryType":"property"},{"name":"_buffers","documentation":"","type":"any","entryType":"property"},{"name":"_checkVerticesInsteadOfIndices","documentation":"","type":"any","entryType":"property"}]},{"name":"OutlineRenderer","documentation":"","type":"typeof OutlineRenderer","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"}],"returnType":"OutlineRenderer","documentation":""}],"entryType":"class","functions":[{"name":"render","documentation":"","type":"(subMesh: SubMesh, batch: _InstancesBatch, useOverlay?: boolean) => void","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"batch","documentation":"","type":"_InstancesBatch"},{"name":"useOverlay","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"","type":"(subMesh: SubMesh, useInstances: boolean) => boolean","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"useInstances","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_effect","documentation":"","type":"any","entryType":"property"},{"name":"_cachedDefines","documentation":"","type":"any","entryType":"property"}]},{"name":"RenderingGroup","documentation":"","type":"typeof RenderingGroup","constructors":[{"parameters":[{"name":"index","documentation":"The rendering group index","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"opaqueSortCompareFn","documentation":"The opaque sort comparison function. If null no order is applied","type":"(a: SubMesh, b: SubMesh) => number"},{"name":"alphaTestSortCompareFn","documentation":"The alpha test sort comparison function. If null no order is applied","type":"(a: SubMesh, b: SubMesh) => number"},{"name":"transparentSortCompareFn","documentation":"The transparent sort comparison function. If null back to front + alpha index sort is applied","type":"(a: SubMesh, b: SubMesh) => number"}],"returnType":"RenderingGroup","documentation":"Creates a new rendering group."}],"entryType":"class","functions":[{"name":"render","documentation":"Render all the sub meshes contained in the group.\n@returns true if rendered some submeshes.","type":"(customRenderFunction: (opaqueSubMeshes: SmartArray<SubMesh>, transparentSubMeshes: SmartArray<Su...","functionBody":[{"parameters":[{"name":"customRenderFunction","documentation":"Used to override the default render behaviour of the group.","type":"(opaqueSubMeshes: SmartArray<SubMesh>, transparentSubMeshes: SmartArray<SubMesh>, alphaTestSubMes..."}],"returnType":"boolean","documentation":"Render all the sub meshes contained in the group.\n@returns true if rendered some submeshes."}],"entryType":"function"},{"name":"renderOpaqueSorted","documentation":"Renders the opaque submeshes in the order from the opaqueSortCompareFn.","type":"(subMeshes: any) => any","functionBody":[{"parameters":[{"name":"subMeshes","documentation":"The submeshes to render","type":"any"}],"returnType":"any","documentation":"Renders the opaque submeshes in the order from the opaqueSortCompareFn."}],"entryType":"function"},{"name":"renderAlphaTestSorted","documentation":"Renders the opaque submeshes in the order from the alphatestSortCompareFn.","type":"(subMeshes: any) => any","functionBody":[{"parameters":[{"name":"subMeshes","documentation":"The submeshes to render","type":"any"}],"returnType":"any","documentation":"Renders the opaque submeshes in the order from the alphatestSortCompareFn."}],"entryType":"function"},{"name":"renderTransparentSorted","documentation":"Renders the opaque submeshes in the order from the transparentSortCompareFn.","type":"(subMeshes: any) => any","functionBody":[{"parameters":[{"name":"subMeshes","documentation":"The submeshes to render","type":"any"}],"returnType":"any","documentation":"Renders the opaque submeshes in the order from the transparentSortCompareFn."}],"entryType":"function"},{"name":"renderSorted","documentation":"Renders the submeshes in a specified order.","type":"(subMeshes: any, sortCompareFn: any, cameraPosition: any, transparent: any) => any","functionBody":[{"parameters":[{"name":"subMeshes","documentation":"The submeshes to sort before render","type":"any"},{"name":"sortCompareFn","documentation":"The comparison function use to sort","type":"any"},{"name":"cameraPosition","documentation":"The camera position use to preprocess the submeshes to help sorting","type":"any"},{"name":"transparent","documentation":"Specifies to activate blending if true","type":"any"}],"returnType":"any","documentation":"Renders the submeshes in a specified order."}],"entryType":"function"},{"name":"renderUnsorted","documentation":"Renders the submeshes in the order they were dispatched (no sort applied).","type":"(subMeshes: any) => any","functionBody":[{"parameters":[{"name":"subMeshes","documentation":"The submeshes to render","type":"any"}],"returnType":"any","documentation":"Renders the submeshes in the order they were dispatched (no sort applied)."}],"entryType":"function"},{"name":"defaultTransparentSortCompare","documentation":"Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\nare rendered back to front if in the same alpha index.\n\n@returns The result of the comparison","type":"(a: SubMesh, b: SubMesh) => number","functionBody":[{"parameters":[{"name":"a","documentation":"The first submesh","type":"SubMesh"},{"name":"b","documentation":"The second submesh","type":"SubMesh"}],"returnType":"number","documentation":"Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\nare rendered back to front if in the same alpha index.\n\n@returns The result of the comparison"}],"entryType":"function"},{"name":"backToFrontSortCompare","documentation":"Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\nare rendered back to front.\n\n@returns The result of the comparison","type":"(a: SubMesh, b: SubMesh) => number","functionBody":[{"parameters":[{"name":"a","documentation":"The first submesh","type":"SubMesh"},{"name":"b","documentation":"The second submesh","type":"SubMesh"}],"returnType":"number","documentation":"Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\nare rendered back to front.\n\n@returns The result of the comparison"}],"entryType":"function"},{"name":"frontToBackSortCompare","documentation":"Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\nare rendered front to back (prevent overdraw).\n\n@returns The result of the comparison","type":"(a: SubMesh, b: SubMesh) => number","functionBody":[{"parameters":[{"name":"a","documentation":"The first submesh","type":"SubMesh"},{"name":"b","documentation":"The second submesh","type":"SubMesh"}],"returnType":"number","documentation":"Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\nare rendered front to back (prevent overdraw).\n\n@returns The result of the comparison"}],"entryType":"function"},{"name":"prepare","documentation":"Resets the different lists of submeshes to prepare a new frame.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Resets the different lists of submeshes to prepare a new frame."}],"entryType":"function"},{"name":"dispatch","documentation":"Inserts the submesh in its correct queue depending on its material.","type":"(subMesh: SubMesh) => void","functionBody":[{"parameters":[{"name":"subMesh","documentation":"The submesh to dispatch","type":"SubMesh"}],"returnType":"void","documentation":"Inserts the submesh in its correct queue depending on its material."}],"entryType":"function"}],"properties":[{"name":"index","documentation":"","type":"number","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_opaqueSubMeshes","documentation":"","type":"any","entryType":"property"},{"name":"_transparentSubMeshes","documentation":"","type":"any","entryType":"property"},{"name":"_alphaTestSubMeshes","documentation":"","type":"any","entryType":"property"},{"name":"_activeVertices","documentation":"","type":"any","entryType":"property"},{"name":"_opaqueSortCompareFn","documentation":"","type":"any","entryType":"property"},{"name":"_alphaTestSortCompareFn","documentation":"","type":"any","entryType":"property"},{"name":"_transparentSortCompareFn","documentation":"","type":"any","entryType":"property"},{"name":"_renderOpaque","documentation":"","type":"any","entryType":"property"},{"name":"_renderAlphaTest","documentation":"","type":"any","entryType":"property"},{"name":"_renderTransparent","documentation":"","type":"any","entryType":"property"},{"name":"onBeforeTransparentRendering","documentation":"","type":"() => void","entryType":"property"},{"name":"opaqueSortCompareFn","documentation":"Set the opaque sort comparison function.\nIf null the sub meshes will be render in the order they were created","type":"(a: SubMesh, b: SubMesh) => number","entryType":"property"},{"name":"alphaTestSortCompareFn","documentation":"Set the alpha test sort comparison function.\nIf null the sub meshes will be render in the order they were created","type":"(a: SubMesh, b: SubMesh) => number","entryType":"property"},{"name":"transparentSortCompareFn","documentation":"Set the transparent sort comparison function.\nIf null the sub meshes will be render in the order they were created","type":"(a: SubMesh, b: SubMesh) => number","entryType":"property"}]},{"name":"RenderingManager","documentation":"","type":"typeof RenderingManager","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"}],"returnType":"RenderingManager","documentation":""}],"entryType":"class","functions":[{"name":"_renderParticles","documentation":"","type":"(index: any, activeMeshes: any) => any","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"any"},{"name":"activeMeshes","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_renderSprites","documentation":"","type":"(index: any) => any","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_clearDepthStencilBuffer","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_renderSpritesAndParticles","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"render","documentation":"","type":"(customRenderFunction: (opaqueSubMeshes: SmartArray<SubMesh>, transparentSubMeshes: SmartArray<Su...","functionBody":[{"parameters":[{"name":"customRenderFunction","documentation":"","type":"(opaqueSubMeshes: SmartArray<SubMesh>, transparentSubMeshes: SmartArray<SubMesh>, alphaTestSubMes..."},{"name":"activeMeshes","documentation":"","type":"AbstractMesh[]"},{"name":"renderParticles","documentation":"","type":"boolean"},{"name":"renderSprites","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"reset","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispatch","documentation":"","type":"(subMesh: SubMesh) => void","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setRenderingOrder","documentation":"Overrides the default sort function applied in the renderging group to prepare the meshes.\nThis allowed control for front to back rendering or reversly depending of the special needs.","type":"(renderingGroupId: number, opaqueSortCompareFn?: (a: SubMesh, b: SubMesh) => number, alphaTestSor...","functionBody":[{"parameters":[{"name":"renderingGroupId","documentation":"The rendering group id corresponding to its index","type":"number"},{"name":"opaqueSortCompareFn","documentation":"The opaque queue comparison function use to sort.","type":"(a: SubMesh, b: SubMesh) => number"},{"name":"alphaTestSortCompareFn","documentation":"The alpha test queue comparison function use to sort.","type":"(a: SubMesh, b: SubMesh) => number"},{"name":"transparentSortCompareFn","documentation":"The transparent queue comparison function use to sort.","type":"(a: SubMesh, b: SubMesh) => number"}],"returnType":"void","documentation":"Overrides the default sort function applied in the renderging group to prepare the meshes.\nThis allowed control for front to back rendering or reversly depending of the special needs."}],"entryType":"function"},{"name":"setRenderingAutoClearDepthStencil","documentation":"Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.","type":"(renderingGroupId: number, autoClearDepthStencil: boolean) => void","functionBody":[{"parameters":[{"name":"renderingGroupId","documentation":"The rendering group id corresponding to its index","type":"number"},{"name":"autoClearDepthStencil","documentation":"Automatically clears depth and stencil between groups if true.","type":"boolean"}],"returnType":"void","documentation":"Specifies whether or not the stencil and depth buffer are cleared between two rendering groups."}],"entryType":"function"}],"properties":[{"name":"MAX_RENDERINGGROUPS","documentation":"The max id used for rendering groups (not included)","type":"number","entryType":"property"},{"name":"MIN_RENDERINGGROUPS","documentation":"The min id used for rendering groups (included)","type":"number","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_renderingGroups","documentation":"","type":"any","entryType":"property"},{"name":"_depthStencilBufferAlreadyCleaned","documentation":"","type":"any","entryType":"property"},{"name":"_currentIndex","documentation":"","type":"any","entryType":"property"},{"name":"_currentActiveMeshes","documentation":"","type":"any","entryType":"property"},{"name":"_currentRenderParticles","documentation":"","type":"any","entryType":"property"},{"name":"_currentRenderSprites","documentation":"","type":"any","entryType":"property"},{"name":"_autoClearDepthStencil","documentation":"","type":"any","entryType":"property"},{"name":"_customOpaqueSortCompareFn","documentation":"","type":"any","entryType":"property"},{"name":"_customAlphaTestSortCompareFn","documentation":"","type":"any","entryType":"property"},{"name":"_customTransparentSortCompareFn","documentation":"","type":"any","entryType":"property"}]},{"name":"Sprite","documentation":"","type":"typeof Sprite","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"manager","documentation":"","type":"SpriteManager"}],"returnType":"Sprite","documentation":""}],"entryType":"class","functions":[{"name":"playAnimation","documentation":"","type":"(from: number, to: number, loop: boolean, delay: number, onAnimationEnd: () => void) => void","functionBody":[{"parameters":[{"name":"from","documentation":"","type":"number"},{"name":"to","documentation":"","type":"number"},{"name":"loop","documentation":"","type":"boolean"},{"name":"delay","documentation":"","type":"number"},{"name":"onAnimationEnd","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"stopAnimation","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_animate","documentation":"","type":"(deltaTime: number) => void","functionBody":[{"parameters":[{"name":"deltaTime","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"position","documentation":"","type":"Vector3","entryType":"property"},{"name":"color","documentation":"","type":"Color4","entryType":"property"},{"name":"width","documentation":"","type":"number","entryType":"property"},{"name":"height","documentation":"","type":"number","entryType":"property"},{"name":"angle","documentation":"","type":"number","entryType":"property"},{"name":"cellIndex","documentation":"","type":"number","entryType":"property"},{"name":"invertU","documentation":"","type":"number","entryType":"property"},{"name":"invertV","documentation":"","type":"number","entryType":"property"},{"name":"disposeWhenFinishedAnimating","documentation":"","type":"boolean","entryType":"property"},{"name":"animations","documentation":"","type":"Animation[]","entryType":"property"},{"name":"isPickable","documentation":"","type":"boolean","entryType":"property"},{"name":"actionManager","documentation":"","type":"ActionManager","entryType":"property"},{"name":"_animationStarted","documentation":"","type":"any","entryType":"property"},{"name":"_loopAnimation","documentation":"","type":"any","entryType":"property"},{"name":"_fromIndex","documentation":"","type":"any","entryType":"property"},{"name":"_toIndex","documentation":"","type":"any","entryType":"property"},{"name":"_delay","documentation":"","type":"any","entryType":"property"},{"name":"_direction","documentation":"","type":"any","entryType":"property"},{"name":"_frameCount","documentation":"","type":"any","entryType":"property"},{"name":"_manager","documentation":"","type":"any","entryType":"property"},{"name":"_time","documentation":"","type":"any","entryType":"property"},{"name":"_onAnimationEnd","documentation":"","type":"any","entryType":"property"},{"name":"size","documentation":"","type":"number","entryType":"property"}]},{"name":"SpriteManager","documentation":"","type":"typeof SpriteManager","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"imgUrl","documentation":"","type":"string"},{"name":"capacity","documentation":"","type":"number"},{"name":"cellSize","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"epsilon","documentation":"","type":"number"},{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"SpriteManager","documentation":""}],"entryType":"class","functions":[{"name":"_appendSpriteVertex","documentation":"","type":"(index: any, sprite: any, offsetX: any, offsetY: any, rowSize: any) => any","functionBody":[{"parameters":[{"name":"index","documentation":"","type":"any"},{"name":"sprite","documentation":"","type":"any"},{"name":"offsetX","documentation":"","type":"any"},{"name":"offsetY","documentation":"","type":"any"},{"name":"rowSize","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"intersects","documentation":"","type":"(ray: Ray, camera: Camera, predicate?: (sprite: Sprite) => boolean, fastCheck?: boolean) => Picki...","functionBody":[{"parameters":[{"name":"ray","documentation":"","type":"Ray"},{"name":"camera","documentation":"","type":"Camera"},{"name":"predicate","documentation":"","type":"(sprite: Sprite) => boolean"},{"name":"fastCheck","documentation":"","type":"boolean"}],"returnType":"PickingInfo","documentation":""}],"entryType":"function"},{"name":"render","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"sprites","documentation":"","type":"Sprite[]","entryType":"property"},{"name":"renderingGroupId","documentation":"","type":"number","entryType":"property"},{"name":"layerMask","documentation":"","type":"number","entryType":"property"},{"name":"fogEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"isPickable","documentation":"","type":"boolean","entryType":"property"},{"name":"cellWidth","documentation":"","type":"number","entryType":"property"},{"name":"cellHeight","documentation":"","type":"number","entryType":"property"},{"name":"onDisposeObservable","documentation":"An event triggered when the manager is disposed.\n@type {BABYLON.Observable}","type":"Observable<SpriteManager>","entryType":"property"},{"name":"_onDisposeObserver","documentation":"","type":"any","entryType":"property"},{"name":"onDispose","documentation":"","type":"() => void","entryType":"property"},{"name":"_capacity","documentation":"","type":"any","entryType":"property"},{"name":"_spriteTexture","documentation":"","type":"any","entryType":"property"},{"name":"_epsilon","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_vertexData","documentation":"","type":"any","entryType":"property"},{"name":"_buffer","documentation":"","type":"any","entryType":"property"},{"name":"_vertexBuffers","documentation":"","type":"any","entryType":"property"},{"name":"_indexBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_effectBase","documentation":"","type":"any","entryType":"property"},{"name":"_effectFog","documentation":"","type":"any","entryType":"property"},{"name":"texture","documentation":"","type":"Texture","entryType":"property"}]},{"name":"MeshAssetTask","documentation":"","type":"typeof MeshAssetTask","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"meshesNames","documentation":"","type":"any"},{"name":"rootUrl","documentation":"","type":"string"},{"name":"sceneFilename","documentation":"","type":"string"}],"returnType":"MeshAssetTask","documentation":""}],"entryType":"class","functions":[{"name":"run","documentation":"","type":"(scene: Scene, onSuccess: () => void, onError: () => void) => void","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"onSuccess","documentation":"","type":"() => void"},{"name":"onError","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"meshesNames","documentation":"","type":"any","entryType":"property"},{"name":"rootUrl","documentation":"","type":"string","entryType":"property"},{"name":"sceneFilename","documentation":"","type":"string","entryType":"property"},{"name":"loadedMeshes","documentation":"","type":"AbstractMesh[]","entryType":"property"},{"name":"loadedParticleSystems","documentation":"","type":"ParticleSystem[]","entryType":"property"},{"name":"loadedSkeletons","documentation":"","type":"Skeleton[]","entryType":"property"},{"name":"onSuccess","documentation":"","type":"(task: IAssetTask) => void","entryType":"property"},{"name":"onError","documentation":"","type":"(task: IAssetTask) => void","entryType":"property"},{"name":"isCompleted","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.IAssetTask"]},{"name":"TextFileAssetTask","documentation":"","type":"typeof TextFileAssetTask","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"url","documentation":"","type":"string"}],"returnType":"TextFileAssetTask","documentation":""}],"entryType":"class","functions":[{"name":"run","documentation":"","type":"(scene: Scene, onSuccess: () => void, onError: () => void) => void","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"onSuccess","documentation":"","type":"() => void"},{"name":"onError","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"url","documentation":"","type":"string","entryType":"property"},{"name":"onSuccess","documentation":"","type":"(task: IAssetTask) => void","entryType":"property"},{"name":"onError","documentation":"","type":"(task: IAssetTask) => void","entryType":"property"},{"name":"isCompleted","documentation":"","type":"boolean","entryType":"property"},{"name":"text","documentation":"","type":"string","entryType":"property"}],"heritageClauses":["BABYLON.IAssetTask"]},{"name":"BinaryFileAssetTask","documentation":"","type":"typeof BinaryFileAssetTask","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"url","documentation":"","type":"string"}],"returnType":"BinaryFileAssetTask","documentation":""}],"entryType":"class","functions":[{"name":"run","documentation":"","type":"(scene: Scene, onSuccess: () => void, onError: () => void) => void","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"onSuccess","documentation":"","type":"() => void"},{"name":"onError","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"url","documentation":"","type":"string","entryType":"property"},{"name":"onSuccess","documentation":"","type":"(task: IAssetTask) => void","entryType":"property"},{"name":"onError","documentation":"","type":"(task: IAssetTask) => void","entryType":"property"},{"name":"isCompleted","documentation":"","type":"boolean","entryType":"property"},{"name":"data","documentation":"","type":"ArrayBuffer","entryType":"property"}],"heritageClauses":["BABYLON.IAssetTask"]},{"name":"ImageAssetTask","documentation":"","type":"typeof ImageAssetTask","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"url","documentation":"","type":"string"}],"returnType":"ImageAssetTask","documentation":""}],"entryType":"class","functions":[{"name":"run","documentation":"","type":"(scene: Scene, onSuccess: () => void, onError: () => void) => void","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"onSuccess","documentation":"","type":"() => void"},{"name":"onError","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"url","documentation":"","type":"string","entryType":"property"},{"name":"onSuccess","documentation":"","type":"(task: IAssetTask) => void","entryType":"property"},{"name":"onError","documentation":"","type":"(task: IAssetTask) => void","entryType":"property"},{"name":"isCompleted","documentation":"","type":"boolean","entryType":"property"},{"name":"image","documentation":"","type":"HTMLImageElement","entryType":"property"}],"heritageClauses":["BABYLON.IAssetTask"]},{"name":"TextureAssetTask","documentation":"","type":"typeof TextureAssetTask","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"url","documentation":"","type":"string"},{"name":"noMipmap","documentation":"","type":"boolean"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"TextureAssetTask","documentation":""}],"entryType":"class","functions":[{"name":"run","documentation":"","type":"(scene: Scene, onSuccess: () => void, onError: () => void) => void","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"onSuccess","documentation":"","type":"() => void"},{"name":"onError","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"url","documentation":"","type":"string","entryType":"property"},{"name":"noMipmap","documentation":"","type":"boolean","entryType":"property"},{"name":"invertY","documentation":"","type":"boolean","entryType":"property"},{"name":"samplingMode","documentation":"","type":"number","entryType":"property"},{"name":"onSuccess","documentation":"","type":"(task: IAssetTask) => void","entryType":"property"},{"name":"onError","documentation":"","type":"(task: IAssetTask) => void","entryType":"property"},{"name":"isCompleted","documentation":"","type":"boolean","entryType":"property"},{"name":"texture","documentation":"","type":"Texture","entryType":"property"}],"heritageClauses":["BABYLON.IAssetTask"]},{"name":"AssetsManager","documentation":"","type":"typeof AssetsManager","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"}],"returnType":"AssetsManager","documentation":""}],"entryType":"class","functions":[{"name":"addMeshTask","documentation":"","type":"(taskName: string, meshesNames: any, rootUrl: string, sceneFilename: string) => IAssetTask","functionBody":[{"parameters":[{"name":"taskName","documentation":"","type":"string"},{"name":"meshesNames","documentation":"","type":"any"},{"name":"rootUrl","documentation":"","type":"string"},{"name":"sceneFilename","documentation":"","type":"string"}],"returnType":"IAssetTask","documentation":""}],"entryType":"function"},{"name":"addTextFileTask","documentation":"","type":"(taskName: string, url: string) => IAssetTask","functionBody":[{"parameters":[{"name":"taskName","documentation":"","type":"string"},{"name":"url","documentation":"","type":"string"}],"returnType":"IAssetTask","documentation":""}],"entryType":"function"},{"name":"addBinaryFileTask","documentation":"","type":"(taskName: string, url: string) => IAssetTask","functionBody":[{"parameters":[{"name":"taskName","documentation":"","type":"string"},{"name":"url","documentation":"","type":"string"}],"returnType":"IAssetTask","documentation":""}],"entryType":"function"},{"name":"addImageTask","documentation":"","type":"(taskName: string, url: string) => IAssetTask","functionBody":[{"parameters":[{"name":"taskName","documentation":"","type":"string"},{"name":"url","documentation":"","type":"string"}],"returnType":"IAssetTask","documentation":""}],"entryType":"function"},{"name":"addTextureTask","documentation":"","type":"(taskName: string, url: string, noMipmap?: boolean, invertY?: boolean, samplingMode?: number) => ...","functionBody":[{"parameters":[{"name":"taskName","documentation":"","type":"string"},{"name":"url","documentation":"","type":"string"},{"name":"noMipmap","documentation":"","type":"boolean"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"IAssetTask","documentation":""}],"entryType":"function"},{"name":"_decreaseWaitingTasksCount","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_runTask","documentation":"","type":"(task: any) => any","functionBody":[{"parameters":[{"name":"task","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"reset","documentation":"","type":"() => AssetsManager","functionBody":[{"parameters":[],"returnType":"AssetsManager","documentation":""}],"entryType":"function"},{"name":"load","documentation":"","type":"() => AssetsManager","functionBody":[{"parameters":[],"returnType":"AssetsManager","documentation":""}],"entryType":"function"}],"properties":[{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"tasks","documentation":"","type":"IAssetTask[]","entryType":"property"},{"name":"waitingTasksCount","documentation":"","type":"number","entryType":"property"},{"name":"onFinish","documentation":"","type":"(tasks: IAssetTask[]) => void","entryType":"property"},{"name":"onTaskSuccess","documentation":"","type":"(task: IAssetTask) => void","entryType":"property"},{"name":"onTaskError","documentation":"","type":"(task: IAssetTask) => void","entryType":"property"},{"name":"useDefaultLoadingScreen","documentation":"","type":"boolean","entryType":"property"}]},{"name":"Database","documentation":"","type":"typeof Database","constructors":[{"parameters":[{"name":"urlToScene","documentation":"","type":"string"},{"name":"callbackManifestChecked","documentation":"","type":"(checked: boolean) => any"}],"returnType":"Database","documentation":""}],"entryType":"class","functions":[{"name":"checkManifestFile","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"openAsync","documentation":"","type":"(successCallback: any, errorCallback: any) => void","functionBody":[{"parameters":[{"name":"successCallback","documentation":"","type":"any"},{"name":"errorCallback","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"loadImageFromDB","documentation":"","type":"(url: string, image: HTMLImageElement) => void","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"string"},{"name":"image","documentation":"","type":"HTMLImageElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_loadImageFromDBAsync","documentation":"","type":"(url: any, image: any, notInDBCallback: any) => any","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"any"},{"name":"image","documentation":"","type":"any"},{"name":"notInDBCallback","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_saveImageIntoDBAsync","documentation":"","type":"(url: any, image: any) => any","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"any"},{"name":"image","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_checkVersionFromDB","documentation":"","type":"(url: any, versionLoaded: any) => any","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"any"},{"name":"versionLoaded","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_loadVersionFromDBAsync","documentation":"","type":"(url: any, callback: any, updateInDBCallback: any) => any","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"any"},{"name":"callback","documentation":"","type":"any"},{"name":"updateInDBCallback","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_saveVersionIntoDBAsync","documentation":"","type":"(url: any, callback: any) => any","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"any"},{"name":"callback","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"loadFileFromDB","documentation":"","type":"(url: any, sceneLoaded: any, progressCallBack: any, errorCallback: any, useArrayBuffer?: any) => ...","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"any"},{"name":"sceneLoaded","documentation":"","type":"any"},{"name":"progressCallBack","documentation":"","type":"any"},{"name":"errorCallback","documentation":"","type":"any"},{"name":"useArrayBuffer","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_loadFileFromDBAsync","documentation":"","type":"(url: any, callback: any, notInDBCallback: any, useArrayBuffer?: any) => any","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"any"},{"name":"callback","documentation":"","type":"any"},{"name":"notInDBCallback","documentation":"","type":"any"},{"name":"useArrayBuffer","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_saveFileIntoDBAsync","documentation":"","type":"(url: any, callback: any, progressCallback: any, useArrayBuffer?: any) => any","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"any"},{"name":"callback","documentation":"","type":"any"},{"name":"progressCallback","documentation":"","type":"any"},{"name":"useArrayBuffer","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"callbackManifestChecked","documentation":"","type":"any","entryType":"property"},{"name":"currentSceneUrl","documentation":"","type":"any","entryType":"property"},{"name":"db","documentation":"","type":"any","entryType":"property"},{"name":"enableSceneOffline","documentation":"","type":"any","entryType":"property"},{"name":"enableTexturesOffline","documentation":"","type":"any","entryType":"property"},{"name":"manifestVersionFound","documentation":"","type":"any","entryType":"property"},{"name":"mustUpdateRessources","documentation":"","type":"any","entryType":"property"},{"name":"hasReachedQuota","documentation":"","type":"any","entryType":"property"},{"name":"isSupported","documentation":"","type":"any","entryType":"property"},{"name":"idbFactory","documentation":"","type":"any","entryType":"property"},{"name":"IsUASupportingBlobStorage","documentation":"","type":"boolean","entryType":"property"},{"name":"IDBStorageEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"parseURL","documentation":"","type":"(url: string) => string","entryType":"property"},{"name":"ReturnFullUrlLocation","documentation":"","type":"(url: string) => string","entryType":"property"}]},{"name":"SerializationHelper","documentation":"","type":"typeof SerializationHelper","constructors":[{"parameters":[],"returnType":"SerializationHelper","documentation":""}],"entryType":"class","functions":[{"name":"Serialize","documentation":"","type":"<T>(entity: T, serializationObject?: any) => any","functionBody":[{"parameters":[{"name":"entity","documentation":"","type":"T"},{"name":"serializationObject","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"<T>(creationFunction: () => T, source: any, scene: Scene, rootUrl?: string) => T","functionBody":[{"parameters":[{"name":"creationFunction","documentation":"","type":"() => T"},{"name":"source","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"T","documentation":""}],"entryType":"function"},{"name":"Clone","documentation":"","type":"<T>(creationFunction: () => T, source: T) => T","functionBody":[{"parameters":[{"name":"creationFunction","documentation":"","type":"() => T"},{"name":"source","documentation":"","type":"T"}],"returnType":"T","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"DynamicFloatArrayElementInfo","documentation":"","type":"typeof DynamicFloatArrayElementInfo","constructors":[{"parameters":[],"returnType":"DynamicFloatArrayElementInfo","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"offset","documentation":"","type":"number","entryType":"property"}]},{"name":"DynamicFloatArray","documentation":"The purpose of this class is to store float32 based elements of a given size (defined by the stride argument) in a dynamic fashion, that is, you can add/free elements. You can then access to a defragmented/packed version of the underlying Float32Array by calling the pack() method.\nThe intent is to maintain through time data that will be bound to a WebGlBuffer with the ability to change add/remove elements.\nIt was first built to efficiently maintain the WebGlBuffer that contain instancing based data.\nAllocating an Element will return a instance of DynamicFloatArrayElement which contains the offset into the Float32Array of where the element starts, you are then responsible to copy your data using this offset.\nBeware, calling pack() may change the offset of some Entries because this method will defragment the Float32Array to replace empty elements by moving allocated ones at their location.\nThis method will return an ArrayBufferView on the existing Float32Array that describes the used elements. Use this View to update the WebGLBuffer and NOT the \"buffer\" field of the class. The pack() method won't shrink/reallocate the buffer to keep it GC friendly, all the empty space will be put at the end of the buffer, the method just ensure there are no \"free holes\".","type":"typeof DynamicFloatArray","constructors":[{"parameters":[{"name":"stride","documentation":"size of one element in float (i.e. not bytes!)","type":"number"},{"name":"initialElementCount","documentation":"the number of available entries at construction","type":"number"}],"returnType":"DynamicFloatArray","documentation":"Construct an instance of the dynamic float array"}],"entryType":"class","functions":[{"name":"allocElement","documentation":"Allocate an element in the array.\n@return the element info instance that contains the offset into the main buffer of the element's location.\nBeware, this offset may change when you call pack()","type":"() => DynamicFloatArrayElementInfo","functionBody":[{"parameters":[],"returnType":"DynamicFloatArrayElementInfo","documentation":"Allocate an element in the array.\n@return the element info instance that contains the offset into the main buffer of the element's location.\nBeware, this offset may change when you call pack()"}],"entryType":"function"},{"name":"freeElement","documentation":"Free the element corresponding to the given element info","type":"(elInfo: DynamicFloatArrayElementInfo) => void","functionBody":[{"parameters":[{"name":"elInfo","documentation":"the element that describe the allocated element","type":"DynamicFloatArrayElementInfo"}],"returnType":"void","documentation":"Free the element corresponding to the given element info"}],"entryType":"function"},{"name":"pack","documentation":"This method will pack all the used elements into a linear sequence and put all the free space at the end.\nInstances of DynamicFloatArrayElement may have their 'offset' member changed as data could be copied from one location to another, so be sure to read/write your data based on the value inside this member after you called pack().\n@return the subArray that is the view of the used elements area, you can use it as a source to update a WebGLBuffer","type":"() => Float32Array","functionBody":[{"parameters":[],"returnType":"Float32Array","documentation":"This method will pack all the used elements into a linear sequence and put all the free space at the end.\nInstances of DynamicFloatArrayElement may have their 'offset' member changed as data could be copied from one location to another, so be sure to read/write your data based on the value inside this member after you called pack().\n@return the subArray that is the view of the used elements area, you can use it as a source to update a WebGLBuffer"}],"entryType":"function"},{"name":"_moveElement","documentation":"","type":"(element: any, destOffset: any) => any","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"any"},{"name":"destOffset","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_growBuffer","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"sort","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"buffer","documentation":"This is the main buffer, all elements are stored inside, you use the DynamicFloatArrayElement instance of a given element to know its location into this buffer, then you have the responsibility to perform write operations in this buffer at the right location!\nDon't use this buffer for a WebGL bufferSubData() operation, but use the one returned by the pack() method.","type":"Float32Array","entryType":"property"},{"name":"totalElementCount","documentation":"Get the total count of entries that can fit in the current buffer\n@returns the elements count","type":"number","entryType":"property"},{"name":"freeElementCount","documentation":"Get the count of free entries that can still be allocated without resizing the buffer\n@returns the free elements count","type":"number","entryType":"property"},{"name":"usedElementCount","documentation":"Get the count of allocated elements\n@returns the allocated elements count","type":"number","entryType":"property"},{"name":"stride","documentation":"Return the size of one element in float\n@returns the size in float","type":"number","entryType":"property"},{"name":"compareValueOffset","documentation":"","type":"number","entryType":"property"},{"name":"sortingAscending","documentation":"","type":"boolean","entryType":"property"},{"name":"_allEntries","documentation":"","type":"any","entryType":"property"},{"name":"_freeEntries","documentation":"","type":"any","entryType":"property"},{"name":"_stride","documentation":"","type":"any","entryType":"property"},{"name":"_lastUsed","documentation":"","type":"any","entryType":"property"},{"name":"_firstFree","documentation":"","type":"any","entryType":"property"},{"name":"_sortTable","documentation":"","type":"any","entryType":"property"},{"name":"_sortedTable","documentation":"","type":"any","entryType":"property"}]},{"name":"FilesInput","documentation":"","type":"typeof FilesInput","constructors":[{"parameters":[{"name":"p_engine","documentation":"","type":"Engine"},{"name":"p_scene","documentation":"","type":"Scene"},{"name":"p_canvas","documentation":"","type":"HTMLCanvasElement"},{"name":"p_sceneLoadedCallback","documentation":"","type":"any"},{"name":"p_progressCallback","documentation":"","type":"any"},{"name":"p_additionnalRenderLoopLogicCallback","documentation":"","type":"any"},{"name":"p_textureLoadingCallback","documentation":"","type":"any"},{"name":"p_startingProcessingFilesCallback","documentation":"","type":"any"}],"returnType":"FilesInput","documentation":""}],"entryType":"class","functions":[{"name":"monitorElementForDragNDrop","documentation":"","type":"(p_elementToMonitor: HTMLElement) => void","functionBody":[{"parameters":[{"name":"p_elementToMonitor","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"renderFunction","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"drag","documentation":"","type":"(e: any) => any","functionBody":[{"parameters":[{"name":"e","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"drop","documentation":"","type":"(eventDrop: any) => any","functionBody":[{"parameters":[{"name":"eventDrop","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"loadFiles","documentation":"","type":"(event: any) => void","functionBody":[{"parameters":[{"name":"event","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"reload","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_engine","documentation":"","type":"any","entryType":"property"},{"name":"_currentScene","documentation":"","type":"any","entryType":"property"},{"name":"_canvas","documentation":"","type":"any","entryType":"property"},{"name":"_sceneLoadedCallback","documentation":"","type":"any","entryType":"property"},{"name":"_progressCallback","documentation":"","type":"any","entryType":"property"},{"name":"_additionnalRenderLoopLogicCallback","documentation":"","type":"any","entryType":"property"},{"name":"_textureLoadingCallback","documentation":"","type":"any","entryType":"property"},{"name":"_startingProcessingFilesCallback","documentation":"","type":"any","entryType":"property"},{"name":"_elementToMonitor","documentation":"","type":"any","entryType":"property"},{"name":"FilesTextures","documentation":"","type":"any[]","entryType":"property"},{"name":"FilesToLoad","documentation":"","type":"any[]","entryType":"property"},{"name":"_sceneFileToLoad","documentation":"","type":"any","entryType":"property"},{"name":"_filesToLoad","documentation":"","type":"any","entryType":"property"}]},{"name":"Gamepads","documentation":"","type":"typeof Gamepads","constructors":[{"parameters":[{"name":"ongamedpadconnected","documentation":"","type":"(gamepad: Gamepad) => void"}],"returnType":"Gamepads","documentation":""}],"entryType":"class","functions":[{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_onGamepadConnected","documentation":"","type":"(evt: any) => any","functionBody":[{"parameters":[{"name":"evt","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_addNewGamepad","documentation":"","type":"(gamepad: any) => any","functionBody":[{"parameters":[{"name":"gamepad","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_onGamepadDisconnected","documentation":"","type":"(evt: any) => any","functionBody":[{"parameters":[{"name":"evt","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_startMonitoringGamepads","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_stopMonitoringGamepads","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_checkGamepadsStatus","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updateGamepadObjects","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"babylonGamepads","documentation":"","type":"any","entryType":"property"},{"name":"oneGamepadConnected","documentation":"","type":"any","entryType":"property"},{"name":"isMonitoring","documentation":"","type":"any","entryType":"property"},{"name":"gamepadEventSupported","documentation":"","type":"any","entryType":"property"},{"name":"gamepadSupportAvailable","documentation":"","type":"any","entryType":"property"},{"name":"_callbackGamepadConnected","documentation":"","type":"any","entryType":"property"},{"name":"_onGamepadConnectedEvent","documentation":"","type":"any","entryType":"property"},{"name":"_onGamepadDisonnectedEvent","documentation":"","type":"any","entryType":"property"},{"name":"gamepadDOMInfo","documentation":"","type":"any","entryType":"property"}]},{"name":"StickValues","documentation":"","type":"typeof StickValues","constructors":[{"parameters":[{"name":"x","documentation":"","type":"any"},{"name":"y","documentation":"","type":"any"}],"returnType":"StickValues","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"x","documentation":"","type":"any","entryType":"property"},{"name":"y","documentation":"","type":"any","entryType":"property"}]},{"name":"Gamepad","documentation":"","type":"typeof Gamepad","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"index","documentation":"","type":"number"},{"name":"browserGamepad","documentation":"","type":"any"}],"returnType":"Gamepad","documentation":""}],"entryType":"class","functions":[{"name":"onleftstickchanged","documentation":"","type":"(callback: (values: StickValues) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(values: StickValues) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onrightstickchanged","documentation":"","type":"(callback: (values: StickValues) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(values: StickValues) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"update","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"id","documentation":"","type":"string","entryType":"property"},{"name":"index","documentation":"","type":"number","entryType":"property"},{"name":"browserGamepad","documentation":"","type":"any","entryType":"property"},{"name":"_leftStick","documentation":"","type":"any","entryType":"property"},{"name":"_rightStick","documentation":"","type":"any","entryType":"property"},{"name":"_onleftstickchanged","documentation":"","type":"any","entryType":"property"},{"name":"_onrightstickchanged","documentation":"","type":"any","entryType":"property"},{"name":"leftStick","documentation":"","type":"StickValues","entryType":"property"},{"name":"rightStick","documentation":"","type":"StickValues","entryType":"property"}]},{"name":"GenericPad","documentation":"","type":"typeof GenericPad","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"index","documentation":"","type":"number"},{"name":"gamepad","documentation":"","type":"any"}],"returnType":"GenericPad","documentation":""}],"entryType":"class","functions":[{"name":"onbuttondown","documentation":"","type":"(callback: (buttonPressed: number) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(buttonPressed: number) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onbuttonup","documentation":"","type":"(callback: (buttonReleased: number) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(buttonReleased: number) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_setButtonValue","documentation":"","type":"(newValue: any, currentValue: any, buttonIndex: any) => any","functionBody":[{"parameters":[{"name":"newValue","documentation":"","type":"any"},{"name":"currentValue","documentation":"","type":"any"},{"name":"buttonIndex","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"update","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"id","documentation":"","type":"string","entryType":"property"},{"name":"index","documentation":"","type":"number","entryType":"property"},{"name":"gamepad","documentation":"","type":"any","entryType":"property"},{"name":"_buttons","documentation":"","type":"any","entryType":"property"},{"name":"_onbuttondown","documentation":"","type":"any","entryType":"property"},{"name":"_onbuttonup","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Gamepad"]},{"name":"Xbox360Pad","documentation":"","type":"typeof Xbox360Pad","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"index","documentation":"","type":"number"},{"name":"browserGamepad","documentation":"","type":"any"}],"returnType":"Xbox360Pad","documentation":""}],"entryType":"class","functions":[{"name":"onlefttriggerchanged","documentation":"","type":"(callback: (value: number) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(value: number) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onrighttriggerchanged","documentation":"","type":"(callback: (value: number) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(value: number) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onbuttondown","documentation":"","type":"(callback: (buttonPressed: Xbox360Button) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(buttonPressed: Xbox360Button) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"onbuttonup","documentation":"","type":"(callback: (buttonReleased: Xbox360Button) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(buttonReleased: Xbox360Button) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"ondpaddown","documentation":"","type":"(callback: (dPadPressed: Xbox360Dpad) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(dPadPressed: Xbox360Dpad) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"ondpadup","documentation":"","type":"(callback: (dPadReleased: Xbox360Dpad) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"","type":"(dPadReleased: Xbox360Dpad) => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_setButtonValue","documentation":"","type":"(newValue: any, currentValue: any, buttonType: any) => any","functionBody":[{"parameters":[{"name":"newValue","documentation":"","type":"any"},{"name":"currentValue","documentation":"","type":"any"},{"name":"buttonType","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_setDPadValue","documentation":"","type":"(newValue: any, currentValue: any, buttonType: any) => any","functionBody":[{"parameters":[{"name":"newValue","documentation":"","type":"any"},{"name":"currentValue","documentation":"","type":"any"},{"name":"buttonType","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"update","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_leftTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_rightTrigger","documentation":"","type":"any","entryType":"property"},{"name":"_onlefttriggerchanged","documentation":"","type":"any","entryType":"property"},{"name":"_onrighttriggerchanged","documentation":"","type":"any","entryType":"property"},{"name":"_onbuttondown","documentation":"","type":"any","entryType":"property"},{"name":"_onbuttonup","documentation":"","type":"any","entryType":"property"},{"name":"_ondpaddown","documentation":"","type":"any","entryType":"property"},{"name":"_ondpadup","documentation":"","type":"any","entryType":"property"},{"name":"_buttonA","documentation":"","type":"any","entryType":"property"},{"name":"_buttonB","documentation":"","type":"any","entryType":"property"},{"name":"_buttonX","documentation":"","type":"any","entryType":"property"},{"name":"_buttonY","documentation":"","type":"any","entryType":"property"},{"name":"_buttonBack","documentation":"","type":"any","entryType":"property"},{"name":"_buttonStart","documentation":"","type":"any","entryType":"property"},{"name":"_buttonLB","documentation":"","type":"any","entryType":"property"},{"name":"_buttonRB","documentation":"","type":"any","entryType":"property"},{"name":"_buttonLeftStick","documentation":"","type":"any","entryType":"property"},{"name":"_buttonRightStick","documentation":"","type":"any","entryType":"property"},{"name":"_dPadUp","documentation":"","type":"any","entryType":"property"},{"name":"_dPadDown","documentation":"","type":"any","entryType":"property"},{"name":"_dPadLeft","documentation":"","type":"any","entryType":"property"},{"name":"_dPadRight","documentation":"","type":"any","entryType":"property"},{"name":"leftTrigger","documentation":"","type":"number","entryType":"property"},{"name":"rightTrigger","documentation":"","type":"number","entryType":"property"},{"name":"buttonA","documentation":"","type":"number","entryType":"property"},{"name":"buttonB","documentation":"","type":"number","entryType":"property"},{"name":"buttonX","documentation":"","type":"number","entryType":"property"},{"name":"buttonY","documentation":"","type":"number","entryType":"property"},{"name":"buttonStart","documentation":"","type":"number","entryType":"property"},{"name":"buttonBack","documentation":"","type":"number","entryType":"property"},{"name":"buttonLB","documentation":"","type":"number","entryType":"property"},{"name":"buttonRB","documentation":"","type":"number","entryType":"property"},{"name":"buttonLeftStick","documentation":"","type":"number","entryType":"property"},{"name":"buttonRightStick","documentation":"","type":"number","entryType":"property"},{"name":"dPadUp","documentation":"","type":"number","entryType":"property"},{"name":"dPadDown","documentation":"","type":"number","entryType":"property"},{"name":"dPadLeft","documentation":"","type":"number","entryType":"property"},{"name":"dPadRight","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Gamepad"]},{"name":"DefaultLoadingScreen","documentation":"","type":"typeof DefaultLoadingScreen","constructors":[{"parameters":[{"name":"_renderingCanvas","documentation":"","type":"HTMLCanvasElement"},{"name":"_loadingText","documentation":"","type":"string"},{"name":"_loadingDivBackgroundColor","documentation":"","type":"string"}],"returnType":"DefaultLoadingScreen","documentation":""}],"entryType":"class","functions":[{"name":"displayLoadingUI","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"hideLoadingUI","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_renderingCanvas","documentation":"","type":"any","entryType":"property"},{"name":"_loadingText","documentation":"","type":"any","entryType":"property"},{"name":"_loadingDivBackgroundColor","documentation":"","type":"any","entryType":"property"},{"name":"_loadingDiv","documentation":"","type":"any","entryType":"property"},{"name":"_loadingTextDiv","documentation":"","type":"any","entryType":"property"},{"name":"loadingUIText","documentation":"","type":"string","entryType":"property"},{"name":"loadingUIBackgroundColor","documentation":"","type":"string","entryType":"property"},{"name":"_resizeLoadingUI","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.ILoadingScreen"]},{"name":"EventState","documentation":"A class serves as a medium between the observable and its observers","type":"typeof EventState","constructors":[{"parameters":[{"name":"mask","documentation":"","type":"number"},{"name":"skipNextObservers","documentation":"","type":"boolean"}],"returnType":"EventState","documentation":"If the callback of a given Observer set skipNextObservers to true the following observers will be ignored"}],"entryType":"class","functions":[{"name":"initalize","documentation":"","type":"(mask: number, skipNextObservers?: boolean) => EventState","functionBody":[{"parameters":[{"name":"mask","documentation":"","type":"number"},{"name":"skipNextObservers","documentation":"","type":"boolean"}],"returnType":"EventState","documentation":""}],"entryType":"function"}],"properties":[{"name":"skipNextObservers","documentation":"An Observer can set this property to true to prevent subsequent observers of being notified","type":"boolean","entryType":"property"},{"name":"mask","documentation":"Get the mask value that were used to trigger the event corresponding to this EventState object","type":"number","entryType":"property"}]},{"name":"Observer","documentation":"Represent an Observer registered to a given Observable object.","type":"typeof Observer","constructors":[{"parameters":[{"name":"callback","documentation":"","type":"(eventData: T, eventState: EventState) => void"},{"name":"mask","documentation":"","type":"number"}],"returnType":"Observer<T>","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"callback","documentation":"","type":"(eventData: T, eventState: EventState) => void","entryType":"property"},{"name":"mask","documentation":"","type":"number","entryType":"property"}]},{"name":"Observable","documentation":"The Observable class is a simple implementation of the Observable pattern.\nThere's one slight particularity though: a given Observable can notify its observer using a particular mask value, only the Observers registered with this mask value will be notified.\nThis enable a more fine grained execution without having to rely on multiple different Observable objects.\nFor instance you may have a given Observable that have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn Left (mask = 0X08).\nA given observer can register itself with only Move and Stop (mask = 0x03), then it will only be notified when one of these two occurs and will never be for Turn Left/Right.","type":"typeof Observable","constructors":[{"parameters":[],"returnType":"Observable<T>","documentation":""}],"entryType":"class","functions":[{"name":"add","documentation":"Create a new Observer with the specified callback","type":"(callback: (eventData: T, eventState: EventState) => void, mask?: number, insertFirst?: boolean) ...","functionBody":[{"parameters":[{"name":"callback","documentation":"the callback that will be executed for that Observer","type":"(eventData: T, eventState: EventState) => void"},{"name":"mask","documentation":"the mask used to filter observers","type":"number"},{"name":"insertFirst","documentation":"if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present.","type":"boolean"}],"returnType":"Observer<T>","documentation":"Create a new Observer with the specified callback"}],"entryType":"function"},{"name":"remove","documentation":"Remove an Observer from the Observable object","type":"(observer: Observer<T>) => boolean","functionBody":[{"parameters":[{"name":"observer","documentation":"the instance of the Observer to remove. If it doesn't belong to this Observable, false will be returned.","type":"Observer<T>"}],"returnType":"boolean","documentation":"Remove an Observer from the Observable object"}],"entryType":"function"},{"name":"removeCallback","documentation":"Remove a callback from the Observable object","type":"(callback: (eventData: T, eventState: EventState) => void) => boolean","functionBody":[{"parameters":[{"name":"callback","documentation":"the callback to remove. If it doesn't belong to this Observable, false will be returned.","type":"(eventData: T, eventState: EventState) => void"}],"returnType":"boolean","documentation":"Remove a callback from the Observable object"}],"entryType":"function"},{"name":"notifyObservers","documentation":"Notify all Observers by calling their respective callback with the given data\nWill return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute","type":"(eventData: T, mask?: number) => boolean","functionBody":[{"parameters":[{"name":"eventData","documentation":"","type":"T"},{"name":"mask","documentation":"","type":"number"}],"returnType":"boolean","documentation":"Notify all Observers by calling their respective callback with the given data\nWill return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute"}],"entryType":"function"},{"name":"hasObservers","documentation":"return true is the Observable has at least one Observer registered","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":"return true is the Observable has at least one Observer registered"}],"entryType":"function"},{"name":"clear","documentation":"Clear the list of observers","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Clear the list of observers"}],"entryType":"function"},{"name":"clone","documentation":"Clone the current observable","type":"() => Observable<T>","functionBody":[{"parameters":[],"returnType":"Observable<T>","documentation":"Clone the current observable"}],"entryType":"function"}],"properties":[{"name":"_observers","documentation":"","type":"Observer<T>[]","entryType":"property"},{"name":"_eventState","documentation":"","type":"any","entryType":"property"}]},{"name":"PackedRect","documentation":"This class describe a rectangle that were added to the map.\nYou have access to its coordinates either in pixel or normalized (UV)","type":"typeof PackedRect","constructors":[{"parameters":[{"name":"root","documentation":"","type":"PackedRect"},{"name":"parent","documentation":"","type":"PackedRect"},{"name":"pos","documentation":"","type":"Vector2"},{"name":"size","documentation":"","type":"Size"}],"returnType":"PackedRect","documentation":""}],"entryType":"class","functions":[{"name":"getUVsForCustomSize","documentation":"You may have allocated the PackedRect using over-provisioning (you allocated more than you need in order to prevent frequent deallocations/reallocations) and then using only a part of the PackRect.\nThis method will return the UVs for this part by given the custom size of what you really use","type":"(customSize: Size) => Vector2[]","functionBody":[{"parameters":[{"name":"customSize","documentation":"must be less/equal to the allocated size, UV will be compute from this","type":"Size"}],"returnType":"Vector2[]","documentation":"You may have allocated the PackedRect using over-provisioning (you allocated more than you need in order to prevent frequent deallocations/reallocations) and then using only a part of the PackRect.\nThis method will return the UVs for this part by given the custom size of what you really use"}],"entryType":"function"},{"name":"freeContent","documentation":"Free this rectangle from the map.\nCall this method when you no longer need the rectangle to be in the map.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Free this rectangle from the map.\nCall this method when you no longer need the rectangle to be in the map."}],"entryType":"function"},{"name":"findAndSplitNode","documentation":"","type":"(contentSize: Size) => PackedRect","functionBody":[{"parameters":[{"name":"contentSize","documentation":"","type":"Size"}],"returnType":"PackedRect","documentation":""}],"entryType":"function"},{"name":"findNode","documentation":"","type":"(size: any) => any","functionBody":[{"parameters":[{"name":"size","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"splitNode","documentation":"","type":"(contentSize: any) => any","functionBody":[{"parameters":[{"name":"contentSize","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"attemptDefrag","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"clearNode","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"evalFreeSize","documentation":"","type":"(size: number) => number","functionBody":[{"parameters":[{"name":"size","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"pos","documentation":"@returns the position of this node into the map","type":"Vector2","entryType":"property"},{"name":"contentSize","documentation":"@returns the size of the rectangle this node handles","type":"Size","entryType":"property"},{"name":"UVs","documentation":"Compute the UV of the top/left, top/right, bottom/right, bottom/left points of the rectangle this node handles into the map\n@returns And array of 4 Vector2, containing UV coordinates for the four corners of the Rectangle into the map","type":"Vector2[]","entryType":"property"},{"name":"isUsed","documentation":"","type":"boolean","entryType":"property"},{"name":"isRecursiveFree","documentation":"","type":"any","entryType":"property"},{"name":"_root","documentation":"","type":"PackedRect","entryType":"property"},{"name":"_parent","documentation":"","type":"PackedRect","entryType":"property"},{"name":"_contentSize","documentation":"","type":"any","entryType":"property"},{"name":"_initialSize","documentation":"","type":"any","entryType":"property"},{"name":"_leftNode","documentation":"","type":"any","entryType":"property"},{"name":"_rightNode","documentation":"","type":"any","entryType":"property"},{"name":"_bottomNode","documentation":"","type":"any","entryType":"property"},{"name":"_pos","documentation":"","type":"any","entryType":"property"},{"name":"_size","documentation":"","type":"Size","entryType":"property"}]},{"name":"RectPackingMap","documentation":"The purpose of this class is to pack several Rectangles into a big map, while trying to fit everything as optimally as possible.\nThis class is typically used to build lightmaps, sprite map or to pack several little textures into a big one.\nNote that this class allows allocated Rectangles to be freed: that is the map is dynamically maintained so you can add/remove rectangle based on their life-cycle.","type":"typeof RectPackingMap","constructors":[{"parameters":[{"name":"size","documentation":"The dimension of the rectangle that will contain all the sub ones.","type":"Size"}],"returnType":"RectPackingMap","documentation":"Create an instance of the object with a dimension using the given size"}],"entryType":"class","functions":[{"name":"addRect","documentation":"Add a rectangle, finding the best location to store it into the map\n@return the Node containing the rectangle information, or null if we couldn't find a free spot","type":"(size: Size) => PackedRect","functionBody":[{"parameters":[{"name":"size","documentation":"the dimension of the rectangle to store","type":"Size"}],"returnType":"PackedRect","documentation":"Add a rectangle, finding the best location to store it into the map\n@return the Node containing the rectangle information, or null if we couldn't find a free spot"}],"entryType":"function"}],"properties":[{"name":"freeSpace","documentation":"Return the current space free normalized between [0;1]\n@returns {}","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.PackedRect"]},{"name":"SceneOptimization","documentation":"","type":"typeof SceneOptimization","constructors":[{"parameters":[{"name":"priority","documentation":"","type":"number"}],"returnType":"SceneOptimization","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"priority","documentation":"","type":"number","entryType":"property"},{"name":"apply","documentation":"","type":"(scene: Scene) => boolean","entryType":"property"}]},{"name":"TextureOptimization","documentation":"","type":"typeof TextureOptimization","constructors":[{"parameters":[{"name":"priority","documentation":"","type":"number"},{"name":"maximumSize","documentation":"","type":"number"}],"returnType":"TextureOptimization","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"priority","documentation":"","type":"number","entryType":"property"},{"name":"maximumSize","documentation":"","type":"number","entryType":"property"},{"name":"apply","documentation":"","type":"(scene: Scene) => boolean","entryType":"property"}],"heritageClauses":["BABYLON.SceneOptimization"]},{"name":"HardwareScalingOptimization","documentation":"","type":"typeof HardwareScalingOptimization","constructors":[{"parameters":[{"name":"priority","documentation":"","type":"number"},{"name":"maximumScale","documentation":"","type":"number"}],"returnType":"HardwareScalingOptimization","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"priority","documentation":"","type":"number","entryType":"property"},{"name":"maximumScale","documentation":"","type":"number","entryType":"property"},{"name":"_currentScale","documentation":"","type":"any","entryType":"property"},{"name":"apply","documentation":"","type":"(scene: Scene) => boolean","entryType":"property"}],"heritageClauses":["BABYLON.SceneOptimization"]},{"name":"ShadowsOptimization","documentation":"","type":"typeof ShadowsOptimization","constructors":[{"parameters":[{"name":"priority","documentation":"","type":"number"}],"returnType":"ShadowsOptimization","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"apply","documentation":"","type":"(scene: Scene) => boolean","entryType":"property"}],"heritageClauses":["BABYLON.SceneOptimization"]},{"name":"PostProcessesOptimization","documentation":"","type":"typeof PostProcessesOptimization","constructors":[{"parameters":[{"name":"priority","documentation":"","type":"number"}],"returnType":"PostProcessesOptimization","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"apply","documentation":"","type":"(scene: Scene) => boolean","entryType":"property"}],"heritageClauses":["BABYLON.SceneOptimization"]},{"name":"LensFlaresOptimization","documentation":"","type":"typeof LensFlaresOptimization","constructors":[{"parameters":[{"name":"priority","documentation":"","type":"number"}],"returnType":"LensFlaresOptimization","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"apply","documentation":"","type":"(scene: Scene) => boolean","entryType":"property"}],"heritageClauses":["BABYLON.SceneOptimization"]},{"name":"ParticlesOptimization","documentation":"","type":"typeof ParticlesOptimization","constructors":[{"parameters":[{"name":"priority","documentation":"","type":"number"}],"returnType":"ParticlesOptimization","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"apply","documentation":"","type":"(scene: Scene) => boolean","entryType":"property"}],"heritageClauses":["BABYLON.SceneOptimization"]},{"name":"RenderTargetsOptimization","documentation":"","type":"typeof RenderTargetsOptimization","constructors":[{"parameters":[{"name":"priority","documentation":"","type":"number"}],"returnType":"RenderTargetsOptimization","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"apply","documentation":"","type":"(scene: Scene) => boolean","entryType":"property"}],"heritageClauses":["BABYLON.SceneOptimization"]},{"name":"MergeMeshesOptimization","documentation":"","type":"typeof MergeMeshesOptimization","constructors":[{"parameters":[{"name":"priority","documentation":"","type":"number"}],"returnType":"MergeMeshesOptimization","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"_UpdateSelectionTree","documentation":"","type":"boolean","entryType":"property"},{"name":"UpdateSelectionTree","documentation":"","type":"boolean","entryType":"property"},{"name":"_canBeMerged","documentation":"","type":"any","entryType":"property"},{"name":"apply","documentation":"","type":"(scene: Scene, updateSelectionTree?: boolean) => boolean","entryType":"property"}],"heritageClauses":["BABYLON.SceneOptimization"]},{"name":"SceneOptimizerOptions","documentation":"","type":"typeof SceneOptimizerOptions","constructors":[{"parameters":[{"name":"targetFrameRate","documentation":"","type":"number"},{"name":"trackerDuration","documentation":"","type":"number"}],"returnType":"SceneOptimizerOptions","documentation":""}],"entryType":"class","functions":[{"name":"LowDegradationAllowed","documentation":"","type":"(targetFrameRate?: number) => SceneOptimizerOptions","functionBody":[{"parameters":[{"name":"targetFrameRate","documentation":"","type":"number"}],"returnType":"SceneOptimizerOptions","documentation":""}],"entryType":"function"},{"name":"ModerateDegradationAllowed","documentation":"","type":"(targetFrameRate?: number) => SceneOptimizerOptions","functionBody":[{"parameters":[{"name":"targetFrameRate","documentation":"","type":"number"}],"returnType":"SceneOptimizerOptions","documentation":""}],"entryType":"function"},{"name":"HighDegradationAllowed","documentation":"","type":"(targetFrameRate?: number) => SceneOptimizerOptions","functionBody":[{"parameters":[{"name":"targetFrameRate","documentation":"","type":"number"}],"returnType":"SceneOptimizerOptions","documentation":""}],"entryType":"function"}],"properties":[{"name":"targetFrameRate","documentation":"","type":"number","entryType":"property"},{"name":"trackerDuration","documentation":"","type":"number","entryType":"property"},{"name":"optimizations","documentation":"","type":"SceneOptimization[]","entryType":"property"}]},{"name":"SceneOptimizer","documentation":"","type":"typeof SceneOptimizer","constructors":[{"parameters":[],"returnType":"SceneOptimizer","documentation":""}],"entryType":"class","functions":[{"name":"_CheckCurrentState","documentation":"","type":"(scene: Scene, options: SceneOptimizerOptions, currentPriorityLevel: number, onSuccess?: () => vo...","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"options","documentation":"","type":"SceneOptimizerOptions"},{"name":"currentPriorityLevel","documentation":"","type":"number"},{"name":"onSuccess","documentation":"","type":"() => void"},{"name":"onFailure","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"OptimizeAsync","documentation":"","type":"(scene: Scene, options?: SceneOptimizerOptions, onSuccess?: () => void, onFailure?: () => void) =...","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"options","documentation":"","type":"SceneOptimizerOptions"},{"name":"onSuccess","documentation":"","type":"() => void"},{"name":"onFailure","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"SceneSerializer","documentation":"","type":"typeof SceneSerializer","constructors":[{"parameters":[],"returnType":"SceneSerializer","documentation":""}],"entryType":"class","functions":[{"name":"ClearCache","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"Serialize","documentation":"","type":"(scene: Scene) => any","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"SerializeMesh","documentation":"","type":"(toSerialize: any, withParents?: boolean, withChildren?: boolean) => any","functionBody":[{"parameters":[{"name":"toSerialize","documentation":"","type":"any"},{"name":"withParents","documentation":"","type":"boolean"},{"name":"withChildren","documentation":"","type":"boolean"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"SmartArray","documentation":"","type":"typeof SmartArray","constructors":[{"parameters":[{"name":"capacity","documentation":"","type":"number"}],"returnType":"SmartArray<T>","documentation":""}],"entryType":"class","functions":[{"name":"push","documentation":"","type":"(value: any) => void","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"pushNoDuplicate","documentation":"","type":"(value: any) => boolean","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"any"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"sort","documentation":"","type":"(compareFn: any) => void","functionBody":[{"parameters":[{"name":"compareFn","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"reset","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"concat","documentation":"","type":"(array: any) => void","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"concatWithNoDuplicate","documentation":"","type":"(array: any) => void","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"indexOf","documentation":"","type":"(value: any) => number","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"any"}],"returnType":"number","documentation":""}],"entryType":"function"}],"properties":[{"name":"data","documentation":"","type":"T[]","entryType":"property"},{"name":"length","documentation":"","type":"number","entryType":"property"},{"name":"_id","documentation":"","type":"any","entryType":"property"},{"name":"_duplicateId","documentation":"","type":"any","entryType":"property"},{"name":"_GlobalId","documentation":"","type":"any","entryType":"property"}]},{"name":"StringDictionary","documentation":"This class implement a typical dictionary using a string as key and the generic type T as value.\nThe underlying implementation relies on an associative array to ensure the best performances.\nThe value can be anything including 'null' but except 'undefined'","type":"typeof StringDictionary","constructors":[{"parameters":[],"returnType":"StringDictionary<T>","documentation":""}],"entryType":"class","functions":[{"name":"get","documentation":"Get a value based from its key\n@return the value if found, otherwise undefined is returned","type":"(key: string) => T","functionBody":[{"parameters":[{"name":"key","documentation":"the given key to get the matching value from","type":"string"}],"returnType":"T","documentation":"Get a value based from its key\n@return the value if found, otherwise undefined is returned"}],"entryType":"function"},{"name":"getOrAddWithFactory","documentation":"Get a value from its key or add it if it doesn't exist.\nThis method will ensure you that a given key/data will be present in the dictionary.\n@return the value corresponding to the key.","type":"(key: string, factory: (key: string) => T) => T","functionBody":[{"parameters":[{"name":"key","documentation":"the given key to get the matching value from","type":"string"},{"name":"factory","documentation":"the factory that will create the value if the key is not present in the dictionary.\nThe factory will only be invoked if there's no data for the given key.","type":"(key: string) => T"}],"returnType":"T","documentation":"Get a value from its key or add it if it doesn't exist.\nThis method will ensure you that a given key/data will be present in the dictionary.\n@return the value corresponding to the key."}],"entryType":"function"},{"name":"getOrAdd","documentation":"Get a value from its key if present in the dictionary otherwise add it\n@return the value corresponding to the key","type":"(key: string, val: T) => T","functionBody":[{"parameters":[{"name":"key","documentation":"the key to get the value from","type":"string"},{"name":"val","documentation":"if there's no such key/value pair in the dictionary add it with this value","type":"T"}],"returnType":"T","documentation":"Get a value from its key if present in the dictionary otherwise add it\n@return the value corresponding to the key"}],"entryType":"function"},{"name":"contains","documentation":"Check if there's a given key in the dictionary\n@return true if the key is present, false otherwise","type":"(key: any) => boolean","functionBody":[{"parameters":[{"name":"key","documentation":"the key to check for","type":"any"}],"returnType":"boolean","documentation":"Check if there's a given key in the dictionary\n@return true if the key is present, false otherwise"}],"entryType":"function"},{"name":"add","documentation":"Add a new key and its corresponding value\n@return true if the operation completed successfully, false if we couldn't insert the key/value because there was already this key in the dictionary","type":"(key: string, value: T) => boolean","functionBody":[{"parameters":[{"name":"key","documentation":"the key to add","type":"string"},{"name":"value","documentation":"the value corresponding to the key","type":"T"}],"returnType":"boolean","documentation":"Add a new key and its corresponding value\n@return true if the operation completed successfully, false if we couldn't insert the key/value because there was already this key in the dictionary"}],"entryType":"function"},{"name":"set","documentation":"","type":"(key: string, value: T) => boolean","functionBody":[{"parameters":[{"name":"key","documentation":"","type":"string"},{"name":"value","documentation":"","type":"T"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"remove","documentation":"Remove a key/value from the dictionary.\n@return true if the item was successfully deleted, false if no item with such key exist in the dictionary","type":"(key: string) => boolean","functionBody":[{"parameters":[{"name":"key","documentation":"the key to remove","type":"string"}],"returnType":"boolean","documentation":"Remove a key/value from the dictionary.\n@return true if the item was successfully deleted, false if no item with such key exist in the dictionary"}],"entryType":"function"},{"name":"clear","documentation":"Clear the whole content of the dictionary","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Clear the whole content of the dictionary"}],"entryType":"function"},{"name":"forEach","documentation":"Execute a callback on each key/val of the dictionary.\nNote that you can remove any element in this dictionary in the callback implementation","type":"(callback: (key: string, val: T) => void) => void","functionBody":[{"parameters":[{"name":"callback","documentation":"the callback to execute on a given key/value pair","type":"(key: string, val: T) => void"}],"returnType":"void","documentation":"Execute a callback on each key/val of the dictionary.\nNote that you can remove any element in this dictionary in the callback implementation"}],"entryType":"function"},{"name":"first","documentation":"Execute a callback on every occurrence of the dictionary until it returns a valid TRes object.\nIf the callback returns null or undefined the method will iterate to the next key/value pair\nNote that you can remove any element in this dictionary in the callback implementation","type":"<TRes>(callback: (key: string, val: T) => TRes) => TRes","functionBody":[{"parameters":[{"name":"callback","documentation":"the callback to execute, if it return a valid T instanced object the enumeration will stop and the object will be returned","type":"(key: string, val: T) => TRes"}],"returnType":"TRes","documentation":"Execute a callback on every occurrence of the dictionary until it returns a valid TRes object.\nIf the callback returns null or undefined the method will iterate to the next key/value pair\nNote that you can remove any element in this dictionary in the callback implementation"}],"entryType":"function"}],"properties":[{"name":"count","documentation":"","type":"number","entryType":"property"},{"name":"_count","documentation":"","type":"any","entryType":"property"},{"name":"_data","documentation":"","type":"any","entryType":"property"}]},{"name":"Tags","documentation":"","type":"typeof Tags","constructors":[{"parameters":[],"returnType":"Tags","documentation":""}],"entryType":"class","functions":[{"name":"EnableFor","documentation":"","type":"(obj: any) => void","functionBody":[{"parameters":[{"name":"obj","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"DisableFor","documentation":"","type":"(obj: any) => void","functionBody":[{"parameters":[{"name":"obj","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"HasTags","documentation":"","type":"(obj: any) => boolean","functionBody":[{"parameters":[{"name":"obj","documentation":"","type":"any"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"GetTags","documentation":"","type":"(obj: any, asString?: boolean) => any","functionBody":[{"parameters":[{"name":"obj","documentation":"","type":"any"},{"name":"asString","documentation":"","type":"boolean"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"AddTagsTo","documentation":"","type":"(obj: any, tagsString: string) => void","functionBody":[{"parameters":[{"name":"obj","documentation":"","type":"any"},{"name":"tagsString","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_AddTagTo","documentation":"","type":"(obj: any, tag: string) => void","functionBody":[{"parameters":[{"name":"obj","documentation":"","type":"any"},{"name":"tag","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"RemoveTagsFrom","documentation":"","type":"(obj: any, tagsString: string) => void","functionBody":[{"parameters":[{"name":"obj","documentation":"","type":"any"},{"name":"tagsString","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_RemoveTagFrom","documentation":"","type":"(obj: any, tag: string) => void","functionBody":[{"parameters":[{"name":"obj","documentation":"","type":"any"},{"name":"tag","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"MatchesQuery","documentation":"","type":"(obj: any, tagsQuery: string) => boolean","functionBody":[{"parameters":[{"name":"obj","documentation":"","type":"any"},{"name":"tagsQuery","documentation":"","type":"string"}],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"Tools","documentation":"","type":"typeof Tools","constructors":[{"parameters":[],"returnType":"Tools","documentation":""}],"entryType":"class","functions":[{"name":"Instantiate","documentation":"","type":"(className: string) => any","functionBody":[{"parameters":[{"name":"className","documentation":"","type":"string"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"SetImmediate","documentation":"","type":"(action: () => void) => void","functionBody":[{"parameters":[{"name":"action","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"IsExponentOfTwo","documentation":"","type":"(value: number) => boolean","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"GetExponentOfTwo","documentation":"","type":"(value: number, max: number) => number","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"number"},{"name":"max","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"GetFilename","documentation":"","type":"(path: string) => string","functionBody":[{"parameters":[{"name":"path","documentation":"","type":"string"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"GetDOMTextContent","documentation":"","type":"(element: HTMLElement) => string","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"ToDegrees","documentation":"","type":"(angle: number) => number","functionBody":[{"parameters":[{"name":"angle","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"ToRadians","documentation":"","type":"(angle: number) => number","functionBody":[{"parameters":[{"name":"angle","documentation":"","type":"number"}],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"EncodeArrayBufferTobase64","documentation":"","type":"(buffer: ArrayBuffer) => string","functionBody":[{"parameters":[{"name":"buffer","documentation":"","type":"ArrayBuffer"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"ExtractMinAndMaxIndexed","documentation":"","type":"(positions: number[] | Float32Array, indices: number[] | Int32Array, indexStart: number, indexCou...","functionBody":[{"parameters":[{"name":"positions","documentation":"","type":"number[] | Float32Array"},{"name":"indices","documentation":"","type":"number[] | Int32Array"},{"name":"indexStart","documentation":"","type":"number"},{"name":"indexCount","documentation":"","type":"number"},{"name":"bias","documentation":"","type":"Vector2"}],"returnType":"{ minimum: Vector3; maximum: Vector3; }","documentation":""}],"entryType":"function"},{"name":"ExtractMinAndMax","documentation":"","type":"(positions: number[] | Float32Array, start: number, count: number, bias?: Vector2, stride?: numbe...","functionBody":[{"parameters":[{"name":"positions","documentation":"","type":"number[] | Float32Array"},{"name":"start","documentation":"","type":"number"},{"name":"count","documentation":"","type":"number"},{"name":"bias","documentation":"","type":"Vector2"},{"name":"stride","documentation":"","type":"number"}],"returnType":"{ minimum: Vector3; maximum: Vector3; }","documentation":""}],"entryType":"function"},{"name":"Vector2ArrayFeeder","documentation":"","type":"(array: Vector2[] | Float32Array) => (i: any) => Vector2","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"Vector2[] | Float32Array"}],"returnType":"(i: any) => Vector2","documentation":""}],"entryType":"function"},{"name":"ExtractMinAndMaxVector2","documentation":"","type":"(feeder: (index: number) => Vector2, bias?: Vector2) => { minimum: Vector2; maximum: Vector2; }","functionBody":[{"parameters":[{"name":"feeder","documentation":"","type":"(index: number) => Vector2"},{"name":"bias","documentation":"","type":"Vector2"}],"returnType":"{ minimum: Vector2; maximum: Vector2; }","documentation":""}],"entryType":"function"},{"name":"MakeArray","documentation":"","type":"(obj: any, allowsNullUndefined?: boolean) => any[]","functionBody":[{"parameters":[{"name":"obj","documentation":"","type":"any"},{"name":"allowsNullUndefined","documentation":"","type":"boolean"}],"returnType":"any[]","documentation":""}],"entryType":"function"},{"name":"GetPointerPrefix","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"QueueNewFrame","documentation":"","type":"(func: any, requester?: any) => void","functionBody":[{"parameters":[{"name":"func","documentation":"- the function to be called","type":"any"},{"name":"requester","documentation":"- the object that will request the next frame. Falls back to window.","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"RequestFullscreen","documentation":"","type":"(element: any) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"ExitFullscreen","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"SetCorsBehavior","documentation":"","type":"(url: string, img: HTMLImageElement) => string","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"string"},{"name":"img","documentation":"","type":"HTMLImageElement"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"CleanUrl","documentation":"","type":"(url: string) => string","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"string"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"LoadImage","documentation":"","type":"(url: any, onload: any, onerror: any, database: any) => HTMLImageElement","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"any"},{"name":"onload","documentation":"","type":"any"},{"name":"onerror","documentation":"","type":"any"},{"name":"database","documentation":"","type":"any"}],"returnType":"HTMLImageElement","documentation":""}],"entryType":"function"},{"name":"LoadFile","documentation":"","type":"(url: string, callback: (data: any) => void, progressCallBack?: () => void, database?: any, useAr...","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"string"},{"name":"callback","documentation":"","type":"(data: any) => void"},{"name":"progressCallBack","documentation":"","type":"() => void"},{"name":"database","documentation":"","type":"any"},{"name":"useArrayBuffer","documentation":"","type":"boolean"},{"name":"onError","documentation":"","type":"() => void"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"ReadFileAsDataURL","documentation":"","type":"(fileToLoad: any, callback: any, progressCallback: any) => void","functionBody":[{"parameters":[{"name":"fileToLoad","documentation":"","type":"any"},{"name":"callback","documentation":"","type":"any"},{"name":"progressCallback","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"ReadFile","documentation":"","type":"(fileToLoad: any, callback: any, progressCallBack: any, useArrayBuffer?: boolean) => void","functionBody":[{"parameters":[{"name":"fileToLoad","documentation":"","type":"any"},{"name":"callback","documentation":"","type":"any"},{"name":"progressCallBack","documentation":"","type":"any"},{"name":"useArrayBuffer","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"FileAsURL","documentation":"","type":"(content: string) => string","functionBody":[{"parameters":[{"name":"content","documentation":"","type":"string"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"Format","documentation":"","type":"(value: number, decimals?: number) => string","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"number"},{"name":"decimals","documentation":"","type":"number"}],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"CheckExtends","documentation":"","type":"(v: Vector3, min: Vector3, max: Vector3) => void","functionBody":[{"parameters":[{"name":"v","documentation":"","type":"Vector3"},{"name":"min","documentation":"","type":"Vector3"},{"name":"max","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"DeepCopy","documentation":"","type":"(source: any, destination: any, doNotCopyList?: string[], mustCopyList?: string[]) => void","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"any"},{"name":"destination","documentation":"","type":"any"},{"name":"doNotCopyList","documentation":"","type":"string[]"},{"name":"mustCopyList","documentation":"","type":"string[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"IsEmpty","documentation":"","type":"(obj: any) => boolean","functionBody":[{"parameters":[{"name":"obj","documentation":"","type":"any"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"RegisterTopRootEvents","documentation":"","type":"(events: { name: string; handler: EventListener; }[]) => void","functionBody":[{"parameters":[{"name":"events","documentation":"","type":"{ name: string; handler: EventListener; }[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"UnregisterTopRootEvents","documentation":"","type":"(events: { name: string; handler: EventListener; }[]) => void","functionBody":[{"parameters":[{"name":"events","documentation":"","type":"{ name: string; handler: EventListener; }[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"DumpFramebuffer","documentation":"","type":"(width: number, height: number, engine: Engine, successCallback?: (data: string) => void, mimeTyp...","functionBody":[{"parameters":[{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"engine","documentation":"","type":"Engine"},{"name":"successCallback","documentation":"","type":"(data: string) => void"},{"name":"mimeType","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"EncodeScreenshotCanvasData","documentation":"","type":"(successCallback?: (data: string) => void, mimeType?: string) => void","functionBody":[{"parameters":[{"name":"successCallback","documentation":"","type":"(data: string) => void"},{"name":"mimeType","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"CreateScreenshot","documentation":"","type":"(engine: Engine, camera: Camera, size: any, successCallback?: (data: string) => void, mimeType?: ...","functionBody":[{"parameters":[{"name":"engine","documentation":"","type":"Engine"},{"name":"camera","documentation":"","type":"Camera"},{"name":"size","documentation":"","type":"any"},{"name":"successCallback","documentation":"","type":"(data: string) => void"},{"name":"mimeType","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"CreateScreenshotUsingRenderTarget","documentation":"","type":"(engine: Engine, camera: Camera, size: any, successCallback?: (data: string) => void, mimeType?: ...","functionBody":[{"parameters":[{"name":"engine","documentation":"","type":"Engine"},{"name":"camera","documentation":"","type":"Camera"},{"name":"size","documentation":"","type":"any"},{"name":"successCallback","documentation":"","type":"(data: string) => void"},{"name":"mimeType","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"ValidateXHRData","documentation":"","type":"(xhr: XMLHttpRequest, dataType?: number) => boolean","functionBody":[{"parameters":[{"name":"xhr","documentation":"","type":"XMLHttpRequest"},{"name":"dataType","documentation":"","type":"number"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"RandomId","documentation":"Implementation from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#answer-2117523\nBe aware Math.random() could cause collisions, but:\n\"All but 6 of the 128 bits of the ID are randomly generated, which means that for any two ids, there's a 1 in 2^^122 (or 5.3x10^^36) chance they'll collide\"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":"Implementation from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#answer-2117523\nBe aware Math.random() could cause collisions, but:\n\"All but 6 of the 128 bits of the ID are randomly generated, which means that for any two ids, there's a 1 in 2^^122 (or 5.3x10^^36) chance they'll collide\""}],"entryType":"function"},{"name":"_AddLogEntry","documentation":"","type":"(entry: any) => any","functionBody":[{"parameters":[{"name":"entry","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_FormatMessage","documentation":"","type":"(message: any) => any","functionBody":[{"parameters":[{"name":"message","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_LogDisabled","documentation":"","type":"(message: any) => any","functionBody":[{"parameters":[{"name":"message","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_LogEnabled","documentation":"","type":"(message: any) => any","functionBody":[{"parameters":[{"name":"message","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_WarnDisabled","documentation":"","type":"(message: any) => any","functionBody":[{"parameters":[{"name":"message","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_WarnEnabled","documentation":"","type":"(message: any) => any","functionBody":[{"parameters":[{"name":"message","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_ErrorDisabled","documentation":"","type":"(message: any) => any","functionBody":[{"parameters":[{"name":"message","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_ErrorEnabled","documentation":"","type":"(message: any) => any","functionBody":[{"parameters":[{"name":"message","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"ClearLogCache","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_StartPerformanceCounterDisabled","documentation":"","type":"(counterName: string, condition?: boolean) => void","functionBody":[{"parameters":[{"name":"counterName","documentation":"","type":"string"},{"name":"condition","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_EndPerformanceCounterDisabled","documentation":"","type":"(counterName: string, condition?: boolean) => void","functionBody":[{"parameters":[{"name":"counterName","documentation":"","type":"string"},{"name":"condition","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_StartUserMark","documentation":"","type":"(counterName: string, condition?: boolean) => void","functionBody":[{"parameters":[{"name":"counterName","documentation":"","type":"string"},{"name":"condition","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_EndUserMark","documentation":"","type":"(counterName: string, condition?: boolean) => void","functionBody":[{"parameters":[{"name":"counterName","documentation":"","type":"string"},{"name":"condition","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_StartPerformanceConsole","documentation":"","type":"(counterName: string, condition?: boolean) => void","functionBody":[{"parameters":[{"name":"counterName","documentation":"","type":"string"},{"name":"condition","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_EndPerformanceConsole","documentation":"","type":"(counterName: string, condition?: boolean) => void","functionBody":[{"parameters":[{"name":"counterName","documentation":"","type":"string"},{"name":"condition","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getClassName","documentation":"This method will return the name of the class used to create the instance of the given object.\nIt will works only on Javascript basic data types (number, string, ...) and instance of class declared with the @className decorator.\n@return the name of the class, will be \"object\" for a custom data type not using the @className decorator","type":"(object: any, isType?: boolean) => string","functionBody":[{"parameters":[{"name":"object","documentation":"the object to get the class name from","type":"any"},{"name":"isType","documentation":"","type":"boolean"}],"returnType":"string","documentation":"This method will return the name of the class used to create the instance of the given object.\nIt will works only on Javascript basic data types (number, string, ...) and instance of class declared with the @className decorator.\n@return the name of the class, will be \"object\" for a custom data type not using the @className decorator"}],"entryType":"function"},{"name":"first","documentation":"","type":"<T>(array: T[], predicate: (item: any) => boolean) => T","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"T[]"},{"name":"predicate","documentation":"","type":"(item: any) => boolean"}],"returnType":"T","documentation":""}],"entryType":"function"},{"name":"arrayOrStringFeeder","documentation":"This method can be used with hashCodeFromStream when your input is an array of values that are either: number, string, boolean or custom type implementing the getHashCode():number method.","type":"(array: any) => (i: any) => number","functionBody":[{"parameters":[{"name":"array","documentation":"","type":"any"}],"returnType":"(i: any) => number","documentation":"This method can be used with hashCodeFromStream when your input is an array of values that are either: number, string, boolean or custom type implementing the getHashCode():number method."}],"entryType":"function"},{"name":"hashCodeFromStream","documentation":"Compute the hashCode of a stream of number\nTo compute the HashCode on a string or an Array of data types implementing the getHashCode() method, use the arrayOrStringFeeder method.\n@return the hash code computed","type":"(feeder: (index: number) => number) => number","functionBody":[{"parameters":[{"name":"feeder","documentation":"a callback that will be called until it returns null, each valid returned values will be used to compute the hash code.","type":"(index: number) => number"}],"returnType":"number","documentation":"Compute the hashCode of a stream of number\nTo compute the HashCode on a string or an Array of data types implementing the getHashCode() method, use the arrayOrStringFeeder method.\n@return the hash code computed"}],"entryType":"function"}],"properties":[{"name":"BaseUrl","documentation":"","type":"string","entryType":"property"},{"name":"CorsBehavior","documentation":"","type":"any","entryType":"property"},{"name":"UseFallbackTexture","documentation":"","type":"boolean","entryType":"property"},{"name":"_NoneLogLevel","documentation":"","type":"any","entryType":"property"},{"name":"_MessageLogLevel","documentation":"","type":"any","entryType":"property"},{"name":"_WarningLogLevel","documentation":"","type":"any","entryType":"property"},{"name":"_ErrorLogLevel","documentation":"","type":"any","entryType":"property"},{"name":"_LogCache","documentation":"","type":"any","entryType":"property"},{"name":"errorsCount","documentation":"","type":"number","entryType":"property"},{"name":"OnNewCacheEntry","documentation":"","type":"(entry: string) => void","entryType":"property"},{"name":"NoneLogLevel","documentation":"","type":"number","entryType":"property"},{"name":"MessageLogLevel","documentation":"","type":"number","entryType":"property"},{"name":"WarningLogLevel","documentation":"","type":"number","entryType":"property"},{"name":"ErrorLogLevel","documentation":"","type":"number","entryType":"property"},{"name":"AllLogLevel","documentation":"","type":"number","entryType":"property"},{"name":"Log","documentation":"","type":"(message: string) => void","entryType":"property"},{"name":"Warn","documentation":"","type":"(message: string) => void","entryType":"property"},{"name":"Error","documentation":"","type":"(message: string) => void","entryType":"property"},{"name":"LogCache","documentation":"","type":"string","entryType":"property"},{"name":"LogLevels","documentation":"","type":"number","entryType":"property"},{"name":"_PerformanceNoneLogLevel","documentation":"","type":"any","entryType":"property"},{"name":"_PerformanceUserMarkLogLevel","documentation":"","type":"any","entryType":"property"},{"name":"_PerformanceConsoleLogLevel","documentation":"","type":"any","entryType":"property"},{"name":"_performance","documentation":"","type":"any","entryType":"property"},{"name":"PerformanceNoneLogLevel","documentation":"","type":"number","entryType":"property"},{"name":"PerformanceUserMarkLogLevel","documentation":"","type":"number","entryType":"property"},{"name":"PerformanceConsoleLogLevel","documentation":"","type":"number","entryType":"property"},{"name":"PerformanceLogLevel","documentation":"","type":"number","entryType":"property"},{"name":"StartPerformanceCounter","documentation":"","type":"(counterName: string, condition?: boolean) => void","entryType":"property"},{"name":"EndPerformanceCounter","documentation":"","type":"(counterName: string, condition?: boolean) => void","entryType":"property"},{"name":"Now","documentation":"","type":"number","entryType":"property"}]},{"name":"PerfCounter","documentation":"This class is used to track a performance counter which is number based.\nThe user has access to many properties which give statistics of different nature\n\nThe implementer can track two kinds of Performance Counter: time and count\nFor time you can optionally call fetchNewFrame() to notify the start of a new frame to monitor, then call beginMonitoring() to start and endMonitoring() to record the lapsed time. endMonitoring takes a newFrame parameter for you to specify if the monitored time should be set for a new frame or accumulated to the current frame being monitored.\nFor count you first have to call fetchNewFrame() to notify the start of a new frame to monitor, then call addCount() how many time required to increment the count value you monitor.","type":"typeof PerfCounter","constructors":[{"parameters":[],"returnType":"PerfCounter","documentation":""}],"entryType":"class","functions":[{"name":"fetchNewFrame","documentation":"Call this method to start monitoring a new frame.\nThis scenario is typically used when you accumulate monitoring time many times for a single frame, you call this method at the start of the frame, then beginMonitoring to start recording and endMonitoring(false) to accumulated the recorded time to the PerfCounter or addCount() to accumulate a monitored count.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Call this method to start monitoring a new frame.\nThis scenario is typically used when you accumulate monitoring time many times for a single frame, you call this method at the start of the frame, then beginMonitoring to start recording and endMonitoring(false) to accumulated the recorded time to the PerfCounter or addCount() to accumulate a monitored count."}],"entryType":"function"},{"name":"addCount","documentation":"Call this method to monitor a count of something (e.g. mesh drawn in viewport count)","type":"(newCount: number, fetchResult: boolean) => void","functionBody":[{"parameters":[{"name":"newCount","documentation":"the count value to add to the monitored count","type":"number"},{"name":"fetchResult","documentation":"true when it's the last time in the frame you add to the counter and you wish to update the statistics properties (min/max/average), false if you only want to update statistics.","type":"boolean"}],"returnType":"void","documentation":"Call this method to monitor a count of something (e.g. mesh drawn in viewport count)"}],"entryType":"function"},{"name":"beginMonitoring","documentation":"Start monitoring this performance counter","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Start monitoring this performance counter"}],"entryType":"function"},{"name":"endMonitoring","documentation":"Compute the time lapsed since the previous beginMonitoring() call.","type":"(newFrame?: boolean) => void","functionBody":[{"parameters":[{"name":"newFrame","documentation":"true by default to fetch the result and monitor a new frame, if false the time monitored will be added to the current frame counter","type":"boolean"}],"returnType":"void","documentation":"Compute the time lapsed since the previous beginMonitoring() call."}],"entryType":"function"},{"name":"_fetchResult","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"min","documentation":"Returns the smallest value ever","type":"number","entryType":"property"},{"name":"max","documentation":"Returns the biggest value ever","type":"number","entryType":"property"},{"name":"average","documentation":"Returns the average value since the performance counter is running","type":"number","entryType":"property"},{"name":"lastSecAverage","documentation":"Returns the average value of the last second the counter was monitored","type":"number","entryType":"property"},{"name":"current","documentation":"Returns the current value","type":"number","entryType":"property"},{"name":"total","documentation":"","type":"number","entryType":"property"},{"name":"_startMonitoringTime","documentation":"","type":"any","entryType":"property"},{"name":"_min","documentation":"","type":"any","entryType":"property"},{"name":"_max","documentation":"","type":"any","entryType":"property"},{"name":"_average","documentation":"","type":"any","entryType":"property"},{"name":"_current","documentation":"","type":"any","entryType":"property"},{"name":"_totalValueCount","documentation":"","type":"any","entryType":"property"},{"name":"_totalAccumulated","documentation":"","type":"any","entryType":"property"},{"name":"_lastSecAverage","documentation":"","type":"any","entryType":"property"},{"name":"_lastSecAccumulated","documentation":"","type":"any","entryType":"property"},{"name":"_lastSecTime","documentation":"","type":"any","entryType":"property"},{"name":"_lastSecValueCount","documentation":"","type":"any","entryType":"property"}]},{"name":"AsyncLoop","documentation":"An implementation of a loop for asynchronous functions.","type":"typeof AsyncLoop","constructors":[{"parameters":[{"name":"iterations","documentation":"the number of iterations.","type":"number"},{"name":"_fn","documentation":"the function to run each iteration","type":"(asyncLoop: AsyncLoop) => void"},{"name":"_successCallback","documentation":"the callback that will be called upon succesful execution","type":"() => void"},{"name":"offset","documentation":"starting offset.","type":"number"}],"returnType":"AsyncLoop","documentation":"Constroctor."}],"entryType":"class","functions":[{"name":"executeNext","documentation":"Execute the next iteration. Must be called after the last iteration was finished.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Execute the next iteration. Must be called after the last iteration was finished."}],"entryType":"function"},{"name":"breakLoop","documentation":"Break the loop and run the success callback.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Break the loop and run the success callback."}],"entryType":"function"},{"name":"Run","documentation":"Helper function","type":"(iterations: number, _fn: (asyncLoop: AsyncLoop) => void, _successCallback: () => void, offset?: ...","functionBody":[{"parameters":[{"name":"iterations","documentation":"","type":"number"},{"name":"_fn","documentation":"","type":"(asyncLoop: AsyncLoop) => void"},{"name":"_successCallback","documentation":"","type":"() => void"},{"name":"offset","documentation":"","type":"number"}],"returnType":"AsyncLoop","documentation":"Helper function"}],"entryType":"function"},{"name":"SyncAsyncForLoop","documentation":"A for-loop that will run a given number of iterations synchronous and the rest async.\n@constructor","type":"(iterations: number, syncedIterations: number, fn: (iteration: number) => void, callback: () => v...","functionBody":[{"parameters":[{"name":"iterations","documentation":"total number of iterations","type":"number"},{"name":"syncedIterations","documentation":"number of synchronous iterations in each async iteration.","type":"number"},{"name":"fn","documentation":"the function to call each iteration.","type":"(iteration: number) => void"},{"name":"callback","documentation":"a success call back that will be called when iterating stops.","type":"() => void"},{"name":"breakFunction","documentation":"a break condition (optional)","type":"() => boolean"},{"name":"timeout","documentation":"timeout settings for the setTimeout function. default - 0.","type":"number"}],"returnType":"void","documentation":"A for-loop that will run a given number of iterations synchronous and the rest async.\n@constructor"}],"entryType":"function"}],"properties":[{"name":"iterations","documentation":"","type":"number","entryType":"property"},{"name":"_fn","documentation":"","type":"any","entryType":"property"},{"name":"_successCallback","documentation":"","type":"any","entryType":"property"},{"name":"index","documentation":"","type":"number","entryType":"property"},{"name":"_done","documentation":"","type":"any","entryType":"property"}]},{"name":"VirtualJoystick","documentation":"","type":"typeof VirtualJoystick","constructors":[{"parameters":[{"name":"leftJoystick","documentation":"","type":"boolean"}],"returnType":"VirtualJoystick","documentation":""}],"entryType":"class","functions":[{"name":"setJoystickSensibility","documentation":"","type":"(newJoystickSensibility: number) => void","functionBody":[{"parameters":[{"name":"newJoystickSensibility","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_onPointerDown","documentation":"","type":"(e: any) => any","functionBody":[{"parameters":[{"name":"e","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_onPointerMove","documentation":"","type":"(e: any) => any","functionBody":[{"parameters":[{"name":"e","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_onPointerUp","documentation":"","type":"(e: any) => any","functionBody":[{"parameters":[{"name":"e","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setJoystickColor","documentation":"Change the color of the virtual joystick","type":"(newColor: string) => void","functionBody":[{"parameters":[{"name":"newColor","documentation":"a string that must be a CSS color value (like \"red\") or the hexa value (like \"#FF0000\")","type":"string"}],"returnType":"void","documentation":"Change the color of the virtual joystick"}],"entryType":"function"},{"name":"setActionOnTouch","documentation":"","type":"(action: () => any) => void","functionBody":[{"parameters":[{"name":"action","documentation":"","type":"() => any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setAxisForLeftRight","documentation":"","type":"(axis: JoystickAxis) => void","functionBody":[{"parameters":[{"name":"axis","documentation":"","type":"JoystickAxis"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setAxisForUpDown","documentation":"","type":"(axis: JoystickAxis) => void","functionBody":[{"parameters":[{"name":"axis","documentation":"","type":"JoystickAxis"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_clearCanvas","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_drawVirtualJoystick","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"releaseCanvas","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"reverseLeftRight","documentation":"","type":"boolean","entryType":"property"},{"name":"reverseUpDown","documentation":"","type":"boolean","entryType":"property"},{"name":"deltaPosition","documentation":"","type":"Vector3","entryType":"property"},{"name":"pressed","documentation":"","type":"boolean","entryType":"property"},{"name":"_globalJoystickIndex","documentation":"","type":"any","entryType":"property"},{"name":"vjCanvas","documentation":"","type":"any","entryType":"property"},{"name":"vjCanvasContext","documentation":"","type":"any","entryType":"property"},{"name":"vjCanvasWidth","documentation":"","type":"any","entryType":"property"},{"name":"vjCanvasHeight","documentation":"","type":"any","entryType":"property"},{"name":"halfWidth","documentation":"","type":"any","entryType":"property"},{"name":"halfHeight","documentation":"","type":"any","entryType":"property"},{"name":"_action","documentation":"","type":"any","entryType":"property"},{"name":"_axisTargetedByLeftAndRight","documentation":"","type":"any","entryType":"property"},{"name":"_axisTargetedByUpAndDown","documentation":"","type":"any","entryType":"property"},{"name":"_joystickSensibility","documentation":"","type":"any","entryType":"property"},{"name":"_inversedSensibility","documentation":"","type":"any","entryType":"property"},{"name":"_rotationSpeed","documentation":"","type":"any","entryType":"property"},{"name":"_inverseRotationSpeed","documentation":"","type":"any","entryType":"property"},{"name":"_rotateOnAxisRelativeToMesh","documentation":"","type":"any","entryType":"property"},{"name":"_joystickPointerID","documentation":"","type":"any","entryType":"property"},{"name":"_joystickColor","documentation":"","type":"any","entryType":"property"},{"name":"_joystickPointerPos","documentation":"","type":"any","entryType":"property"},{"name":"_joystickPreviousPointerPos","documentation":"","type":"any","entryType":"property"},{"name":"_joystickPointerStartPos","documentation":"","type":"any","entryType":"property"},{"name":"_deltaJoystickVector","documentation":"","type":"any","entryType":"property"},{"name":"_leftJoystick","documentation":"","type":"any","entryType":"property"},{"name":"_joystickIndex","documentation":"","type":"any","entryType":"property"},{"name":"_touches","documentation":"","type":"any","entryType":"property"},{"name":"_onPointerDownHandlerRef","documentation":"","type":"any","entryType":"property"},{"name":"_onPointerMoveHandlerRef","documentation":"","type":"any","entryType":"property"},{"name":"_onPointerUpHandlerRef","documentation":"","type":"any","entryType":"property"},{"name":"_onPointerOutHandlerRef","documentation":"","type":"any","entryType":"property"},{"name":"_onResize","documentation":"","type":"any","entryType":"property"}]},{"name":"ArcRotateCameraGamepadInput","documentation":"","type":"typeof ArcRotateCameraGamepadInput","constructors":[{"parameters":[],"returnType":"ArcRotateCameraGamepadInput","documentation":""}],"entryType":"class","functions":[{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_onNewGameConnected","documentation":"","type":"(gamepad: any) => any","functionBody":[{"parameters":[{"name":"gamepad","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getSimpleName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"camera","documentation":"","type":"ArcRotateCamera","entryType":"property"},{"name":"gamepad","documentation":"","type":"Gamepad","entryType":"property"},{"name":"_gamepads","documentation":"","type":"any","entryType":"property"},{"name":"gamepadRotationSensibility","documentation":"","type":"number","entryType":"property"},{"name":"gamepadMoveSensibility","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.ICameraInput"]},{"name":"ArcRotateCameraKeyboardMoveInput","documentation":"","type":"typeof ArcRotateCameraKeyboardMoveInput","constructors":[{"parameters":[],"returnType":"ArcRotateCameraKeyboardMoveInput","documentation":""}],"entryType":"class","functions":[{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getSimpleName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"camera","documentation":"","type":"ArcRotateCamera","entryType":"property"},{"name":"_keys","documentation":"","type":"any","entryType":"property"},{"name":"_onKeyDown","documentation":"","type":"any","entryType":"property"},{"name":"_onKeyUp","documentation":"","type":"any","entryType":"property"},{"name":"_onLostFocus","documentation":"","type":"any","entryType":"property"},{"name":"keysUp","documentation":"","type":"number[]","entryType":"property"},{"name":"keysDown","documentation":"","type":"number[]","entryType":"property"},{"name":"keysLeft","documentation":"","type":"number[]","entryType":"property"},{"name":"keysRight","documentation":"","type":"number[]","entryType":"property"}],"heritageClauses":["BABYLON.ICameraInput"]},{"name":"ArcRotateCameraMouseWheelInput","documentation":"","type":"typeof ArcRotateCameraMouseWheelInput","constructors":[{"parameters":[],"returnType":"ArcRotateCameraMouseWheelInput","documentation":""}],"entryType":"class","functions":[{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getSimpleName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"camera","documentation":"","type":"ArcRotateCamera","entryType":"property"},{"name":"_wheel","documentation":"","type":"any","entryType":"property"},{"name":"_observer","documentation":"","type":"any","entryType":"property"},{"name":"wheelPrecision","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.ICameraInput"]},{"name":"ArcRotateCameraPointersInput","documentation":"","type":"typeof ArcRotateCameraPointersInput","constructors":[{"parameters":[],"returnType":"ArcRotateCameraPointersInput","documentation":""}],"entryType":"class","functions":[{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getSimpleName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"camera","documentation":"","type":"ArcRotateCamera","entryType":"property"},{"name":"angularSensibilityX","documentation":"","type":"number","entryType":"property"},{"name":"angularSensibilityY","documentation":"","type":"number","entryType":"property"},{"name":"pinchPrecision","documentation":"","type":"number","entryType":"property"},{"name":"panningSensibility","documentation":"","type":"number","entryType":"property"},{"name":"_isPanClick","documentation":"","type":"any","entryType":"property"},{"name":"pinchInwards","documentation":"","type":"boolean","entryType":"property"},{"name":"_pointerInput","documentation":"","type":"any","entryType":"property"},{"name":"_observer","documentation":"","type":"any","entryType":"property"},{"name":"_onKeyDown","documentation":"","type":"any","entryType":"property"},{"name":"_onKeyUp","documentation":"","type":"any","entryType":"property"},{"name":"_onMouseMove","documentation":"","type":"any","entryType":"property"},{"name":"_onGestureStart","documentation":"","type":"any","entryType":"property"},{"name":"_onGesture","documentation":"","type":"any","entryType":"property"},{"name":"_MSGestureHandler","documentation":"","type":"any","entryType":"property"},{"name":"_onLostFocus","documentation":"","type":"any","entryType":"property"},{"name":"_onContextMenu","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.ICameraInput"]},{"name":"ArcRotateCameraVRDeviceOrientationInput","documentation":"","type":"typeof ArcRotateCameraVRDeviceOrientationInput","constructors":[{"parameters":[],"returnType":"ArcRotateCameraVRDeviceOrientationInput","documentation":""}],"entryType":"class","functions":[{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_onOrientationEvent","documentation":"","type":"(evt: DeviceOrientationEvent) => void","functionBody":[{"parameters":[{"name":"evt","documentation":"","type":"DeviceOrientationEvent"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getSimpleName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"camera","documentation":"","type":"ArcRotateCamera","entryType":"property"},{"name":"alphaCorrection","documentation":"","type":"number","entryType":"property"},{"name":"betaCorrection","documentation":"","type":"number","entryType":"property"},{"name":"gammaCorrection","documentation":"","type":"number","entryType":"property"},{"name":"_alpha","documentation":"","type":"any","entryType":"property"},{"name":"_beta","documentation":"","type":"any","entryType":"property"},{"name":"_gamma","documentation":"","type":"any","entryType":"property"},{"name":"_dirty","documentation":"","type":"any","entryType":"property"},{"name":"_offsetOrientation","documentation":"","type":"any","entryType":"property"},{"name":"_deviceOrientationHandler","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.ICameraInput"]},{"name":"FreeCameraDeviceOrientationInput","documentation":"","type":"typeof FreeCameraDeviceOrientationInput","constructors":[{"parameters":[],"returnType":"FreeCameraDeviceOrientationInput","documentation":""}],"entryType":"class","functions":[{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getSimpleName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"_camera","documentation":"","type":"any","entryType":"property"},{"name":"_screenOrientationAngle","documentation":"","type":"any","entryType":"property"},{"name":"_constantTranform","documentation":"","type":"any","entryType":"property"},{"name":"_screenQuaternion","documentation":"","type":"any","entryType":"property"},{"name":"_alpha","documentation":"","type":"any","entryType":"property"},{"name":"_beta","documentation":"","type":"any","entryType":"property"},{"name":"_gamma","documentation":"","type":"any","entryType":"property"},{"name":"camera","documentation":"","type":"FreeCamera","entryType":"property"},{"name":"_orientationChanged","documentation":"","type":"any","entryType":"property"},{"name":"_deviceOrientation","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.ICameraInput"]},{"name":"FreeCameraGamepadInput","documentation":"","type":"typeof FreeCameraGamepadInput","constructors":[{"parameters":[],"returnType":"FreeCameraGamepadInput","documentation":""}],"entryType":"class","functions":[{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_onNewGameConnected","documentation":"","type":"(gamepad: any) => any","functionBody":[{"parameters":[{"name":"gamepad","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getSimpleName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"camera","documentation":"","type":"FreeCamera","entryType":"property"},{"name":"gamepad","documentation":"","type":"Gamepad","entryType":"property"},{"name":"_gamepads","documentation":"","type":"any","entryType":"property"},{"name":"gamepadAngularSensibility","documentation":"","type":"number","entryType":"property"},{"name":"gamepadMoveSensibility","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.ICameraInput"]},{"name":"FreeCameraKeyboardMoveInput","documentation":"","type":"typeof FreeCameraKeyboardMoveInput","constructors":[{"parameters":[],"returnType":"FreeCameraKeyboardMoveInput","documentation":""}],"entryType":"class","functions":[{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"_onLostFocus","documentation":"","type":"(e: FocusEvent) => void","functionBody":[{"parameters":[{"name":"e","documentation":"","type":"FocusEvent"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getSimpleName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"camera","documentation":"","type":"FreeCamera","entryType":"property"},{"name":"_keys","documentation":"","type":"any","entryType":"property"},{"name":"_onKeyDown","documentation":"","type":"any","entryType":"property"},{"name":"_onKeyUp","documentation":"","type":"any","entryType":"property"},{"name":"keysUp","documentation":"","type":"number[]","entryType":"property"},{"name":"keysDown","documentation":"","type":"number[]","entryType":"property"},{"name":"keysLeft","documentation":"","type":"number[]","entryType":"property"},{"name":"keysRight","documentation":"","type":"number[]","entryType":"property"}],"heritageClauses":["BABYLON.ICameraInput"]},{"name":"FreeCameraMouseInput","documentation":"","type":"typeof FreeCameraMouseInput","constructors":[{"parameters":[{"name":"touchEnabled","documentation":"","type":"boolean"}],"returnType":"FreeCameraMouseInput","documentation":""}],"entryType":"class","functions":[{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getSimpleName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"touchEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"camera","documentation":"","type":"FreeCamera","entryType":"property"},{"name":"angularSensibility","documentation":"","type":"number","entryType":"property"},{"name":"_pointerInput","documentation":"","type":"any","entryType":"property"},{"name":"_onMouseMove","documentation":"","type":"any","entryType":"property"},{"name":"_observer","documentation":"","type":"any","entryType":"property"},{"name":"previousPosition","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.ICameraInput"]},{"name":"FreeCameraTouchInput","documentation":"","type":"typeof FreeCameraTouchInput","constructors":[{"parameters":[],"returnType":"FreeCameraTouchInput","documentation":""}],"entryType":"class","functions":[{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getSimpleName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"camera","documentation":"","type":"FreeCamera","entryType":"property"},{"name":"_offsetX","documentation":"","type":"any","entryType":"property"},{"name":"_offsetY","documentation":"","type":"any","entryType":"property"},{"name":"_pointerCount","documentation":"","type":"any","entryType":"property"},{"name":"_pointerPressed","documentation":"","type":"any","entryType":"property"},{"name":"_pointerInput","documentation":"","type":"any","entryType":"property"},{"name":"_observer","documentation":"","type":"any","entryType":"property"},{"name":"_onLostFocus","documentation":"","type":"any","entryType":"property"},{"name":"touchAngularSensibility","documentation":"","type":"number","entryType":"property"},{"name":"touchMoveSensibility","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.ICameraInput"]},{"name":"FreeCameraVirtualJoystickInput","documentation":"","type":"typeof FreeCameraVirtualJoystickInput","constructors":[{"parameters":[],"returnType":"FreeCameraVirtualJoystickInput","documentation":""}],"entryType":"class","functions":[{"name":"getLeftJoystick","documentation":"","type":"() => VirtualJoystick","functionBody":[{"parameters":[],"returnType":"VirtualJoystick","documentation":""}],"entryType":"function"},{"name":"getRightJoystick","documentation":"","type":"() => VirtualJoystick","functionBody":[{"parameters":[],"returnType":"VirtualJoystick","documentation":""}],"entryType":"function"},{"name":"checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getSimpleName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[{"name":"camera","documentation":"","type":"FreeCamera","entryType":"property"},{"name":"_leftjoystick","documentation":"","type":"any","entryType":"property"},{"name":"_rightjoystick","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.ICameraInput"]},{"name":"VRCameraMetrics","documentation":"","type":"typeof VRCameraMetrics","constructors":[{"parameters":[],"returnType":"VRCameraMetrics","documentation":""}],"entryType":"class","functions":[{"name":"GetDefault","documentation":"","type":"() => VRCameraMetrics","functionBody":[{"parameters":[],"returnType":"VRCameraMetrics","documentation":""}],"entryType":"function"}],"properties":[{"name":"hResolution","documentation":"","type":"number","entryType":"property"},{"name":"vResolution","documentation":"","type":"number","entryType":"property"},{"name":"hScreenSize","documentation":"","type":"number","entryType":"property"},{"name":"vScreenSize","documentation":"","type":"number","entryType":"property"},{"name":"vScreenCenter","documentation":"","type":"number","entryType":"property"},{"name":"eyeToScreenDistance","documentation":"","type":"number","entryType":"property"},{"name":"lensSeparationDistance","documentation":"","type":"number","entryType":"property"},{"name":"interpupillaryDistance","documentation":"","type":"number","entryType":"property"},{"name":"distortionK","documentation":"","type":"number[]","entryType":"property"},{"name":"chromaAbCorrection","documentation":"","type":"number[]","entryType":"property"},{"name":"postProcessScaleFactor","documentation":"","type":"number","entryType":"property"},{"name":"lensCenterOffset","documentation":"","type":"number","entryType":"property"},{"name":"compensateDistortion","documentation":"","type":"boolean","entryType":"property"},{"name":"aspectRatio","documentation":"","type":"number","entryType":"property"},{"name":"aspectRatioFov","documentation":"","type":"number","entryType":"property"},{"name":"leftHMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"rightHMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"leftPreViewMatrix","documentation":"","type":"Matrix","entryType":"property"},{"name":"rightPreViewMatrix","documentation":"","type":"Matrix","entryType":"property"}]},{"name":"VRDeviceOrientationFreeCamera","documentation":"","type":"typeof VRDeviceOrientationFreeCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"},{"name":"compensateDistortion","documentation":"","type":"boolean"},{"name":"vrCameraMetrics","documentation":"","type":"VRCameraMetrics"}],"returnType":"VRDeviceOrientationFreeCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.DeviceOrientationCamera"]},{"name":"VRDeviceOrientationArcRotateCamera","documentation":"","type":"typeof VRDeviceOrientationArcRotateCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"alpha","documentation":"","type":"number"},{"name":"beta","documentation":"","type":"number"},{"name":"radius","documentation":"","type":"number"},{"name":"target","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"},{"name":"compensateDistortion","documentation":"","type":"boolean"},{"name":"vrCameraMetrics","documentation":"","type":"VRCameraMetrics"}],"returnType":"VRDeviceOrientationArcRotateCamera","documentation":""}],"entryType":"class","functions":[{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"}],"properties":[],"heritageClauses":["BABYLON.ArcRotateCamera"]},{"name":"WebVRFreeCamera","documentation":"","type":"typeof WebVRFreeCamera","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"position","documentation":"","type":"Vector3"},{"name":"scene","documentation":"","type":"Scene"},{"name":"compensateDistortion","documentation":"","type":"boolean"},{"name":"webVROptions","documentation":"","type":"WebVROptions"}],"returnType":"WebVRFreeCamera","documentation":""}],"entryType":"class","functions":[{"name":"_checkInputs","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"attachControl","documentation":"","type":"(element: HTMLElement, noPreventDefault?: boolean) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"},{"name":"noPreventDefault","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"detachControl","documentation":"","type":"(element: HTMLElement) => void","functionBody":[{"parameters":[{"name":"element","documentation":"","type":"HTMLElement"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"requestVRFullscreen","documentation":"","type":"(requestPointerlock: boolean) => void","functionBody":[{"parameters":[{"name":"requestPointerlock","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getTypeName","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"resetToCurrentRotation","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"webVROptions","documentation":"","type":"any","entryType":"property"},{"name":"_vrDevice","documentation":"","type":"any","entryType":"property"},{"name":"_cacheState","documentation":"","type":"any","entryType":"property"},{"name":"_vrEnabled","documentation":"","type":"any","entryType":"property"},{"name":"_oldSize","documentation":"","type":"any","entryType":"property"},{"name":"_oldHardwareScaleFactor","documentation":"","type":"any","entryType":"property"},{"name":"_quaternionCache","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.FreeCamera"]},{"name":"Octree","documentation":"","type":"typeof Octree","constructors":[{"parameters":[{"name":"creationFunc","documentation":"","type":"(entry: T, block: OctreeBlock<T>) => void"},{"name":"maxBlockCapacity","documentation":"","type":"number"},{"name":"maxDepth","documentation":"","type":"number"}],"returnType":"Octree<T>","documentation":""}],"entryType":"class","functions":[{"name":"update","documentation":"","type":"(worldMin: Vector3, worldMax: Vector3, entries: T[]) => void","functionBody":[{"parameters":[{"name":"worldMin","documentation":"","type":"Vector3"},{"name":"worldMax","documentation":"","type":"Vector3"},{"name":"entries","documentation":"","type":"T[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addMesh","documentation":"","type":"(entry: T) => void","functionBody":[{"parameters":[{"name":"entry","documentation":"","type":"T"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"select","documentation":"","type":"(frustumPlanes: Plane[], allowDuplicate?: boolean) => SmartArray<T>","functionBody":[{"parameters":[{"name":"frustumPlanes","documentation":"","type":"Plane[]"},{"name":"allowDuplicate","documentation":"","type":"boolean"}],"returnType":"SmartArray<T>","documentation":""}],"entryType":"function"},{"name":"intersects","documentation":"","type":"(sphereCenter: Vector3, sphereRadius: number, allowDuplicate?: boolean) => SmartArray<T>","functionBody":[{"parameters":[{"name":"sphereCenter","documentation":"","type":"Vector3"},{"name":"sphereRadius","documentation":"","type":"number"},{"name":"allowDuplicate","documentation":"","type":"boolean"}],"returnType":"SmartArray<T>","documentation":""}],"entryType":"function"},{"name":"intersectsRay","documentation":"","type":"(ray: Ray) => SmartArray<T>","functionBody":[{"parameters":[{"name":"ray","documentation":"","type":"Ray"}],"returnType":"SmartArray<T>","documentation":""}],"entryType":"function"},{"name":"_CreateBlocks","documentation":"","type":"<T>(worldMin: Vector3, worldMax: Vector3, entries: T[], maxBlockCapacity: number, currentDepth: n...","functionBody":[{"parameters":[{"name":"worldMin","documentation":"","type":"Vector3"},{"name":"worldMax","documentation":"","type":"Vector3"},{"name":"entries","documentation":"","type":"T[]"},{"name":"maxBlockCapacity","documentation":"","type":"number"},{"name":"currentDepth","documentation":"","type":"number"},{"name":"maxDepth","documentation":"","type":"number"},{"name":"target","documentation":"","type":"IOctreeContainer<T>"},{"name":"creationFunc","documentation":"","type":"(entry: T, block: OctreeBlock<T>) => void"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"maxDepth","documentation":"","type":"number","entryType":"property"},{"name":"blocks","documentation":"","type":"OctreeBlock<T>[]","entryType":"property"},{"name":"dynamicContent","documentation":"","type":"T[]","entryType":"property"},{"name":"_maxBlockCapacity","documentation":"","type":"any","entryType":"property"},{"name":"_selectionContent","documentation":"","type":"any","entryType":"property"},{"name":"_creationFunc","documentation":"","type":"any","entryType":"property"},{"name":"CreationFuncForMeshes","documentation":"","type":"(entry: AbstractMesh, block: OctreeBlock<AbstractMesh>) => void","entryType":"property"},{"name":"CreationFuncForSubMeshes","documentation":"","type":"(entry: SubMesh, block: OctreeBlock<SubMesh>) => void","entryType":"property"}]},{"name":"OctreeBlock","documentation":"","type":"typeof OctreeBlock","constructors":[{"parameters":[{"name":"minPoint","documentation":"","type":"Vector3"},{"name":"maxPoint","documentation":"","type":"Vector3"},{"name":"capacity","documentation":"","type":"number"},{"name":"depth","documentation":"","type":"number"},{"name":"maxDepth","documentation":"","type":"number"},{"name":"creationFunc","documentation":"","type":"(entry: T, block: OctreeBlock<T>) => void"}],"returnType":"OctreeBlock<T>","documentation":""}],"entryType":"class","functions":[{"name":"addEntry","documentation":"","type":"(entry: T) => void","functionBody":[{"parameters":[{"name":"entry","documentation":"","type":"T"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addEntries","documentation":"","type":"(entries: T[]) => void","functionBody":[{"parameters":[{"name":"entries","documentation":"","type":"T[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"select","documentation":"","type":"(frustumPlanes: Plane[], selection: SmartArray<T>, allowDuplicate?: boolean) => void","functionBody":[{"parameters":[{"name":"frustumPlanes","documentation":"","type":"Plane[]"},{"name":"selection","documentation":"","type":"SmartArray<T>"},{"name":"allowDuplicate","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"intersects","documentation":"","type":"(sphereCenter: Vector3, sphereRadius: number, selection: SmartArray<T>, allowDuplicate?: boolean)...","functionBody":[{"parameters":[{"name":"sphereCenter","documentation":"","type":"Vector3"},{"name":"sphereRadius","documentation":"","type":"number"},{"name":"selection","documentation":"","type":"SmartArray<T>"},{"name":"allowDuplicate","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"intersectsRay","documentation":"","type":"(ray: Ray, selection: SmartArray<T>) => void","functionBody":[{"parameters":[{"name":"ray","documentation":"","type":"Ray"},{"name":"selection","documentation":"","type":"SmartArray<T>"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"createInnerBlocks","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"entries","documentation":"","type":"T[]","entryType":"property"},{"name":"blocks","documentation":"","type":"OctreeBlock<T>[]","entryType":"property"},{"name":"_depth","documentation":"","type":"any","entryType":"property"},{"name":"_maxDepth","documentation":"","type":"any","entryType":"property"},{"name":"_capacity","documentation":"","type":"any","entryType":"property"},{"name":"_minPoint","documentation":"","type":"any","entryType":"property"},{"name":"_maxPoint","documentation":"","type":"any","entryType":"property"},{"name":"_boundingVectors","documentation":"","type":"any","entryType":"property"},{"name":"_creationFunc","documentation":"","type":"any","entryType":"property"},{"name":"capacity","documentation":"","type":"number","entryType":"property"},{"name":"minPoint","documentation":"","type":"Vector3","entryType":"property"},{"name":"maxPoint","documentation":"","type":"Vector3","entryType":"property"}]},{"name":"ShadowGenerator","documentation":"","type":"typeof ShadowGenerator","constructors":[{"parameters":[{"name":"mapSize","documentation":"","type":"number"},{"name":"light","documentation":"","type":"IShadowLight"}],"returnType":"ShadowGenerator","documentation":""}],"entryType":"class","functions":[{"name":"isReady","documentation":"","type":"(subMesh: SubMesh, useInstances: boolean) => boolean","functionBody":[{"parameters":[{"name":"subMesh","documentation":"","type":"SubMesh"},{"name":"useInstances","documentation":"","type":"boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getShadowMap","documentation":"","type":"() => RenderTargetTexture","functionBody":[{"parameters":[],"returnType":"RenderTargetTexture","documentation":""}],"entryType":"function"},{"name":"getShadowMapForRendering","documentation":"","type":"() => RenderTargetTexture","functionBody":[{"parameters":[],"returnType":"RenderTargetTexture","documentation":""}],"entryType":"function"},{"name":"getLight","documentation":"","type":"() => IShadowLight","functionBody":[{"parameters":[],"returnType":"IShadowLight","documentation":""}],"entryType":"function"},{"name":"getTransformMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getDarkness","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"setDarkness","documentation":"","type":"(darkness: number) => void","functionBody":[{"parameters":[{"name":"darkness","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setTransparencyShadow","documentation":"","type":"(hasShadow: boolean) => void","functionBody":[{"parameters":[{"name":"hasShadow","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_packHalf","documentation":"","type":"(depth: any) => any","functionBody":[{"parameters":[{"name":"depth","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedShadowGenerator: any, scene: Scene) => ShadowGenerator","functionBody":[{"parameters":[{"name":"parsedShadowGenerator","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"ShadowGenerator","documentation":""}],"entryType":"function"}],"properties":[{"name":"_FILTER_NONE","documentation":"","type":"any","entryType":"property"},{"name":"_FILTER_VARIANCESHADOWMAP","documentation":"","type":"any","entryType":"property"},{"name":"_FILTER_POISSONSAMPLING","documentation":"","type":"any","entryType":"property"},{"name":"_FILTER_BLURVARIANCESHADOWMAP","documentation":"","type":"any","entryType":"property"},{"name":"FILTER_NONE","documentation":"","type":"number","entryType":"property"},{"name":"FILTER_VARIANCESHADOWMAP","documentation":"","type":"number","entryType":"property"},{"name":"FILTER_POISSONSAMPLING","documentation":"","type":"number","entryType":"property"},{"name":"FILTER_BLURVARIANCESHADOWMAP","documentation":"","type":"number","entryType":"property"},{"name":"_filter","documentation":"","type":"any","entryType":"property"},{"name":"blurScale","documentation":"","type":"number","entryType":"property"},{"name":"_blurBoxOffset","documentation":"","type":"any","entryType":"property"},{"name":"_bias","documentation":"","type":"any","entryType":"property"},{"name":"_lightDirection","documentation":"","type":"any","entryType":"property"},{"name":"forceBackFacesOnly","documentation":"","type":"boolean","entryType":"property"},{"name":"bias","documentation":"","type":"number","entryType":"property"},{"name":"blurBoxOffset","documentation":"","type":"number","entryType":"property"},{"name":"filter","documentation":"","type":"number","entryType":"property"},{"name":"useVarianceShadowMap","documentation":"","type":"boolean","entryType":"property"},{"name":"usePoissonSampling","documentation":"","type":"boolean","entryType":"property"},{"name":"useBlurVarianceShadowMap","documentation":"","type":"boolean","entryType":"property"},{"name":"_light","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_shadowMap","documentation":"","type":"any","entryType":"property"},{"name":"_shadowMap2","documentation":"","type":"any","entryType":"property"},{"name":"_darkness","documentation":"","type":"any","entryType":"property"},{"name":"_transparencyShadow","documentation":"","type":"any","entryType":"property"},{"name":"_effect","documentation":"","type":"any","entryType":"property"},{"name":"_viewMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_projectionMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_transformMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_worldViewProjection","documentation":"","type":"any","entryType":"property"},{"name":"_cachedPosition","documentation":"","type":"any","entryType":"property"},{"name":"_cachedDirection","documentation":"","type":"any","entryType":"property"},{"name":"_cachedDefines","documentation":"","type":"any","entryType":"property"},{"name":"_currentRenderID","documentation":"","type":"any","entryType":"property"},{"name":"_downSamplePostprocess","documentation":"","type":"any","entryType":"property"},{"name":"_boxBlurPostprocess","documentation":"","type":"any","entryType":"property"},{"name":"_mapSize","documentation":"","type":"any","entryType":"property"},{"name":"_currentFaceIndex","documentation":"","type":"any","entryType":"property"},{"name":"_currentFaceIndexCache","documentation":"","type":"any","entryType":"property"},{"name":"_useFullFloat","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.IShadowGenerator"]},{"name":"BaseTexture","documentation":"","type":"typeof BaseTexture","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"}],"returnType":"BaseTexture","documentation":""}],"entryType":"class","functions":[{"name":"toString","documentation":"","type":"() => string","functionBody":[{"parameters":[],"returnType":"string","documentation":""}],"entryType":"function"},{"name":"getScene","documentation":"","type":"() => Scene","functionBody":[{"parameters":[],"returnType":"Scene","documentation":""}],"entryType":"function"},{"name":"getTextureMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getReflectionTextureMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getInternalTexture","documentation":"","type":"() => WebGLTexture","functionBody":[{"parameters":[],"returnType":"WebGLTexture","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getSize","documentation":"","type":"() => ISize","functionBody":[{"parameters":[],"returnType":"ISize","documentation":""}],"entryType":"function"},{"name":"getBaseSize","documentation":"","type":"() => ISize","functionBody":[{"parameters":[],"returnType":"ISize","documentation":""}],"entryType":"function"},{"name":"scale","documentation":"","type":"(ratio: number) => void","functionBody":[{"parameters":[{"name":"ratio","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_removeFromCache","documentation":"","type":"(url: string, noMipmap: boolean) => void","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"string"},{"name":"noMipmap","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getFromCache","documentation":"","type":"(url: string, noMipmap: boolean, sampling?: number) => WebGLTexture","functionBody":[{"parameters":[{"name":"url","documentation":"","type":"string"},{"name":"noMipmap","documentation":"","type":"boolean"},{"name":"sampling","documentation":"","type":"number"}],"returnType":"WebGLTexture","documentation":""}],"entryType":"function"},{"name":"delayLoad","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => BaseTexture","functionBody":[{"parameters":[],"returnType":"BaseTexture","documentation":""}],"entryType":"function"},{"name":"releaseInternalTexture","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"hasAlpha","documentation":"","type":"boolean","entryType":"property"},{"name":"getAlphaFromRGB","documentation":"","type":"boolean","entryType":"property"},{"name":"level","documentation":"","type":"number","entryType":"property"},{"name":"coordinatesIndex","documentation":"","type":"number","entryType":"property"},{"name":"coordinatesMode","documentation":"","type":"number","entryType":"property"},{"name":"wrapU","documentation":"","type":"number","entryType":"property"},{"name":"wrapV","documentation":"","type":"number","entryType":"property"},{"name":"anisotropicFilteringLevel","documentation":"","type":"number","entryType":"property"},{"name":"isCube","documentation":"","type":"boolean","entryType":"property"},{"name":"isRenderTarget","documentation":"","type":"boolean","entryType":"property"},{"name":"animations","documentation":"","type":"Animation[]","entryType":"property"},{"name":"onDisposeObservable","documentation":"An event triggered when the texture is disposed.\n@type {BABYLON.Observable}","type":"Observable<BaseTexture>","entryType":"property"},{"name":"_onDisposeObserver","documentation":"","type":"any","entryType":"property"},{"name":"onDispose","documentation":"","type":"() => void","entryType":"property"},{"name":"delayLoadState","documentation":"","type":"number","entryType":"property"},{"name":"_cachedAnisotropicFilteringLevel","documentation":"","type":"number","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_texture","documentation":"","type":"WebGLTexture","entryType":"property"},{"name":"canRescale","documentation":"","type":"boolean","entryType":"property"}]},{"name":"ColorGradingTexture","documentation":"This represents a color grading texture. This acts as a lookup table LUT, useful during post process\nIt can help converting any input color in a desired output one. This can then be used to create effects\nfrom sepia, black and white to sixties or futuristic rendering...\n\nThe only supported format is currently 3dl.\nMore information on LUT: https://en.wikipedia.org/wiki/3D_lookup_table/","type":"typeof ColorGradingTexture","constructors":[{"parameters":[{"name":"url","documentation":"The location of the color gradind data (currently only supporting 3dl)","type":"string"},{"name":"scene","documentation":"The scene the texture will be used in","type":"Scene"}],"returnType":"ColorGradingTexture","documentation":"Instantiates a ColorGradingTexture from the following parameters."}],"entryType":"class","functions":[{"name":"getTextureMatrix","documentation":"Returns the texture matrix used in most of the material.\nThis is not used in color grading but keep for troubleshooting purpose (easily swap diffuse by colorgrading to look in).","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":"Returns the texture matrix used in most of the material.\nThis is not used in color grading but keep for troubleshooting purpose (easily swap diffuse by colorgrading to look in)."}],"entryType":"function"},{"name":"load3dlTexture","documentation":"Occurs when the file being loaded is a .3dl LUT file.","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":"Occurs when the file being loaded is a .3dl LUT file."}],"entryType":"function"},{"name":"loadTexture","documentation":"Starts the loading process of the texture.","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":"Starts the loading process of the texture."}],"entryType":"function"},{"name":"clone","documentation":"Clones the color gradind texture.","type":"() => ColorGradingTexture","functionBody":[{"parameters":[],"returnType":"ColorGradingTexture","documentation":"Clones the color gradind texture."}],"entryType":"function"},{"name":"delayLoad","documentation":"Called during delayed load for textures.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Called during delayed load for textures."}],"entryType":"function"},{"name":"Bind","documentation":"Binds the color grading to the shader.","type":"(colorGrading: BaseTexture, effect: Effect) => void","functionBody":[{"parameters":[{"name":"colorGrading","documentation":"The texture to bind","type":"BaseTexture"},{"name":"effect","documentation":"The effect to bind to","type":"Effect"}],"returnType":"void","documentation":"Binds the color grading to the shader."}],"entryType":"function"},{"name":"PrepareUniformsAndSamplers","documentation":"Prepare the list of uniforms associated with the ColorGrading effects.","type":"(uniformsList: string[], samplersList: string[]) => void","functionBody":[{"parameters":[{"name":"uniformsList","documentation":"The list of uniforms used in the effect","type":"string[]"},{"name":"samplersList","documentation":"The list of samplers used in the effect","type":"string[]"}],"returnType":"void","documentation":"Prepare the list of uniforms associated with the ColorGrading effects."}],"entryType":"function"},{"name":"Parse","documentation":"Parses a color grading texture serialized by Babylon.\n@return A color gradind texture","type":"(parsedTexture: any, scene: Scene, rootUrl: string) => ColorGradingTexture","functionBody":[{"parameters":[{"name":"parsedTexture","documentation":"The texture information being parsedTexture","type":"any"},{"name":"scene","documentation":"The scene to load the texture in","type":"Scene"},{"name":"rootUrl","documentation":"The root url of the data assets to load","type":"string"}],"returnType":"ColorGradingTexture","documentation":"Parses a color grading texture serialized by Babylon.\n@return A color gradind texture"}],"entryType":"function"},{"name":"serialize","documentation":"Serializes the LUT texture to json format.","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":"Serializes the LUT texture to json format."}],"entryType":"function"}],"properties":[{"name":"_size","documentation":"The current internal texture size.","type":"any","entryType":"property"},{"name":"_textureMatrix","documentation":"The current texture matrix. (will always be identity in color grading texture)","type":"any","entryType":"property"},{"name":"url","documentation":"The texture URL.","type":"string","entryType":"property"},{"name":"_noneEmptyLineRegex","documentation":"Empty line regex stored for GC.","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.BaseTexture"]},{"name":"CubeTexture","documentation":"","type":"typeof CubeTexture","constructors":[{"parameters":[{"name":"rootUrl","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"extensions","documentation":"","type":"string[]"},{"name":"noMipmap","documentation":"","type":"boolean"},{"name":"files","documentation":"","type":"string[]"}],"returnType":"CubeTexture","documentation":""}],"entryType":"class","functions":[{"name":"CreateFromImages","documentation":"","type":"(files: string[], scene: Scene, noMipmap?: boolean) => CubeTexture","functionBody":[{"parameters":[{"name":"files","documentation":"","type":"string[]"},{"name":"scene","documentation":"","type":"Scene"},{"name":"noMipmap","documentation":"","type":"boolean"}],"returnType":"CubeTexture","documentation":""}],"entryType":"function"},{"name":"delayLoad","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getReflectionTextureMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedTexture: any, scene: Scene, rootUrl: string) => CubeTexture","functionBody":[{"parameters":[{"name":"parsedTexture","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"CubeTexture","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => CubeTexture","functionBody":[{"parameters":[],"returnType":"CubeTexture","documentation":""}],"entryType":"function"}],"properties":[{"name":"url","documentation":"","type":"string","entryType":"property"},{"name":"coordinatesMode","documentation":"","type":"number","entryType":"property"},{"name":"_noMipmap","documentation":"","type":"any","entryType":"property"},{"name":"_files","documentation":"","type":"any","entryType":"property"},{"name":"_extensions","documentation":"","type":"any","entryType":"property"},{"name":"_textureMatrix","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.BaseTexture"]},{"name":"DynamicTexture","documentation":"","type":"typeof DynamicTexture","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"options","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"generateMipMaps","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"DynamicTexture","documentation":""}],"entryType":"class","functions":[{"name":"scale","documentation":"","type":"(ratio: number) => void","functionBody":[{"parameters":[{"name":"ratio","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getContext","documentation":"","type":"() => CanvasRenderingContext2D","functionBody":[{"parameters":[],"returnType":"CanvasRenderingContext2D","documentation":""}],"entryType":"function"},{"name":"clear","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"update","documentation":"","type":"(invertY?: boolean) => void","functionBody":[{"parameters":[{"name":"invertY","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"drawText","documentation":"","type":"(text: string, x: number, y: number, font: string, color: string, clearColor: string, invertY?: b...","functionBody":[{"parameters":[{"name":"text","documentation":"","type":"string"},{"name":"x","documentation":"","type":"number"},{"name":"y","documentation":"","type":"number"},{"name":"font","documentation":"","type":"string"},{"name":"color","documentation":"","type":"string"},{"name":"clearColor","documentation":"","type":"string"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"update","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => DynamicTexture","functionBody":[{"parameters":[],"returnType":"DynamicTexture","documentation":""}],"entryType":"function"}],"properties":[{"name":"_generateMipMaps","documentation":"","type":"any","entryType":"property"},{"name":"_canvas","documentation":"","type":"any","entryType":"property"},{"name":"_context","documentation":"","type":"any","entryType":"property"},{"name":"canRescale","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.Texture"]},{"name":"CharInfo","documentation":"This class given information about a given character.","type":"typeof CharInfo","constructors":[{"parameters":[],"returnType":"CharInfo","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"topLeftUV","documentation":"The normalized ([0;1]) top/left position of the character in the texture","type":"Vector2","entryType":"property"},{"name":"bottomRightUV","documentation":"The normalized ([0;1]) right/bottom position of the character in the texture","type":"Vector2","entryType":"property"},{"name":"charWidth","documentation":"","type":"number","entryType":"property"}]},{"name":"FontTexture","documentation":"","type":"typeof FontTexture","constructors":[{"parameters":[{"name":"name","documentation":"the name of the texture","type":"string"},{"name":"font","documentation":"the font to use, use the W3C CSS notation","type":"string"},{"name":"scene","documentation":"the scene that owns the texture","type":"Scene"},{"name":"maxCharCount","documentation":"the approximative maximum count of characters that could fit in the texture. This is an approximation because most of the fonts are proportional (each char has its own Width). The 'W' character's width is used to compute the size of the texture based on the given maxCharCount","type":"number"},{"name":"samplingMode","documentation":"the texture sampling mode","type":"number"},{"name":"superSample","documentation":"if true the FontTexture will be created with a font of a size twice bigger than the given one but all properties (lineHeight, charWidth, etc.) will be according to the original size. This is made to improve the text quality.","type":"boolean"}],"returnType":"FontTexture","documentation":"Create a new instance of the FontTexture class"}],"entryType":"class","functions":[{"name":"GetCachedFontTexture","documentation":"","type":"(scene: Scene, fontName: string, supersample?: boolean) => FontTexture","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"fontName","documentation":"","type":"string"},{"name":"supersample","documentation":"","type":"boolean"}],"returnType":"FontTexture","documentation":""}],"entryType":"function"},{"name":"ReleaseCachedFontTexture","documentation":"","type":"(scene: Scene, fontName: string, supersample?: boolean) => void","functionBody":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"fontName","documentation":"","type":"string"},{"name":"supersample","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getChar","documentation":"Make sure the given char is present in the font map.\n@return the CharInfo instance corresponding to the given character","type":"(char: string) => CharInfo","functionBody":[{"parameters":[{"name":"char","documentation":"the character to get or add","type":"string"}],"returnType":"CharInfo","documentation":"Make sure the given char is present in the font map.\n@return the CharInfo instance corresponding to the given character"}],"entryType":"function"},{"name":"measureText","documentation":"","type":"(text: string, tabulationSize?: number) => Size","functionBody":[{"parameters":[{"name":"text","documentation":"","type":"string"},{"name":"tabulationSize","documentation":"","type":"number"}],"returnType":"Size","documentation":""}],"entryType":"function"},{"name":"getSuperSampleFont","documentation":"","type":"(font: any) => any","functionBody":[{"parameters":[{"name":"font","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getFontHeight","documentation":"","type":"(font: any) => any","functionBody":[{"parameters":[{"name":"font","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getContext","documentation":"","type":"() => CanvasRenderingContext2D","functionBody":[{"parameters":[],"returnType":"CanvasRenderingContext2D","documentation":""}],"entryType":"function"},{"name":"update","documentation":"Call this method when you've call getChar() at least one time, this will update the texture if needed.\nDon't be afraid to call it, if no new character was added, this method simply does nothing.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Call this method when you've call getChar() at least one time, this will update the texture if needed.\nDon't be afraid to call it, if no new character was added, this method simply does nothing."}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => FontTexture","functionBody":[{"parameters":[],"returnType":"FontTexture","documentation":""}],"entryType":"function"},{"name":"incCachedFontTextureCounter","documentation":"For FontTexture retrieved using GetCachedFontTexture, use this method when you transfer this object's lifetime to another party in order to share this resource.\nWhen the other party is done with this object, decCachedFontTextureCounter must be called.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"For FontTexture retrieved using GetCachedFontTexture, use this method when you transfer this object's lifetime to another party in order to share this resource.\nWhen the other party is done with this object, decCachedFontTextureCounter must be called."}],"entryType":"function"},{"name":"decCachedFontTextureCounter","documentation":"Use this method only in conjunction with incCachedFontTextureCounter, call it when you no longer need to use this shared resource.","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":"Use this method only in conjunction with incCachedFontTextureCounter, call it when you no longer need to use this shared resource."}],"entryType":"function"}],"properties":[{"name":"_canvas","documentation":"","type":"any","entryType":"property"},{"name":"_context","documentation":"","type":"any","entryType":"property"},{"name":"_lineHeight","documentation":"","type":"any","entryType":"property"},{"name":"_lineHeightSuper","documentation":"","type":"any","entryType":"property"},{"name":"_offset","documentation":"","type":"any","entryType":"property"},{"name":"_currentFreePosition","documentation":"","type":"any","entryType":"property"},{"name":"_charInfos","documentation":"","type":"any","entryType":"property"},{"name":"_curCharCount","documentation":"","type":"any","entryType":"property"},{"name":"_lastUpdateCharCount","documentation":"","type":"any","entryType":"property"},{"name":"_spaceWidth","documentation":"","type":"any","entryType":"property"},{"name":"_spaceWidthSuper","documentation":"","type":"any","entryType":"property"},{"name":"_usedCounter","documentation":"","type":"any","entryType":"property"},{"name":"_superSample","documentation":"","type":"any","entryType":"property"},{"name":"_cachedFontId","documentation":"","type":"any","entryType":"property"},{"name":"isSuperSampled","documentation":"","type":"boolean","entryType":"property"},{"name":"spaceWidth","documentation":"","type":"number","entryType":"property"},{"name":"lineHeight","documentation":"","type":"number","entryType":"property"},{"name":"canRescale","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.Texture"]},{"name":"HDRCubeTexture","documentation":"This represents a texture coming from an HDR input.\n\nThe only supported format is currently panorama picture stored in RGBE format.\nExample of such files can be found on HDRLib: http://hdrlib.com/","type":"typeof HDRCubeTexture","constructors":[{"parameters":[{"name":"url","documentation":"The location of the HDR raw data (Panorama stored in RGBE format)","type":"string"},{"name":"scene","documentation":"The scene the texture will be used in","type":"Scene"},{"name":"size","documentation":"The cubemap desired size (the more it increases the longer the generation will be) If the size is omitted this implies you are using a preprocessed cubemap.","type":"number"},{"name":"noMipmap","documentation":"Forces to not generate the mipmap if true","type":"boolean"},{"name":"generateHarmonics","documentation":"Specifies wether you want to extract the polynomial harmonics during the generation process","type":"boolean"},{"name":"useInGammaSpace","documentation":"Specifies if the texture will be use in gamma or linear space (the PBR material requires those texture in linear space, but the standard material would require them in Gamma space)","type":"boolean"},{"name":"usePMREMGenerator","documentation":"Specifies wether or not to generate the CubeMap through CubeMapGen to avoid seams issue at run time.","type":"boolean"}],"returnType":"HDRCubeTexture","documentation":"Instantiates an HDRTexture from the following parameters."}],"entryType":"class","functions":[{"name":"loadBabylonTexture","documentation":"Occurs when the file is a preprocessed .babylon.hdr file.","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":"Occurs when the file is a preprocessed .babylon.hdr file."}],"entryType":"function"},{"name":"loadHDRTexture","documentation":"Occurs when the file is raw .hdr file.","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":"Occurs when the file is raw .hdr file."}],"entryType":"function"},{"name":"loadTexture","documentation":"Starts the loading process of the texture.","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":"Starts the loading process of the texture."}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => HDRCubeTexture","functionBody":[{"parameters":[],"returnType":"HDRCubeTexture","documentation":""}],"entryType":"function"},{"name":"delayLoad","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getReflectionTextureMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedTexture: any, scene: Scene, rootUrl: string) => HDRCubeTexture","functionBody":[{"parameters":[{"name":"parsedTexture","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"HDRCubeTexture","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"generateBabylonHDROnDisk","documentation":"Saves as a file the data contained in the texture in a binary format.\nThis can be used to prevent the long loading tie associated with creating the seamless texture as well\nas the spherical used in the lighting.\n@return The packed binary data.","type":"(url: string, size: number, onError?: () => void) => void","functionBody":[{"parameters":[{"name":"url","documentation":"The HDR file url.","type":"string"},{"name":"size","documentation":"The size of the texture data to generate (one of the cubemap face desired width).","type":"number"},{"name":"onError","documentation":"Method called if any error happens during download.","type":"() => void"}],"returnType":"void","documentation":"Saves as a file the data contained in the texture in a binary format.\nThis can be used to prevent the long loading tie associated with creating the seamless texture as well\nas the spherical used in the lighting.\n@return The packed binary data."}],"entryType":"function"},{"name":"generateBabylonHDR","documentation":"Serializes the data contained in the texture in a binary format.\nThis can be used to prevent the long loading tie associated with creating the seamless texture as well\nas the spherical used in the lighting.\n@return The packed binary data.","type":"(url: string, size: number, callback: (ArrayBuffer: any) => void, onError?: () => void) => void","functionBody":[{"parameters":[{"name":"url","documentation":"The HDR file url.","type":"string"},{"name":"size","documentation":"The size of the texture data to generate (one of the cubemap face desired width).","type":"number"},{"name":"callback","documentation":"","type":"(ArrayBuffer: any) => void"},{"name":"onError","documentation":"Method called if any error happens during download.","type":"() => void"}],"returnType":"void","documentation":"Serializes the data contained in the texture in a binary format.\nThis can be used to prevent the long loading tie associated with creating the seamless texture as well\nas the spherical used in the lighting.\n@return The packed binary data."}],"entryType":"function"}],"properties":[{"name":"_facesMapping","documentation":"","type":"any","entryType":"property"},{"name":"_useInGammaSpace","documentation":"","type":"any","entryType":"property"},{"name":"_generateHarmonics","documentation":"","type":"any","entryType":"property"},{"name":"_noMipmap","documentation":"","type":"any","entryType":"property"},{"name":"_extensions","documentation":"","type":"any","entryType":"property"},{"name":"_textureMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_size","documentation":"","type":"any","entryType":"property"},{"name":"_usePMREMGenerator","documentation":"","type":"any","entryType":"property"},{"name":"_isBABYLONPreprocessed","documentation":"","type":"any","entryType":"property"},{"name":"url","documentation":"The texture URL.","type":"string","entryType":"property"},{"name":"coordinatesMode","documentation":"The texture coordinates mode. As this texture is stored in a cube format, please modify carefully.","type":"number","entryType":"property"},{"name":"sphericalPolynomial","documentation":"The spherical polynomial data extracted from the texture.","type":"SphericalPolynomial","entryType":"property"},{"name":"isPMREM","documentation":"Specifies wether the texture has been generated through the PMREMGenerator tool.\nThis is usefull at run time to apply the good shader.","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.BaseTexture"]},{"name":"MapTexture","documentation":"","type":"typeof MapTexture","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"size","documentation":"","type":"ISize"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"useMipMap","documentation":"","type":"boolean"}],"returnType":"MapTexture","documentation":""}],"entryType":"class","functions":[{"name":"allocateRect","documentation":"Allocate a rectangle of a given size in the texture map\n@return the PackedRect instance corresponding to the allocated rect or null is there was not enough space to allocate it.","type":"(size: Size) => PackedRect","functionBody":[{"parameters":[{"name":"size","documentation":"the size of the rectangle to allocation","type":"Size"}],"returnType":"PackedRect","documentation":"Allocate a rectangle of a given size in the texture map\n@return the PackedRect instance corresponding to the allocated rect or null is there was not enough space to allocate it."}],"entryType":"function"},{"name":"freeRect","documentation":"Free a given rectangle from the texture map","type":"(rectInfo: PackedRect) => void","functionBody":[{"parameters":[{"name":"rectInfo","documentation":"the instance corresponding to the rect to free.","type":"PackedRect"}],"returnType":"void","documentation":"Free a given rectangle from the texture map"}],"entryType":"function"},{"name":"bindTextureForRect","documentation":"Bind the texture to the rendering engine to render in the zone of a given rectangle.\nUse this method when you want to render into the texture map with a clipspace set to the location and size of the given rect.\nDon't forget to call unbindTexture when you're done rendering","type":"(rect: PackedRect, clear: boolean) => void","functionBody":[{"parameters":[{"name":"rect","documentation":"the zone to render to","type":"PackedRect"},{"name":"clear","documentation":"true to clear the portion's color/depth data","type":"boolean"}],"returnType":"void","documentation":"Bind the texture to the rendering engine to render in the zone of a given rectangle.\nUse this method when you want to render into the texture map with a clipspace set to the location and size of the given rect.\nDon't forget to call unbindTexture when you're done rendering"}],"entryType":"function"},{"name":"bindTextureForPosSize","documentation":"Bind the texture to the rendering engine to render in the zone of the given size at the given position.\nUse this method when you want to render into the texture map with a clipspace set to the location and size of the given rect.\nDon't forget to call unbindTexture when you're done rendering","type":"(pos: Vector2, size: Size, clear: boolean) => void","functionBody":[{"parameters":[{"name":"pos","documentation":"the position into the texture","type":"Vector2"},{"name":"size","documentation":"the portion to fit the clip space to","type":"Size"},{"name":"clear","documentation":"true to clear the portion's color/depth data","type":"boolean"}],"returnType":"void","documentation":"Bind the texture to the rendering engine to render in the zone of the given size at the given position.\nUse this method when you want to render into the texture map with a clipspace set to the location and size of the given rect.\nDon't forget to call unbindTexture when you're done rendering"}],"entryType":"function"},{"name":"unbindTexture","documentation":"Unbind the texture map from the rendering engine.\nCall this method when you're done rendering. A previous call to bindTextureForRect has to be made.","type":"(dumpForDebug?: boolean) => void","functionBody":[{"parameters":[{"name":"dumpForDebug","documentation":"if set to true the content of the texture map will be dumped to a picture file that will be sent to the internet browser.","type":"boolean"}],"returnType":"void","documentation":"Unbind the texture map from the rendering engine.\nCall this method when you're done rendering. A previous call to bindTextureForRect has to be made."}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => MapTexture","functionBody":[{"parameters":[],"returnType":"MapTexture","documentation":""}],"entryType":"function"}],"properties":[{"name":"_rectPackingMap","documentation":"","type":"any","entryType":"property"},{"name":"_size","documentation":"","type":"any","entryType":"property"},{"name":"_replacedViewport","documentation":"","type":"any","entryType":"property"},{"name":"freeSpace","documentation":"Return the available space in the range of [O;1]. 0 being not space left at all, 1 being an empty texture map.\nThis is the cumulated space, not the biggest available surface. Due to fragmentation you may not allocate a rect corresponding to this surface.\n@returns {}","type":"number","entryType":"property"},{"name":"canRescale","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.Texture"]},{"name":"MirrorTexture","documentation":"","type":"typeof MirrorTexture","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"size","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"generateMipMaps","documentation":"","type":"boolean"}],"returnType":"MirrorTexture","documentation":""}],"entryType":"class","functions":[{"name":"clone","documentation":"","type":"() => MirrorTexture","functionBody":[{"parameters":[],"returnType":"MirrorTexture","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"mirrorPlane","documentation":"","type":"Plane","entryType":"property"},{"name":"_transformMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_mirrorMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_savedViewMatrix","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.RenderTargetTexture"]},{"name":"RawTexture","documentation":"","type":"typeof RawTexture","constructors":[{"parameters":[{"name":"data","documentation":"","type":"ArrayBufferView"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"format","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"generateMipMaps","documentation":"","type":"boolean"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"RawTexture","documentation":""}],"entryType":"class","functions":[{"name":"update","documentation":"","type":"(data: ArrayBufferView) => void","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"ArrayBufferView"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"CreateLuminanceTexture","documentation":"","type":"(data: ArrayBufferView, width: number, height: number, scene: Scene, generateMipMaps?: boolean, i...","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"ArrayBufferView"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"generateMipMaps","documentation":"","type":"boolean"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"RawTexture","documentation":""}],"entryType":"function"},{"name":"CreateLuminanceAlphaTexture","documentation":"","type":"(data: ArrayBufferView, width: number, height: number, scene: Scene, generateMipMaps?: boolean, i...","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"ArrayBufferView"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"generateMipMaps","documentation":"","type":"boolean"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"RawTexture","documentation":""}],"entryType":"function"},{"name":"CreateAlphaTexture","documentation":"","type":"(data: ArrayBufferView, width: number, height: number, scene: Scene, generateMipMaps?: boolean, i...","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"ArrayBufferView"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"generateMipMaps","documentation":"","type":"boolean"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"RawTexture","documentation":""}],"entryType":"function"},{"name":"CreateRGBTexture","documentation":"","type":"(data: ArrayBufferView, width: number, height: number, scene: Scene, generateMipMaps?: boolean, i...","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"ArrayBufferView"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"generateMipMaps","documentation":"","type":"boolean"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"RawTexture","documentation":""}],"entryType":"function"},{"name":"CreateRGBATexture","documentation":"","type":"(data: ArrayBufferView, width: number, height: number, scene: Scene, generateMipMaps?: boolean, i...","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"ArrayBufferView"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"generateMipMaps","documentation":"","type":"boolean"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"RawTexture","documentation":""}],"entryType":"function"}],"properties":[{"name":"format","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Texture"]},{"name":"RefractionTexture","documentation":"Creates a refraction texture used by refraction channel of the standard material.","type":"typeof RefractionTexture","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"size","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"generateMipMaps","documentation":"","type":"boolean"}],"returnType":"RefractionTexture","documentation":""}],"entryType":"class","functions":[{"name":"clone","documentation":"","type":"() => RefractionTexture","functionBody":[{"parameters":[],"returnType":"RefractionTexture","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"refractionPlane","documentation":"","type":"Plane","entryType":"property"},{"name":"depth","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.RenderTargetTexture"]},{"name":"RenderTargetTexture","documentation":"","type":"typeof RenderTargetTexture","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"size","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"generateMipMaps","documentation":"","type":"boolean"},{"name":"doNotChangeAspectRatio","documentation":"","type":"boolean"},{"name":"type","documentation":"","type":"number"},{"name":"isCube","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"generateDepthBuffer","documentation":"","type":"boolean"},{"name":"generateStencilBuffer","documentation":"","type":"boolean"}],"returnType":"RenderTargetTexture","documentation":""}],"entryType":"class","functions":[{"name":"resetRefreshCounter","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_shouldRender","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getRenderSize","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"scale","documentation":"","type":"(ratio: number) => void","functionBody":[{"parameters":[{"name":"ratio","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getReflectionTextureMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"resize","documentation":"","type":"(size: any, generateMipMaps?: boolean) => void","functionBody":[{"parameters":[{"name":"size","documentation":"","type":"any"},{"name":"generateMipMaps","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"render","documentation":"","type":"(useCameraPostProcess?: boolean, dumpForDebug?: boolean) => void","functionBody":[{"parameters":[{"name":"useCameraPostProcess","documentation":"","type":"boolean"},{"name":"dumpForDebug","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"renderToTarget","documentation":"","type":"(faceIndex: number, currentRenderList: AbstractMesh[], currentRenderListLength: number, useCamera...","functionBody":[{"parameters":[{"name":"faceIndex","documentation":"","type":"number"},{"name":"currentRenderList","documentation":"","type":"AbstractMesh[]"},{"name":"currentRenderListLength","documentation":"","type":"number"},{"name":"useCameraPostProcess","documentation":"","type":"boolean"},{"name":"dumpForDebug","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setRenderingOrder","documentation":"Overrides the default sort function applied in the renderging group to prepare the meshes.\nThis allowed control for front to back rendering or reversly depending of the special needs.","type":"(renderingGroupId: number, opaqueSortCompareFn?: (a: SubMesh, b: SubMesh) => number, alphaTestSor...","functionBody":[{"parameters":[{"name":"renderingGroupId","documentation":"The rendering group id corresponding to its index","type":"number"},{"name":"opaqueSortCompareFn","documentation":"The opaque queue comparison function use to sort.","type":"(a: SubMesh, b: SubMesh) => number"},{"name":"alphaTestSortCompareFn","documentation":"The alpha test queue comparison function use to sort.","type":"(a: SubMesh, b: SubMesh) => number"},{"name":"transparentSortCompareFn","documentation":"The transparent queue comparison function use to sort.","type":"(a: SubMesh, b: SubMesh) => number"}],"returnType":"void","documentation":"Overrides the default sort function applied in the renderging group to prepare the meshes.\nThis allowed control for front to back rendering or reversly depending of the special needs."}],"entryType":"function"},{"name":"setRenderingAutoClearDepthStencil","documentation":"Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.","type":"(renderingGroupId: number, autoClearDepthStencil: boolean) => void","functionBody":[{"parameters":[{"name":"renderingGroupId","documentation":"The rendering group id corresponding to its index","type":"number"},{"name":"autoClearDepthStencil","documentation":"Automatically clears depth and stencil between groups if true.","type":"boolean"}],"returnType":"void","documentation":"Specifies whether or not the stencil and depth buffer are cleared between two rendering groups."}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => RenderTargetTexture","functionBody":[{"parameters":[],"returnType":"RenderTargetTexture","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"isCube","documentation":"","type":"boolean","entryType":"property"},{"name":"_REFRESHRATE_RENDER_ONCE","documentation":"","type":"number","entryType":"property"},{"name":"_REFRESHRATE_RENDER_ONEVERYFRAME","documentation":"","type":"number","entryType":"property"},{"name":"_REFRESHRATE_RENDER_ONEVERYTWOFRAMES","documentation":"","type":"number","entryType":"property"},{"name":"REFRESHRATE_RENDER_ONCE","documentation":"","type":"number","entryType":"property"},{"name":"REFRESHRATE_RENDER_ONEVERYFRAME","documentation":"","type":"number","entryType":"property"},{"name":"REFRESHRATE_RENDER_ONEVERYTWOFRAMES","documentation":"","type":"number","entryType":"property"},{"name":"renderListPredicate","documentation":"Use this predicate to dynamically define the list of mesh you want to render.\nIf set, the renderList property will be overwritten.","type":"(AbstractMesh: any) => boolean","entryType":"property"},{"name":"renderList","documentation":"Use this list to define the list of mesh you want to render.","type":"AbstractMesh[]","entryType":"property"},{"name":"renderParticles","documentation":"","type":"boolean","entryType":"property"},{"name":"renderSprites","documentation":"","type":"boolean","entryType":"property"},{"name":"coordinatesMode","documentation":"","type":"number","entryType":"property"},{"name":"activeCamera","documentation":"","type":"Camera","entryType":"property"},{"name":"customRenderFunction","documentation":"","type":"(opaqueSubMeshes: SmartArray<SubMesh>, transparentSubMeshes: SmartArray<SubMesh>, alphaTestSubMes...","entryType":"property"},{"name":"useCameraPostProcesses","documentation":"","type":"boolean","entryType":"property"},{"name":"onAfterUnbindObservable","documentation":"An event triggered when the texture is unbind.\n@type {BABYLON.Observable}","type":"Observable<RenderTargetTexture>","entryType":"property"},{"name":"_onAfterUnbindObserver","documentation":"","type":"any","entryType":"property"},{"name":"onAfterUnbind","documentation":"","type":"() => void","entryType":"property"},{"name":"onBeforeRenderObservable","documentation":"An event triggered before rendering the texture\n@type {BABYLON.Observable}","type":"Observable<number>","entryType":"property"},{"name":"_onBeforeRenderObserver","documentation":"","type":"any","entryType":"property"},{"name":"onBeforeRender","documentation":"","type":"(faceIndex: number) => void","entryType":"property"},{"name":"onAfterRenderObservable","documentation":"An event triggered after rendering the texture\n@type {BABYLON.Observable}","type":"Observable<number>","entryType":"property"},{"name":"_onAfterRenderObserver","documentation":"","type":"any","entryType":"property"},{"name":"onAfterRender","documentation":"","type":"(faceIndex: number) => void","entryType":"property"},{"name":"onClearObservable","documentation":"An event triggered after the texture clear\n@type {BABYLON.Observable}","type":"Observable<Engine>","entryType":"property"},{"name":"_onClearObserver","documentation":"","type":"any","entryType":"property"},{"name":"onClear","documentation":"","type":"(Engine: Engine) => void","entryType":"property"},{"name":"_size","documentation":"","type":"any","entryType":"property"},{"name":"_generateMipMaps","documentation":"","type":"boolean","entryType":"property"},{"name":"_renderingManager","documentation":"","type":"any","entryType":"property"},{"name":"_waitingRenderList","documentation":"","type":"string[]","entryType":"property"},{"name":"_doNotChangeAspectRatio","documentation":"","type":"any","entryType":"property"},{"name":"_currentRefreshId","documentation":"","type":"any","entryType":"property"},{"name":"_refreshRate","documentation":"","type":"any","entryType":"property"},{"name":"_textureMatrix","documentation":"","type":"any","entryType":"property"},{"name":"refreshRate","documentation":"","type":"number","entryType":"property"},{"name":"canRescale","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.Texture"]},{"name":"Texture","documentation":"","type":"typeof Texture","constructors":[{"parameters":[{"name":"url","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"noMipmap","documentation":"","type":"boolean"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"onLoad","documentation":"","type":"() => void"},{"name":"onError","documentation":"","type":"() => void"},{"name":"buffer","documentation":"","type":"any"},{"name":"deleteBuffer","documentation":"","type":"boolean"}],"returnType":"Texture","documentation":""}],"entryType":"class","functions":[{"name":"delayLoad","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateSamplingMode","documentation":"","type":"(samplingMode: number) => void","functionBody":[{"parameters":[{"name":"samplingMode","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_prepareRowForTextureGeneration","documentation":"","type":"(x: any, y: any, z: any, t: any) => any","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"any"},{"name":"y","documentation":"","type":"any"},{"name":"z","documentation":"","type":"any"},{"name":"t","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getTextureMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"getReflectionTextureMatrix","documentation":"","type":"() => Matrix","functionBody":[{"parameters":[],"returnType":"Matrix","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => Texture","functionBody":[{"parameters":[],"returnType":"Texture","documentation":""}],"entryType":"function"},{"name":"CreateFromBase64String","documentation":"","type":"(data: string, name: string, scene: Scene, noMipmap?: boolean, invertY?: boolean, samplingMode?: ...","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"string"},{"name":"name","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"noMipmap","documentation":"","type":"boolean"},{"name":"invertY","documentation":"","type":"boolean"},{"name":"samplingMode","documentation":"","type":"number"},{"name":"onLoad","documentation":"","type":"() => void"},{"name":"onError","documentation":"","type":"() => void"}],"returnType":"Texture","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedTexture: any, scene: Scene, rootUrl: string) => BaseTexture","functionBody":[{"parameters":[{"name":"parsedTexture","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"BaseTexture","documentation":""}],"entryType":"function"}],"properties":[{"name":"NEAREST_SAMPLINGMODE","documentation":"","type":"number","entryType":"property"},{"name":"BILINEAR_SAMPLINGMODE","documentation":"","type":"number","entryType":"property"},{"name":"TRILINEAR_SAMPLINGMODE","documentation":"","type":"number","entryType":"property"},{"name":"EXPLICIT_MODE","documentation":"","type":"number","entryType":"property"},{"name":"SPHERICAL_MODE","documentation":"","type":"number","entryType":"property"},{"name":"PLANAR_MODE","documentation":"","type":"number","entryType":"property"},{"name":"CUBIC_MODE","documentation":"","type":"number","entryType":"property"},{"name":"PROJECTION_MODE","documentation":"","type":"number","entryType":"property"},{"name":"SKYBOX_MODE","documentation":"","type":"number","entryType":"property"},{"name":"INVCUBIC_MODE","documentation":"","type":"number","entryType":"property"},{"name":"EQUIRECTANGULAR_MODE","documentation":"","type":"number","entryType":"property"},{"name":"FIXED_EQUIRECTANGULAR_MODE","documentation":"","type":"number","entryType":"property"},{"name":"CLAMP_ADDRESSMODE","documentation":"","type":"number","entryType":"property"},{"name":"WRAP_ADDRESSMODE","documentation":"","type":"number","entryType":"property"},{"name":"MIRROR_ADDRESSMODE","documentation":"","type":"number","entryType":"property"},{"name":"url","documentation":"","type":"string","entryType":"property"},{"name":"uOffset","documentation":"","type":"number","entryType":"property"},{"name":"vOffset","documentation":"","type":"number","entryType":"property"},{"name":"uScale","documentation":"","type":"number","entryType":"property"},{"name":"vScale","documentation":"","type":"number","entryType":"property"},{"name":"uAng","documentation":"","type":"number","entryType":"property"},{"name":"vAng","documentation":"","type":"number","entryType":"property"},{"name":"wAng","documentation":"","type":"number","entryType":"property"},{"name":"noMipmap","documentation":"","type":"boolean","entryType":"property"},{"name":"_noMipmap","documentation":"","type":"any","entryType":"property"},{"name":"_invertY","documentation":"","type":"boolean","entryType":"property"},{"name":"_rowGenerationMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_cachedTextureMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_projectionModeMatrix","documentation":"","type":"any","entryType":"property"},{"name":"_t0","documentation":"","type":"any","entryType":"property"},{"name":"_t1","documentation":"","type":"any","entryType":"property"},{"name":"_t2","documentation":"","type":"any","entryType":"property"},{"name":"_cachedUOffset","documentation":"","type":"any","entryType":"property"},{"name":"_cachedVOffset","documentation":"","type":"any","entryType":"property"},{"name":"_cachedUScale","documentation":"","type":"any","entryType":"property"},{"name":"_cachedVScale","documentation":"","type":"any","entryType":"property"},{"name":"_cachedUAng","documentation":"","type":"any","entryType":"property"},{"name":"_cachedVAng","documentation":"","type":"any","entryType":"property"},{"name":"_cachedWAng","documentation":"","type":"any","entryType":"property"},{"name":"_cachedCoordinatesMode","documentation":"","type":"any","entryType":"property"},{"name":"_samplingMode","documentation":"","type":"number","entryType":"property"},{"name":"_buffer","documentation":"","type":"any","entryType":"property"},{"name":"_deleteBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_delayedOnLoad","documentation":"","type":"any","entryType":"property"},{"name":"_delayedOnError","documentation":"","type":"any","entryType":"property"},{"name":"_onLoadObservarble","documentation":"","type":"any","entryType":"property"},{"name":"onLoadObservable","documentation":"","type":"Observable<boolean>","entryType":"property"}],"heritageClauses":["BABYLON.BaseTexture"]},{"name":"VideoTexture","documentation":"","type":"typeof VideoTexture","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"urlsOrVideo","documentation":"can be used to provide an array of urls or an already setup HTML video element.","type":"string[] | HTMLVideoElement"},{"name":"scene","documentation":"is obviously the current scene.","type":"Scene"},{"name":"generateMipMaps","documentation":"can be used to turn on mipmaps (Can be expensive for videoTextures because they are often updated).","type":"boolean"},{"name":"invertY","documentation":"is false by default but can be used to invert video on Y axis","type":"boolean"},{"name":"samplingMode","documentation":"controls the sampling method and is set to TRILINEAR_SAMPLINGMODE by default","type":"number"}],"returnType":"VideoTexture","documentation":"Creates a video texture.\nSample : https://doc.babylonjs.com/tutorials/01._Advanced_Texturing"}],"entryType":"class","functions":[{"name":"_createTexture","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"update","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"}],"properties":[{"name":"video","documentation":"","type":"HTMLVideoElement","entryType":"property"},{"name":"_autoLaunch","documentation":"","type":"any","entryType":"property"},{"name":"_lastUpdate","documentation":"","type":"any","entryType":"property"},{"name":"_generateMipMaps","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Texture"]},{"name":"CannonJSPlugin","documentation":"","type":"typeof CannonJSPlugin","constructors":[{"parameters":[{"name":"_useDeltaForWorldStep","documentation":"","type":"boolean"},{"name":"iterations","documentation":"","type":"number"}],"returnType":"CannonJSPlugin","documentation":""}],"entryType":"class","functions":[{"name":"setGravity","documentation":"","type":"(gravity: Vector3) => void","functionBody":[{"parameters":[{"name":"gravity","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setTimeStep","documentation":"","type":"(timeStep: number) => void","functionBody":[{"parameters":[{"name":"timeStep","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"executeStep","documentation":"","type":"(delta: number, impostors: PhysicsImpostor[]) => void","functionBody":[{"parameters":[{"name":"delta","documentation":"","type":"number"},{"name":"impostors","documentation":"","type":"PhysicsImpostor[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"applyImpulse","documentation":"","type":"(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"},{"name":"force","documentation":"","type":"Vector3"},{"name":"contactPoint","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"applyForce","documentation":"","type":"(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"},{"name":"force","documentation":"","type":"Vector3"},{"name":"contactPoint","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"generatePhysicsBody","documentation":"","type":"(impostor: PhysicsImpostor) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_processChildMeshes","documentation":"","type":"(mainImpostor: any) => any","functionBody":[{"parameters":[{"name":"mainImpostor","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"removePhysicsBody","documentation":"","type":"(impostor: PhysicsImpostor) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"generateJoint","documentation":"","type":"(impostorJoint: PhysicsImpostorJoint) => void","functionBody":[{"parameters":[{"name":"impostorJoint","documentation":"","type":"PhysicsImpostorJoint"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"removeJoint","documentation":"","type":"(impostorJoint: PhysicsImpostorJoint) => void","functionBody":[{"parameters":[{"name":"impostorJoint","documentation":"","type":"PhysicsImpostorJoint"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_addMaterial","documentation":"","type":"(name: any, friction: any, restitution: any) => any","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"any"},{"name":"friction","documentation":"","type":"any"},{"name":"restitution","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_checkWithEpsilon","documentation":"","type":"(value: any) => any","functionBody":[{"parameters":[{"name":"value","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createShape","documentation":"","type":"(impostor: any) => any","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_createHeightmap","documentation":"","type":"(object: any, pointDepth?: any) => any","functionBody":[{"parameters":[{"name":"object","documentation":"","type":"any"},{"name":"pointDepth","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_updatePhysicsBodyTransformation","documentation":"","type":"(impostor: any) => any","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setTransformationFromPhysicsBody","documentation":"","type":"(impostor: PhysicsImpostor) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setPhysicsBodyTransformation","documentation":"","type":"(impostor: PhysicsImpostor, newPosition: Vector3, newRotation: Quaternion) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"},{"name":"newPosition","documentation":"","type":"Vector3"},{"name":"newRotation","documentation":"","type":"Quaternion"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isSupported","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"setLinearVelocity","documentation":"","type":"(impostor: PhysicsImpostor, velocity: Vector3) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"},{"name":"velocity","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setAngularVelocity","documentation":"","type":"(impostor: PhysicsImpostor, velocity: Vector3) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"},{"name":"velocity","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getLinearVelocity","documentation":"","type":"(impostor: PhysicsImpostor) => Vector3","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"getAngularVelocity","documentation":"","type":"(impostor: PhysicsImpostor) => Vector3","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"setBodyMass","documentation":"","type":"(impostor: PhysicsImpostor, mass: number) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"},{"name":"mass","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"sleepBody","documentation":"","type":"(impostor: PhysicsImpostor) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"wakeUpBody","documentation":"","type":"(impostor: PhysicsImpostor) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateDistanceJoint","documentation":"","type":"(joint: PhysicsJoint, maxDistance: number, minDistance?: number) => void","functionBody":[{"parameters":[{"name":"joint","documentation":"","type":"PhysicsJoint"},{"name":"maxDistance","documentation":"","type":"number"},{"name":"minDistance","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"enableMotor","documentation":"","type":"(joint: any, motorIndex?: any) => any","functionBody":[{"parameters":[{"name":"joint","documentation":"","type":"any"},{"name":"motorIndex","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"disableMotor","documentation":"","type":"(joint: any, motorIndex?: any) => any","functionBody":[{"parameters":[{"name":"joint","documentation":"","type":"any"},{"name":"motorIndex","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setMotor","documentation":"","type":"(joint: IMotorEnabledJoint, speed?: number, maxForce?: number, motorIndex?: number) => void","functionBody":[{"parameters":[{"name":"joint","documentation":"","type":"IMotorEnabledJoint"},{"name":"speed","documentation":"","type":"number"},{"name":"maxForce","documentation":"","type":"number"},{"name":"motorIndex","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setLimit","documentation":"","type":"(joint: IMotorEnabledJoint, upperLimit: number, lowerLimit?: number) => void","functionBody":[{"parameters":[{"name":"joint","documentation":"","type":"IMotorEnabledJoint"},{"name":"upperLimit","documentation":"","type":"number"},{"name":"lowerLimit","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_useDeltaForWorldStep","documentation":"","type":"any","entryType":"property"},{"name":"world","documentation":"","type":"any","entryType":"property"},{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"_physicsMaterials","documentation":"","type":"any","entryType":"property"},{"name":"_fixedTimeStep","documentation":"","type":"any","entryType":"property"},{"name":"_currentCollisionGroup","documentation":"","type":"any","entryType":"property"},{"name":"_minus90X","documentation":"","type":"any","entryType":"property"},{"name":"_plus90X","documentation":"","type":"any","entryType":"property"},{"name":"_tmpPosition","documentation":"","type":"any","entryType":"property"},{"name":"_tmpQuaternion","documentation":"","type":"any","entryType":"property"},{"name":"_tmpDeltaPosition","documentation":"","type":"any","entryType":"property"},{"name":"_tmpDeltaRotation","documentation":"","type":"any","entryType":"property"},{"name":"_tmpUnityRotation","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.IPhysicsEnginePlugin"]},{"name":"OimoJSPlugin","documentation":"","type":"typeof OimoJSPlugin","constructors":[{"parameters":[{"name":"iterations","documentation":"","type":"number"}],"returnType":"OimoJSPlugin","documentation":""}],"entryType":"class","functions":[{"name":"setGravity","documentation":"","type":"(gravity: Vector3) => void","functionBody":[{"parameters":[{"name":"gravity","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setTimeStep","documentation":"","type":"(timeStep: number) => void","functionBody":[{"parameters":[{"name":"timeStep","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"executeStep","documentation":"","type":"(delta: number, impostors: PhysicsImpostor[]) => void","functionBody":[{"parameters":[{"name":"delta","documentation":"","type":"number"},{"name":"impostors","documentation":"","type":"PhysicsImpostor[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"applyImpulse","documentation":"","type":"(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"},{"name":"force","documentation":"","type":"Vector3"},{"name":"contactPoint","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"applyForce","documentation":"","type":"(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"},{"name":"force","documentation":"","type":"Vector3"},{"name":"contactPoint","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"generatePhysicsBody","documentation":"","type":"(impostor: PhysicsImpostor) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"removePhysicsBody","documentation":"","type":"(impostor: PhysicsImpostor) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"generateJoint","documentation":"","type":"(impostorJoint: PhysicsImpostorJoint) => void","functionBody":[{"parameters":[{"name":"impostorJoint","documentation":"","type":"PhysicsImpostorJoint"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"removeJoint","documentation":"","type":"(impostorJoint: PhysicsImpostorJoint) => void","functionBody":[{"parameters":[{"name":"impostorJoint","documentation":"","type":"PhysicsImpostorJoint"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isSupported","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"setTransformationFromPhysicsBody","documentation":"","type":"(impostor: PhysicsImpostor) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setPhysicsBodyTransformation","documentation":"","type":"(impostor: PhysicsImpostor, newPosition: Vector3, newRotation: Quaternion) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"},{"name":"newPosition","documentation":"","type":"Vector3"},{"name":"newRotation","documentation":"","type":"Quaternion"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getLastShape","documentation":"","type":"(body: any) => any","functionBody":[{"parameters":[{"name":"body","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setLinearVelocity","documentation":"","type":"(impostor: PhysicsImpostor, velocity: Vector3) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"},{"name":"velocity","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setAngularVelocity","documentation":"","type":"(impostor: PhysicsImpostor, velocity: Vector3) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"},{"name":"velocity","documentation":"","type":"Vector3"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getLinearVelocity","documentation":"","type":"(impostor: PhysicsImpostor) => Vector3","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"getAngularVelocity","documentation":"","type":"(impostor: PhysicsImpostor) => Vector3","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"Vector3","documentation":""}],"entryType":"function"},{"name":"setBodyMass","documentation":"","type":"(impostor: PhysicsImpostor, mass: number) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"},{"name":"mass","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"sleepBody","documentation":"","type":"(impostor: PhysicsImpostor) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"wakeUpBody","documentation":"","type":"(impostor: PhysicsImpostor) => void","functionBody":[{"parameters":[{"name":"impostor","documentation":"","type":"PhysicsImpostor"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateDistanceJoint","documentation":"","type":"(joint: IMotorEnabledJoint, maxDistance: number, minDistance?: number) => void","functionBody":[{"parameters":[{"name":"joint","documentation":"","type":"IMotorEnabledJoint"},{"name":"maxDistance","documentation":"","type":"number"},{"name":"minDistance","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setMotor","documentation":"","type":"(joint: IMotorEnabledJoint, speed: number, maxForce?: number, motorIndex?: number) => void","functionBody":[{"parameters":[{"name":"joint","documentation":"","type":"IMotorEnabledJoint"},{"name":"speed","documentation":"","type":"number"},{"name":"maxForce","documentation":"","type":"number"},{"name":"motorIndex","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setLimit","documentation":"","type":"(joint: IMotorEnabledJoint, upperLimit: number, lowerLimit?: number, motorIndex?: number) => void","functionBody":[{"parameters":[{"name":"joint","documentation":"","type":"IMotorEnabledJoint"},{"name":"upperLimit","documentation":"","type":"number"},{"name":"lowerLimit","documentation":"","type":"number"},{"name":"motorIndex","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"world","documentation":"","type":"any","entryType":"property"},{"name":"name","documentation":"","type":"string","entryType":"property"},{"name":"_tmpImpostorsArray","documentation":"","type":"any","entryType":"property"},{"name":"_tmpPositionVector","documentation":"","type":"any","entryType":"property"}]},{"name":"PostProcessRenderEffect","documentation":"","type":"typeof PostProcessRenderEffect","constructors":[{"parameters":[{"name":"engine","documentation":"","type":"Engine"},{"name":"name","documentation":"","type":"string"},{"name":"getPostProcess","documentation":"","type":"() => PostProcess"},{"name":"singleInstance","documentation":"","type":"boolean"}],"returnType":"PostProcessRenderEffect","documentation":""}],"entryType":"class","functions":[{"name":"_update","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addPass","documentation":"","type":"(renderPass: PostProcessRenderPass) => void","functionBody":[{"parameters":[{"name":"renderPass","documentation":"","type":"PostProcessRenderPass"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"removePass","documentation":"","type":"(renderPass: PostProcessRenderPass) => void","functionBody":[{"parameters":[{"name":"renderPass","documentation":"","type":"PostProcessRenderPass"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"addRenderEffectAsPass","documentation":"","type":"(renderEffect: PostProcessRenderEffect) => void","functionBody":[{"parameters":[{"name":"renderEffect","documentation":"","type":"PostProcessRenderEffect"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getPass","documentation":"","type":"(passName: string) => void","functionBody":[{"parameters":[{"name":"passName","documentation":"","type":"string"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"emptyPasses","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_attachCameras","documentation":"","type":"{ (cameras: Camera): any; (cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_attachCameras","documentation":"","type":"{ (cameras: Camera): any; (cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_detachCameras","documentation":"","type":"{ (cameras: Camera): any; (cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_detachCameras","documentation":"","type":"{ (cameras: Camera): any; (cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_enable","documentation":"","type":"{ (cameras: Camera): any; (cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_enable","documentation":"","type":"{ (cameras: Camera): any; (cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_disable","documentation":"","type":"{ (cameras: Camera): any; (cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_disable","documentation":"","type":"{ (cameras: Camera): any; (cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getPostProcess","documentation":"","type":"(camera?: Camera) => PostProcess","functionBody":[{"parameters":[{"name":"camera","documentation":"","type":"Camera"}],"returnType":"PostProcess","documentation":""}],"entryType":"function"},{"name":"_linkParameters","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_linkTextures","documentation":"","type":"(effect: any) => any","functionBody":[{"parameters":[{"name":"effect","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_engine","documentation":"","type":"any","entryType":"property"},{"name":"_postProcesses","documentation":"","type":"any","entryType":"property"},{"name":"_getPostProcess","documentation":"","type":"any","entryType":"property"},{"name":"_singleInstance","documentation":"","type":"any","entryType":"property"},{"name":"_cameras","documentation":"","type":"any","entryType":"property"},{"name":"_indicesForCamera","documentation":"","type":"any","entryType":"property"},{"name":"_renderPasses","documentation":"","type":"any","entryType":"property"},{"name":"_renderEffectAsPasses","documentation":"","type":"any","entryType":"property"},{"name":"_name","documentation":"","type":"string","entryType":"property"},{"name":"applyParameters","documentation":"","type":"(postProcess: PostProcess) => void","entryType":"property"},{"name":"isSupported","documentation":"","type":"boolean","entryType":"property"}]},{"name":"PostProcessRenderPass","documentation":"","type":"typeof PostProcessRenderPass","constructors":[{"parameters":[{"name":"scene","documentation":"","type":"Scene"},{"name":"name","documentation":"","type":"string"},{"name":"size","documentation":"","type":"number"},{"name":"renderList","documentation":"","type":"Mesh[]"},{"name":"beforeRender","documentation":"","type":"() => void"},{"name":"afterRender","documentation":"","type":"() => void"}],"returnType":"PostProcessRenderPass","documentation":""}],"entryType":"class","functions":[{"name":"_incRefCount","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"_decRefCount","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"_update","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setRenderList","documentation":"","type":"(renderList: Mesh[]) => void","functionBody":[{"parameters":[{"name":"renderList","documentation":"","type":"Mesh[]"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"getRenderTexture","documentation":"","type":"() => RenderTargetTexture","functionBody":[{"parameters":[],"returnType":"RenderTargetTexture","documentation":""}],"entryType":"function"}],"properties":[{"name":"_enabled","documentation":"","type":"any","entryType":"property"},{"name":"_renderList","documentation":"","type":"any","entryType":"property"},{"name":"_renderTexture","documentation":"","type":"any","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_refCount","documentation":"","type":"any","entryType":"property"},{"name":"_name","documentation":"","type":"string","entryType":"property"}]},{"name":"PostProcessRenderPipeline","documentation":"","type":"typeof PostProcessRenderPipeline","constructors":[{"parameters":[{"name":"engine","documentation":"","type":"Engine"},{"name":"name","documentation":"","type":"string"}],"returnType":"PostProcessRenderPipeline","documentation":""}],"entryType":"class","functions":[{"name":"addEffect","documentation":"","type":"(renderEffect: PostProcessRenderEffect) => void","functionBody":[{"parameters":[{"name":"renderEffect","documentation":"","type":"PostProcessRenderEffect"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"removeEffect","documentation":"","type":"(renderEffect: PostProcessRenderEffect) => void","functionBody":[{"parameters":[{"name":"renderEffect","documentation":"","type":"PostProcessRenderEffect"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_enableEffect","documentation":"","type":"{ (renderEffectName: string, cameras: Camera): any; (renderEffectName: string, cameras: Camera[])...","functionBody":[{"parameters":[{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_enableEffect","documentation":"","type":"{ (renderEffectName: string, cameras: Camera): any; (renderEffectName: string, cameras: Camera[])...","functionBody":[{"parameters":[{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_disableEffect","documentation":"","type":"{ (renderEffectName: string, cameras: Camera): any; (renderEffectName: string, cameras: Camera[])...","functionBody":[{"parameters":[{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_disableEffect","documentation":"","type":"{ (renderEffectName: string, cameras: Camera): any; (renderEffectName: string, cameras: Camera[])...","functionBody":[{"parameters":[{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_attachCameras","documentation":"","type":"{ (cameras: Camera, unique: boolean): any; (cameras: Camera[], unique: boolean): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"},{"name":"unique","documentation":"","type":"boolean"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"},{"name":"unique","documentation":"","type":"boolean"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_attachCameras","documentation":"","type":"{ (cameras: Camera, unique: boolean): any; (cameras: Camera[], unique: boolean): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"},{"name":"unique","documentation":"","type":"boolean"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"},{"name":"unique","documentation":"","type":"boolean"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_detachCameras","documentation":"","type":"{ (cameras: Camera): any; (cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_detachCameras","documentation":"","type":"{ (cameras: Camera): any; (cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_enableDisplayOnlyPass","documentation":"","type":"{ (passName: any, cameras: Camera): any; (passName: any, cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"passName","documentation":"","type":"any"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"passName","documentation":"","type":"any"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_enableDisplayOnlyPass","documentation":"","type":"{ (passName: any, cameras: Camera): any; (passName: any, cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"passName","documentation":"","type":"any"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"passName","documentation":"","type":"any"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_disableDisplayOnlyPass","documentation":"","type":"{ (cameras: Camera): any; (cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_disableDisplayOnlyPass","documentation":"","type":"{ (cameras: Camera): any; (cameras: Camera[]): any; }","functionBody":[{"parameters":[{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_update","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(source: any, scene: Scene, rootUrl: string) => PostProcessRenderPipeline","functionBody":[{"parameters":[{"name":"source","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"rootUrl","documentation":"","type":"string"}],"returnType":"PostProcessRenderPipeline","documentation":""}],"entryType":"function"}],"properties":[{"name":"_engine","documentation":"","type":"any","entryType":"property"},{"name":"_renderEffects","documentation":"","type":"any","entryType":"property"},{"name":"_renderEffectsForIsolatedPass","documentation":"","type":"any","entryType":"property"},{"name":"_cameras","documentation":"","type":"any","entryType":"property"},{"name":"_name","documentation":"","type":"string","entryType":"property"},{"name":"PASS_EFFECT_NAME","documentation":"","type":"any","entryType":"property"},{"name":"PASS_SAMPLER_NAME","documentation":"","type":"any","entryType":"property"},{"name":"isSupported","documentation":"","type":"boolean","entryType":"property"}]},{"name":"PostProcessRenderPipelineManager","documentation":"","type":"typeof PostProcessRenderPipelineManager","constructors":[{"parameters":[],"returnType":"PostProcessRenderPipelineManager","documentation":""}],"entryType":"class","functions":[{"name":"addPipeline","documentation":"","type":"(renderPipeline: PostProcessRenderPipeline) => void","functionBody":[{"parameters":[{"name":"renderPipeline","documentation":"","type":"PostProcessRenderPipeline"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"attachCamerasToRenderPipeline","documentation":"","type":"{ (renderPipelineName: string, cameras: Camera, unique?: boolean): any; (renderPipelineName: stri...","functionBody":[{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"},{"name":"unique","documentation":"","type":"boolean"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"},{"name":"unique","documentation":"","type":"boolean"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"attachCamerasToRenderPipeline","documentation":"","type":"{ (renderPipelineName: string, cameras: Camera, unique?: boolean): any; (renderPipelineName: stri...","functionBody":[{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"},{"name":"unique","documentation":"","type":"boolean"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"},{"name":"unique","documentation":"","type":"boolean"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"detachCamerasFromRenderPipeline","documentation":"","type":"{ (renderPipelineName: string, cameras: Camera): any; (renderPipelineName: string, cameras: Camer...","functionBody":[{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"detachCamerasFromRenderPipeline","documentation":"","type":"{ (renderPipelineName: string, cameras: Camera): any; (renderPipelineName: string, cameras: Camer...","functionBody":[{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"enableEffectInPipeline","documentation":"","type":"{ (renderPipelineName: string, renderEffectName: string, cameras: Camera): any; (renderPipelineNa...","functionBody":[{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"enableEffectInPipeline","documentation":"","type":"{ (renderPipelineName: string, renderEffectName: string, cameras: Camera): any; (renderPipelineNa...","functionBody":[{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"disableEffectInPipeline","documentation":"","type":"{ (renderPipelineName: string, renderEffectName: string, cameras: Camera): any; (renderPipelineNa...","functionBody":[{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"disableEffectInPipeline","documentation":"","type":"{ (renderPipelineName: string, renderEffectName: string, cameras: Camera): any; (renderPipelineNa...","functionBody":[{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"renderEffectName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"enableDisplayOnlyPassInPipeline","documentation":"","type":"{ (renderPipelineName: string, passName: string, cameras: Camera): any; (renderPipelineName: stri...","functionBody":[{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"passName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"passName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"enableDisplayOnlyPassInPipeline","documentation":"","type":"{ (renderPipelineName: string, passName: string, cameras: Camera): any; (renderPipelineName: stri...","functionBody":[{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"passName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"passName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"disableDisplayOnlyPassInPipeline","documentation":"","type":"{ (renderPipelineName: string, cameras: Camera): any; (renderPipelineName: string, cameras: Camer...","functionBody":[{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"disableDisplayOnlyPassInPipeline","documentation":"","type":"{ (renderPipelineName: string, cameras: Camera): any; (renderPipelineName: string, cameras: Camer...","functionBody":[{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera"}],"returnType":"any","documentation":""},{"parameters":[{"name":"renderPipelineName","documentation":"","type":"string"},{"name":"cameras","documentation":"","type":"Camera[]"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"update","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_renderPipelines","documentation":"","type":"any","entryType":"property"}]},{"name":"CustomProceduralTexture","documentation":"","type":"typeof CustomProceduralTexture","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"texturePath","documentation":"","type":"any"},{"name":"size","documentation":"","type":"number"},{"name":"scene","documentation":"","type":"Scene"},{"name":"fallbackTexture","documentation":"","type":"Texture"},{"name":"generateMipMaps","documentation":"","type":"boolean"}],"returnType":"CustomProceduralTexture","documentation":""}],"entryType":"class","functions":[{"name":"loadJson","documentation":"","type":"(jsonUrl: any) => any","functionBody":[{"parameters":[{"name":"jsonUrl","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"render","documentation":"","type":"(useCameraPostProcess?: boolean) => void","functionBody":[{"parameters":[{"name":"useCameraPostProcess","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateTextures","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"updateShaderUniforms","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_animate","documentation":"","type":"any","entryType":"property"},{"name":"_time","documentation":"","type":"any","entryType":"property"},{"name":"_config","documentation":"","type":"any","entryType":"property"},{"name":"_texturePath","documentation":"","type":"any","entryType":"property"},{"name":"animate","documentation":"","type":"boolean","entryType":"property"}],"heritageClauses":["BABYLON.ProceduralTexture"]},{"name":"ProceduralTexture","documentation":"","type":"typeof ProceduralTexture","constructors":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"size","documentation":"","type":"any"},{"name":"fragment","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"},{"name":"fallbackTexture","documentation":"","type":"Texture"},{"name":"generateMipMaps","documentation":"","type":"boolean"},{"name":"isCube","documentation":"","type":"boolean"}],"returnType":"ProceduralTexture","documentation":""}],"entryType":"class","functions":[{"name":"reset","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"isReady","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"resetRefreshCounter","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setFragment","documentation":"","type":"(fragment: any) => void","functionBody":[{"parameters":[{"name":"fragment","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_shouldRender","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"getRenderSize","documentation":"","type":"() => number","functionBody":[{"parameters":[],"returnType":"number","documentation":""}],"entryType":"function"},{"name":"resize","documentation":"","type":"(size: any, generateMipMaps: any) => void","functionBody":[{"parameters":[{"name":"size","documentation":"","type":"any"},{"name":"generateMipMaps","documentation":"","type":"any"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_checkUniform","documentation":"","type":"(uniformName: any) => any","functionBody":[{"parameters":[{"name":"uniformName","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"setTexture","documentation":"","type":"(name: string, texture: Texture) => ProceduralTexture","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"texture","documentation":"","type":"Texture"}],"returnType":"ProceduralTexture","documentation":""}],"entryType":"function"},{"name":"setFloat","documentation":"","type":"(name: string, value: number) => ProceduralTexture","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"number"}],"returnType":"ProceduralTexture","documentation":""}],"entryType":"function"},{"name":"setFloats","documentation":"","type":"(name: string, value: number[]) => ProceduralTexture","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"number[]"}],"returnType":"ProceduralTexture","documentation":""}],"entryType":"function"},{"name":"setColor3","documentation":"","type":"(name: string, value: Color3) => ProceduralTexture","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Color3"}],"returnType":"ProceduralTexture","documentation":""}],"entryType":"function"},{"name":"setColor4","documentation":"","type":"(name: string, value: Color4) => ProceduralTexture","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Color4"}],"returnType":"ProceduralTexture","documentation":""}],"entryType":"function"},{"name":"setVector2","documentation":"","type":"(name: string, value: Vector2) => ProceduralTexture","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Vector2"}],"returnType":"ProceduralTexture","documentation":""}],"entryType":"function"},{"name":"setVector3","documentation":"","type":"(name: string, value: Vector3) => ProceduralTexture","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Vector3"}],"returnType":"ProceduralTexture","documentation":""}],"entryType":"function"},{"name":"setMatrix","documentation":"","type":"(name: string, value: Matrix) => ProceduralTexture","functionBody":[{"parameters":[{"name":"name","documentation":"","type":"string"},{"name":"value","documentation":"","type":"Matrix"}],"returnType":"ProceduralTexture","documentation":""}],"entryType":"function"},{"name":"render","documentation":"","type":"(useCameraPostProcess?: boolean) => void","functionBody":[{"parameters":[{"name":"useCameraPostProcess","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"clone","documentation":"","type":"() => ProceduralTexture","functionBody":[{"parameters":[],"returnType":"ProceduralTexture","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"isCube","documentation":"","type":"boolean","entryType":"property"},{"name":"_size","documentation":"","type":"any","entryType":"property"},{"name":"_generateMipMaps","documentation":"","type":"boolean","entryType":"property"},{"name":"isEnabled","documentation":"","type":"boolean","entryType":"property"},{"name":"_doNotChangeAspectRatio","documentation":"","type":"any","entryType":"property"},{"name":"_currentRefreshId","documentation":"","type":"any","entryType":"property"},{"name":"_refreshRate","documentation":"","type":"any","entryType":"property"},{"name":"onGenerated","documentation":"","type":"() => void","entryType":"property"},{"name":"_vertexBuffers","documentation":"","type":"any","entryType":"property"},{"name":"_indexBuffer","documentation":"","type":"any","entryType":"property"},{"name":"_effect","documentation":"","type":"any","entryType":"property"},{"name":"_uniforms","documentation":"","type":"any","entryType":"property"},{"name":"_samplers","documentation":"","type":"any","entryType":"property"},{"name":"_fragment","documentation":"","type":"any","entryType":"property"},{"name":"_textures","documentation":"","type":"Texture[]","entryType":"property"},{"name":"_floats","documentation":"","type":"any","entryType":"property"},{"name":"_floatsArrays","documentation":"","type":"any","entryType":"property"},{"name":"_colors3","documentation":"","type":"any","entryType":"property"},{"name":"_colors4","documentation":"","type":"any","entryType":"property"},{"name":"_vectors2","documentation":"","type":"any","entryType":"property"},{"name":"_vectors3","documentation":"","type":"any","entryType":"property"},{"name":"_matrices","documentation":"","type":"any","entryType":"property"},{"name":"_fallbackTexture","documentation":"","type":"any","entryType":"property"},{"name":"_fallbackTextureUsed","documentation":"","type":"any","entryType":"property"},{"name":"refreshRate","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Texture"]}]},{"name":"SIMD","documentation":"","type":"any","entryType":"module","classes":[]},{"name":"BABYLON.Debug","documentation":"","type":"typeof Debug","entryType":"module","classes":[{"name":"SkeletonViewer","documentation":"Demo available here: http://www.babylonjs-playground.com/#1BZJVJ#8","type":"typeof SkeletonViewer","constructors":[{"parameters":[{"name":"skeleton","documentation":"","type":"Skeleton"},{"name":"mesh","documentation":"","type":"AbstractMesh"},{"name":"scene","documentation":"","type":"Scene"},{"name":"autoUpdateBonesMatrices","documentation":"","type":"boolean"},{"name":"renderingGroupId","documentation":"","type":"number"}],"returnType":"SkeletonViewer","documentation":""}],"entryType":"class","functions":[{"name":"_getBonePosition","documentation":"","type":"(position: any, bone: any, meshMat: any, x?: any, y?: any, z?: any) => any","functionBody":[{"parameters":[{"name":"position","documentation":"","type":"any"},{"name":"bone","documentation":"","type":"any"},{"name":"meshMat","documentation":"","type":"any"},{"name":"x","documentation":"","type":"any"},{"name":"y","documentation":"","type":"any"},{"name":"z","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getLinesForBonesWithLength","documentation":"","type":"(bones: any, meshMat: any) => any","functionBody":[{"parameters":[{"name":"bones","documentation":"","type":"any"},{"name":"meshMat","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_getLinesForBonesNoLength","documentation":"","type":"(bones: any, meshMat: any) => any","functionBody":[{"parameters":[{"name":"bones","documentation":"","type":"any"},{"name":"meshMat","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"update","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_updateBoneMatrix","documentation":"","type":"(bone: any) => any","functionBody":[{"parameters":[{"name":"bone","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"dispose","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"skeleton","documentation":"","type":"Skeleton","entryType":"property"},{"name":"mesh","documentation":"","type":"AbstractMesh","entryType":"property"},{"name":"autoUpdateBonesMatrices","documentation":"","type":"boolean","entryType":"property"},{"name":"renderingGroupId","documentation":"","type":"number","entryType":"property"},{"name":"color","documentation":"","type":"Color3","entryType":"property"},{"name":"_scene","documentation":"","type":"any","entryType":"property"},{"name":"_debugLines","documentation":"","type":"any","entryType":"property"},{"name":"_debugMesh","documentation":"","type":"any","entryType":"property"},{"name":"_isEnabled","documentation":"","type":"any","entryType":"property"},{"name":"_renderFunction","documentation":"","type":"any","entryType":"property"},{"name":"isEnabled","documentation":"","type":"boolean","entryType":"property"}]}]},{"name":"BABYLON.Geometry","documentation":"","type":"typeof Geometry","entryType":"module","classes":[]},{"name":"BABYLON.Geometry.Primitives","documentation":"","type":"typeof Primitives","entryType":"module","classes":[{"name":"_Primitive","documentation":"","type":"typeof _Primitive","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"_canBeRegenerated","documentation":"","type":"boolean"},{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"_Primitive","documentation":""}],"entryType":"class","functions":[{"name":"canBeRegenerated","documentation":"","type":"() => boolean","functionBody":[{"parameters":[],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"regenerate","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"asNewGeometry","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"},{"name":"setAllVerticesData","documentation":"","type":"(vertexData: VertexData, updatable?: boolean) => void","functionBody":[{"parameters":[{"name":"vertexData","documentation":"","type":"VertexData"},{"name":"updatable","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"setVerticesData","documentation":"","type":"(kind: string, data: number[] | Int32Array | Float32Array, updatable?: boolean) => void","functionBody":[{"parameters":[{"name":"kind","documentation":"","type":"string"},{"name":"data","documentation":"","type":"number[] | Int32Array | Float32Array"},{"name":"updatable","documentation":"","type":"boolean"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_regenerateVertexData","documentation":"","type":"() => VertexData","functionBody":[{"parameters":[],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"copy","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"_canBeRegenerated","documentation":"","type":"any","entryType":"property"},{"name":"_beingRegenerated","documentation":"","type":"any","entryType":"property"}],"heritageClauses":["BABYLON.Geometry"]},{"name":"Ribbon","documentation":"","type":"typeof Ribbon","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"pathArray","documentation":"","type":"Vector3[][]"},{"name":"closeArray","documentation":"","type":"boolean"},{"name":"closePath","documentation":"","type":"boolean"},{"name":"offset","documentation":"","type":"number"},{"name":"canBeRegenerated","documentation":"","type":"boolean"},{"name":"mesh","documentation":"","type":"Mesh"},{"name":"side","documentation":"","type":"number"}],"returnType":"Ribbon","documentation":""}],"entryType":"class","functions":[{"name":"_regenerateVertexData","documentation":"","type":"() => VertexData","functionBody":[{"parameters":[],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"copy","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"}],"properties":[{"name":"pathArray","documentation":"","type":"Vector3[][]","entryType":"property"},{"name":"closeArray","documentation":"","type":"boolean","entryType":"property"},{"name":"closePath","documentation":"","type":"boolean","entryType":"property"},{"name":"offset","documentation":"","type":"number","entryType":"property"},{"name":"side","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Geometry.Primitives._Primitive"]},{"name":"Box","documentation":"","type":"typeof Box","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"size","documentation":"","type":"number"},{"name":"canBeRegenerated","documentation":"","type":"boolean"},{"name":"mesh","documentation":"","type":"Mesh"},{"name":"side","documentation":"","type":"number"}],"returnType":"Box","documentation":""}],"entryType":"class","functions":[{"name":"_regenerateVertexData","documentation":"","type":"() => VertexData","functionBody":[{"parameters":[],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"copy","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedBox: any, scene: Scene) => Box","functionBody":[{"parameters":[{"name":"parsedBox","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Box","documentation":""}],"entryType":"function"}],"properties":[{"name":"size","documentation":"","type":"number","entryType":"property"},{"name":"side","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Geometry.Primitives._Primitive"]},{"name":"Sphere","documentation":"","type":"typeof Sphere","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"segments","documentation":"","type":"number"},{"name":"diameter","documentation":"","type":"number"},{"name":"canBeRegenerated","documentation":"","type":"boolean"},{"name":"mesh","documentation":"","type":"Mesh"},{"name":"side","documentation":"","type":"number"}],"returnType":"Sphere","documentation":""}],"entryType":"class","functions":[{"name":"_regenerateVertexData","documentation":"","type":"() => VertexData","functionBody":[{"parameters":[],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"copy","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedSphere: any, scene: Scene) => Sphere","functionBody":[{"parameters":[{"name":"parsedSphere","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Sphere","documentation":""}],"entryType":"function"}],"properties":[{"name":"segments","documentation":"","type":"number","entryType":"property"},{"name":"diameter","documentation":"","type":"number","entryType":"property"},{"name":"side","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Geometry.Primitives._Primitive"]},{"name":"Disc","documentation":"","type":"typeof Disc","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"radius","documentation":"","type":"number"},{"name":"tessellation","documentation":"","type":"number"},{"name":"canBeRegenerated","documentation":"","type":"boolean"},{"name":"mesh","documentation":"","type":"Mesh"},{"name":"side","documentation":"","type":"number"}],"returnType":"Disc","documentation":""}],"entryType":"class","functions":[{"name":"_regenerateVertexData","documentation":"","type":"() => VertexData","functionBody":[{"parameters":[],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"copy","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"}],"properties":[{"name":"radius","documentation":"","type":"number","entryType":"property"},{"name":"tessellation","documentation":"","type":"number","entryType":"property"},{"name":"side","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Geometry.Primitives._Primitive"]},{"name":"Cylinder","documentation":"","type":"typeof Cylinder","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"height","documentation":"","type":"number"},{"name":"diameterTop","documentation":"","type":"number"},{"name":"diameterBottom","documentation":"","type":"number"},{"name":"tessellation","documentation":"","type":"number"},{"name":"subdivisions","documentation":"","type":"number"},{"name":"canBeRegenerated","documentation":"","type":"boolean"},{"name":"mesh","documentation":"","type":"Mesh"},{"name":"side","documentation":"","type":"number"}],"returnType":"Cylinder","documentation":""}],"entryType":"class","functions":[{"name":"_regenerateVertexData","documentation":"","type":"() => VertexData","functionBody":[{"parameters":[],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"copy","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedCylinder: any, scene: Scene) => Cylinder","functionBody":[{"parameters":[{"name":"parsedCylinder","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Cylinder","documentation":""}],"entryType":"function"}],"properties":[{"name":"height","documentation":"","type":"number","entryType":"property"},{"name":"diameterTop","documentation":"","type":"number","entryType":"property"},{"name":"diameterBottom","documentation":"","type":"number","entryType":"property"},{"name":"tessellation","documentation":"","type":"number","entryType":"property"},{"name":"subdivisions","documentation":"","type":"number","entryType":"property"},{"name":"side","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Geometry.Primitives._Primitive"]},{"name":"Torus","documentation":"","type":"typeof Torus","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"diameter","documentation":"","type":"number"},{"name":"thickness","documentation":"","type":"number"},{"name":"tessellation","documentation":"","type":"number"},{"name":"canBeRegenerated","documentation":"","type":"boolean"},{"name":"mesh","documentation":"","type":"Mesh"},{"name":"side","documentation":"","type":"number"}],"returnType":"Torus","documentation":""}],"entryType":"class","functions":[{"name":"_regenerateVertexData","documentation":"","type":"() => VertexData","functionBody":[{"parameters":[],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"copy","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedTorus: any, scene: Scene) => Torus","functionBody":[{"parameters":[{"name":"parsedTorus","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Torus","documentation":""}],"entryType":"function"}],"properties":[{"name":"diameter","documentation":"","type":"number","entryType":"property"},{"name":"thickness","documentation":"","type":"number","entryType":"property"},{"name":"tessellation","documentation":"","type":"number","entryType":"property"},{"name":"side","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Geometry.Primitives._Primitive"]},{"name":"Ground","documentation":"","type":"typeof Ground","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"width","documentation":"","type":"number"},{"name":"height","documentation":"","type":"number"},{"name":"subdivisions","documentation":"","type":"number"},{"name":"canBeRegenerated","documentation":"","type":"boolean"},{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"Ground","documentation":""}],"entryType":"class","functions":[{"name":"_regenerateVertexData","documentation":"","type":"() => VertexData","functionBody":[{"parameters":[],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"copy","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedGround: any, scene: Scene) => Ground","functionBody":[{"parameters":[{"name":"parsedGround","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Ground","documentation":""}],"entryType":"function"}],"properties":[{"name":"width","documentation":"","type":"number","entryType":"property"},{"name":"height","documentation":"","type":"number","entryType":"property"},{"name":"subdivisions","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Geometry.Primitives._Primitive"]},{"name":"TiledGround","documentation":"","type":"typeof TiledGround","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"xmin","documentation":"","type":"number"},{"name":"zmin","documentation":"","type":"number"},{"name":"xmax","documentation":"","type":"number"},{"name":"zmax","documentation":"","type":"number"},{"name":"subdivisions","documentation":"","type":"{ w: number; h: number; }"},{"name":"precision","documentation":"","type":"{ w: number; h: number; }"},{"name":"canBeRegenerated","documentation":"","type":"boolean"},{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"TiledGround","documentation":""}],"entryType":"class","functions":[{"name":"_regenerateVertexData","documentation":"","type":"() => VertexData","functionBody":[{"parameters":[],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"copy","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"}],"properties":[{"name":"xmin","documentation":"","type":"number","entryType":"property"},{"name":"zmin","documentation":"","type":"number","entryType":"property"},{"name":"xmax","documentation":"","type":"number","entryType":"property"},{"name":"zmax","documentation":"","type":"number","entryType":"property"},{"name":"subdivisions","documentation":"","type":"{ w: number; h: number; }","entryType":"property"},{"name":"precision","documentation":"","type":"{ w: number; h: number; }","entryType":"property"}],"heritageClauses":["BABYLON.Geometry.Primitives._Primitive"]},{"name":"Plane","documentation":"","type":"typeof Plane","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"size","documentation":"","type":"number"},{"name":"canBeRegenerated","documentation":"","type":"boolean"},{"name":"mesh","documentation":"","type":"Mesh"},{"name":"side","documentation":"","type":"number"}],"returnType":"Plane","documentation":""}],"entryType":"class","functions":[{"name":"_regenerateVertexData","documentation":"","type":"() => VertexData","functionBody":[{"parameters":[],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"copy","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedPlane: any, scene: Scene) => Plane","functionBody":[{"parameters":[{"name":"parsedPlane","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"Plane","documentation":""}],"entryType":"function"}],"properties":[{"name":"size","documentation":"","type":"number","entryType":"property"},{"name":"side","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Geometry.Primitives._Primitive"]},{"name":"TorusKnot","documentation":"","type":"typeof TorusKnot","constructors":[{"parameters":[{"name":"id","documentation":"","type":"string"},{"name":"scene","documentation":"","type":"Scene"},{"name":"radius","documentation":"","type":"number"},{"name":"tube","documentation":"","type":"number"},{"name":"radialSegments","documentation":"","type":"number"},{"name":"tubularSegments","documentation":"","type":"number"},{"name":"p","documentation":"","type":"number"},{"name":"q","documentation":"","type":"number"},{"name":"canBeRegenerated","documentation":"","type":"boolean"},{"name":"mesh","documentation":"","type":"Mesh"},{"name":"side","documentation":"","type":"number"}],"returnType":"TorusKnot","documentation":""}],"entryType":"class","functions":[{"name":"_regenerateVertexData","documentation":"","type":"() => VertexData","functionBody":[{"parameters":[],"returnType":"VertexData","documentation":""}],"entryType":"function"},{"name":"copy","documentation":"","type":"(id: string) => Geometry","functionBody":[{"parameters":[{"name":"id","documentation":"","type":"string"}],"returnType":"Geometry","documentation":""}],"entryType":"function"},{"name":"serialize","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Parse","documentation":"","type":"(parsedTorusKnot: any, scene: Scene) => TorusKnot","functionBody":[{"parameters":[{"name":"parsedTorusKnot","documentation":"","type":"any"},{"name":"scene","documentation":"","type":"Scene"}],"returnType":"TorusKnot","documentation":""}],"entryType":"function"}],"properties":[{"name":"radius","documentation":"","type":"number","entryType":"property"},{"name":"tube","documentation":"","type":"number","entryType":"property"},{"name":"radialSegments","documentation":"","type":"number","entryType":"property"},{"name":"tubularSegments","documentation":"","type":"number","entryType":"property"},{"name":"p","documentation":"","type":"number","entryType":"property"},{"name":"q","documentation":"","type":"number","entryType":"property"},{"name":"side","documentation":"","type":"number","entryType":"property"}],"heritageClauses":["BABYLON.Geometry.Primitives._Primitive"]}]},{"name":"BABYLON.Internals","documentation":"","type":"typeof Internals","entryType":"module","classes":[{"name":"MeshLODLevel","documentation":"","type":"typeof MeshLODLevel","constructors":[{"parameters":[{"name":"distance","documentation":"","type":"number"},{"name":"mesh","documentation":"","type":"Mesh"}],"returnType":"MeshLODLevel","documentation":""}],"entryType":"class","functions":[],"properties":[{"name":"distance","documentation":"","type":"number","entryType":"property"},{"name":"mesh","documentation":"","type":"Mesh","entryType":"property"}]},{"name":"_AlphaState","documentation":"","type":"typeof _AlphaState","constructors":[{"parameters":[],"returnType":"_AlphaState","documentation":""}],"entryType":"class","functions":[{"name":"setAlphaBlendFunctionParameters","documentation":"","type":"(value0: number, value1: number, value2: number, value3: number) => void","functionBody":[{"parameters":[{"name":"value0","documentation":"","type":"number"},{"name":"value1","documentation":"","type":"number"},{"name":"value2","documentation":"","type":"number"},{"name":"value3","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"reset","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"apply","documentation":"","type":"(gl: WebGLRenderingContext) => void","functionBody":[{"parameters":[{"name":"gl","documentation":"","type":"WebGLRenderingContext"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_isAlphaBlendDirty","documentation":"","type":"any","entryType":"property"},{"name":"_isBlendFunctionParametersDirty","documentation":"","type":"any","entryType":"property"},{"name":"_alphaBlend","documentation":"","type":"any","entryType":"property"},{"name":"_blendFunctionParameters","documentation":"","type":"any","entryType":"property"},{"name":"isDirty","documentation":"","type":"boolean","entryType":"property"},{"name":"alphaBlend","documentation":"","type":"boolean","entryType":"property"}]},{"name":"_DepthCullingState","documentation":"","type":"typeof _DepthCullingState","constructors":[{"parameters":[],"returnType":"_DepthCullingState","documentation":""}],"entryType":"class","functions":[{"name":"reset","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"apply","documentation":"","type":"(gl: WebGLRenderingContext) => void","functionBody":[{"parameters":[{"name":"gl","documentation":"","type":"WebGLRenderingContext"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_isDepthTestDirty","documentation":"","type":"any","entryType":"property"},{"name":"_isDepthMaskDirty","documentation":"","type":"any","entryType":"property"},{"name":"_isDepthFuncDirty","documentation":"","type":"any","entryType":"property"},{"name":"_isCullFaceDirty","documentation":"","type":"any","entryType":"property"},{"name":"_isCullDirty","documentation":"","type":"any","entryType":"property"},{"name":"_isZOffsetDirty","documentation":"","type":"any","entryType":"property"},{"name":"_depthTest","documentation":"","type":"any","entryType":"property"},{"name":"_depthMask","documentation":"","type":"any","entryType":"property"},{"name":"_depthFunc","documentation":"","type":"any","entryType":"property"},{"name":"_cull","documentation":"","type":"any","entryType":"property"},{"name":"_cullFace","documentation":"","type":"any","entryType":"property"},{"name":"_zOffset","documentation":"","type":"any","entryType":"property"},{"name":"isDirty","documentation":"","type":"boolean","entryType":"property"},{"name":"zOffset","documentation":"","type":"number","entryType":"property"},{"name":"cullFace","documentation":"","type":"number","entryType":"property"},{"name":"cull","documentation":"","type":"boolean","entryType":"property"},{"name":"depthFunc","documentation":"","type":"number","entryType":"property"},{"name":"depthMask","documentation":"","type":"boolean","entryType":"property"},{"name":"depthTest","documentation":"","type":"boolean","entryType":"property"}]},{"name":"_StencilState","documentation":"","type":"typeof _StencilState","constructors":[{"parameters":[],"returnType":"_StencilState","documentation":""}],"entryType":"class","functions":[{"name":"reset","documentation":"","type":"() => void","functionBody":[{"parameters":[],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"apply","documentation":"","type":"(gl: WebGLRenderingContext) => void","functionBody":[{"parameters":[{"name":"gl","documentation":"","type":"WebGLRenderingContext"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[{"name":"_isStencilTestDirty","documentation":"","type":"any","entryType":"property"},{"name":"_isStencilMaskDirty","documentation":"","type":"any","entryType":"property"},{"name":"_isStencilFuncDirty","documentation":"","type":"any","entryType":"property"},{"name":"_isStencilOpDirty","documentation":"","type":"any","entryType":"property"},{"name":"_stencilTest","documentation":"","type":"any","entryType":"property"},{"name":"_stencilMask","documentation":"","type":"any","entryType":"property"},{"name":"_stencilFunc","documentation":"","type":"any","entryType":"property"},{"name":"_stencilFuncRef","documentation":"","type":"any","entryType":"property"},{"name":"_stencilFuncMask","documentation":"","type":"any","entryType":"property"},{"name":"_stencilOpStencilFail","documentation":"","type":"any","entryType":"property"},{"name":"_stencilOpDepthFail","documentation":"","type":"any","entryType":"property"},{"name":"_stencilOpStencilDepthPass","documentation":"","type":"any","entryType":"property"},{"name":"isDirty","documentation":"","type":"boolean","entryType":"property"},{"name":"stencilFunc","documentation":"","type":"number","entryType":"property"},{"name":"stencilFuncRef","documentation":"","type":"number","entryType":"property"},{"name":"stencilFuncMask","documentation":"","type":"number","entryType":"property"},{"name":"stencilOpStencilFail","documentation":"","type":"number","entryType":"property"},{"name":"stencilOpDepthFail","documentation":"","type":"number","entryType":"property"},{"name":"stencilOpStencilDepthPass","documentation":"","type":"number","entryType":"property"},{"name":"stencilMask","documentation":"","type":"number","entryType":"property"},{"name":"stencilTest","documentation":"","type":"boolean","entryType":"property"}]},{"name":"AndOrNotEvaluator","documentation":"","type":"typeof AndOrNotEvaluator","constructors":[{"parameters":[],"returnType":"AndOrNotEvaluator","documentation":""}],"entryType":"class","functions":[{"name":"Eval","documentation":"","type":"(query: string, evaluateCallback: (val: any) => boolean) => boolean","functionBody":[{"parameters":[{"name":"query","documentation":"","type":"string"},{"name":"evaluateCallback","documentation":"","type":"(val: any) => boolean"}],"returnType":"boolean","documentation":""}],"entryType":"function"},{"name":"_HandleParenthesisContent","documentation":"","type":"(parenthesisContent: any, evaluateCallback: any) => any","functionBody":[{"parameters":[{"name":"parenthesisContent","documentation":"","type":"any"},{"name":"evaluateCallback","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"_SimplifyNegation","documentation":"","type":"(booleanString: any) => any","functionBody":[{"parameters":[{"name":"booleanString","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"DDSTools","documentation":"","type":"typeof DDSTools","constructors":[{"parameters":[],"returnType":"DDSTools","documentation":""}],"entryType":"class","functions":[{"name":"GetDDSInfo","documentation":"","type":"(arrayBuffer: any) => DDSInfo","functionBody":[{"parameters":[{"name":"arrayBuffer","documentation":"","type":"any"}],"returnType":"DDSInfo","documentation":""}],"entryType":"function"},{"name":"GetRGBAArrayBuffer","documentation":"","type":"(width: any, height: any, dataOffset: any, dataLength: any, arrayBuffer: any) => any","functionBody":[{"parameters":[{"name":"width","documentation":"","type":"any"},{"name":"height","documentation":"","type":"any"},{"name":"dataOffset","documentation":"","type":"any"},{"name":"dataLength","documentation":"","type":"any"},{"name":"arrayBuffer","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"GetRGBArrayBuffer","documentation":"","type":"(width: any, height: any, dataOffset: any, dataLength: any, arrayBuffer: any) => any","functionBody":[{"parameters":[{"name":"width","documentation":"","type":"any"},{"name":"height","documentation":"","type":"any"},{"name":"dataOffset","documentation":"","type":"any"},{"name":"dataLength","documentation":"","type":"any"},{"name":"arrayBuffer","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"GetLuminanceArrayBuffer","documentation":"","type":"(width: any, height: any, dataOffset: any, dataLength: any, arrayBuffer: any) => any","functionBody":[{"parameters":[{"name":"width","documentation":"","type":"any"},{"name":"height","documentation":"","type":"any"},{"name":"dataOffset","documentation":"","type":"any"},{"name":"dataLength","documentation":"","type":"any"},{"name":"arrayBuffer","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"UploadDDSLevels","documentation":"","type":"(gl: WebGLRenderingContext, ext: any, arrayBuffer: any, info: DDSInfo, loadMipmaps: boolean, face...","functionBody":[{"parameters":[{"name":"gl","documentation":"","type":"WebGLRenderingContext"},{"name":"ext","documentation":"","type":"any"},{"name":"arrayBuffer","documentation":"","type":"any"},{"name":"info","documentation":"","type":"DDSInfo"},{"name":"loadMipmaps","documentation":"","type":"boolean"},{"name":"faces","documentation":"","type":"number"}],"returnType":"void","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"TGATools","documentation":"","type":"typeof TGATools","constructors":[{"parameters":[],"returnType":"TGATools","documentation":""}],"entryType":"class","functions":[{"name":"GetTGAHeader","documentation":"","type":"(data: Uint8Array) => any","functionBody":[{"parameters":[{"name":"data","documentation":"","type":"Uint8Array"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"UploadContent","documentation":"","type":"(gl: WebGLRenderingContext, data: Uint8Array) => void","functionBody":[{"parameters":[{"name":"gl","documentation":"","type":"WebGLRenderingContext"},{"name":"data","documentation":"","type":"Uint8Array"}],"returnType":"void","documentation":""}],"entryType":"function"},{"name":"_getImageData8bits","documentation":"","type":"(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_en...","functionBody":[{"parameters":[{"name":"header","documentation":"","type":"any"},{"name":"palettes","documentation":"","type":"Uint8Array"},{"name":"pixel_data","documentation":"","type":"Uint8Array"},{"name":"y_start","documentation":"","type":"number"},{"name":"y_step","documentation":"","type":"number"},{"name":"y_end","documentation":"","type":"number"},{"name":"x_start","documentation":"","type":"number"},{"name":"x_step","documentation":"","type":"number"},{"name":"x_end","documentation":"","type":"number"}],"returnType":"Uint8Array","documentation":""}],"entryType":"function"},{"name":"_getImageData16bits","documentation":"","type":"(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_en...","functionBody":[{"parameters":[{"name":"header","documentation":"","type":"any"},{"name":"palettes","documentation":"","type":"Uint8Array"},{"name":"pixel_data","documentation":"","type":"Uint8Array"},{"name":"y_start","documentation":"","type":"number"},{"name":"y_step","documentation":"","type":"number"},{"name":"y_end","documentation":"","type":"number"},{"name":"x_start","documentation":"","type":"number"},{"name":"x_step","documentation":"","type":"number"},{"name":"x_end","documentation":"","type":"number"}],"returnType":"Uint8Array","documentation":""}],"entryType":"function"},{"name":"_getImageData24bits","documentation":"","type":"(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_en...","functionBody":[{"parameters":[{"name":"header","documentation":"","type":"any"},{"name":"palettes","documentation":"","type":"Uint8Array"},{"name":"pixel_data","documentation":"","type":"Uint8Array"},{"name":"y_start","documentation":"","type":"number"},{"name":"y_step","documentation":"","type":"number"},{"name":"y_end","documentation":"","type":"number"},{"name":"x_start","documentation":"","type":"number"},{"name":"x_step","documentation":"","type":"number"},{"name":"x_end","documentation":"","type":"number"}],"returnType":"Uint8Array","documentation":""}],"entryType":"function"},{"name":"_getImageData32bits","documentation":"","type":"(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_en...","functionBody":[{"parameters":[{"name":"header","documentation":"","type":"any"},{"name":"palettes","documentation":"","type":"Uint8Array"},{"name":"pixel_data","documentation":"","type":"Uint8Array"},{"name":"y_start","documentation":"","type":"number"},{"name":"y_step","documentation":"","type":"number"},{"name":"y_end","documentation":"","type":"number"},{"name":"x_start","documentation":"","type":"number"},{"name":"x_step","documentation":"","type":"number"},{"name":"x_end","documentation":"","type":"number"}],"returnType":"Uint8Array","documentation":""}],"entryType":"function"},{"name":"_getImageDataGrey8bits","documentation":"","type":"(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_en...","functionBody":[{"parameters":[{"name":"header","documentation":"","type":"any"},{"name":"palettes","documentation":"","type":"Uint8Array"},{"name":"pixel_data","documentation":"","type":"Uint8Array"},{"name":"y_start","documentation":"","type":"number"},{"name":"y_step","documentation":"","type":"number"},{"name":"y_end","documentation":"","type":"number"},{"name":"x_start","documentation":"","type":"number"},{"name":"x_step","documentation":"","type":"number"},{"name":"x_end","documentation":"","type":"number"}],"returnType":"Uint8Array","documentation":""}],"entryType":"function"},{"name":"_getImageDataGrey16bits","documentation":"","type":"(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_en...","functionBody":[{"parameters":[{"name":"header","documentation":"","type":"any"},{"name":"palettes","documentation":"","type":"Uint8Array"},{"name":"pixel_data","documentation":"","type":"Uint8Array"},{"name":"y_start","documentation":"","type":"number"},{"name":"y_step","documentation":"","type":"number"},{"name":"y_end","documentation":"","type":"number"},{"name":"x_start","documentation":"","type":"number"},{"name":"x_step","documentation":"","type":"number"},{"name":"x_end","documentation":"","type":"number"}],"returnType":"Uint8Array","documentation":""}],"entryType":"function"}],"properties":[{"name":"_TYPE_NO_DATA","documentation":"","type":"any","entryType":"property"},{"name":"_TYPE_INDEXED","documentation":"","type":"any","entryType":"property"},{"name":"_TYPE_RGB","documentation":"","type":"any","entryType":"property"},{"name":"_TYPE_GREY","documentation":"","type":"any","entryType":"property"},{"name":"_TYPE_RLE_INDEXED","documentation":"","type":"any","entryType":"property"},{"name":"_TYPE_RLE_RGB","documentation":"","type":"any","entryType":"property"},{"name":"_TYPE_RLE_GREY","documentation":"","type":"any","entryType":"property"},{"name":"_ORIGIN_MASK","documentation":"","type":"any","entryType":"property"},{"name":"_ORIGIN_SHIFT","documentation":"","type":"any","entryType":"property"},{"name":"_ORIGIN_BL","documentation":"","type":"any","entryType":"property"},{"name":"_ORIGIN_BR","documentation":"","type":"any","entryType":"property"},{"name":"_ORIGIN_UL","documentation":"","type":"any","entryType":"property"},{"name":"_ORIGIN_UR","documentation":"","type":"any","entryType":"property"}]},{"name":"CubeMapToSphericalPolynomialTools","documentation":"Helper class dealing with the extraction of spherical polynomial dataArray\nfrom a cube map.","type":"typeof CubeMapToSphericalPolynomialTools","constructors":[{"parameters":[],"returnType":"CubeMapToSphericalPolynomialTools","documentation":""}],"entryType":"class","functions":[{"name":"ConvertCubeMapToSphericalPolynomial","documentation":"Converts a cubemap to the according Spherical Polynomial data.\nThis extracts the first 3 orders only as they are the only one used in the lighting.\n\n@return The Spherical Polynomial data.","type":"(cubeInfo: CubeMapInfo) => SphericalPolynomial","functionBody":[{"parameters":[{"name":"cubeInfo","documentation":"The Cube map to extract the information from.","type":"CubeMapInfo"}],"returnType":"SphericalPolynomial","documentation":"Converts a cubemap to the according Spherical Polynomial data.\nThis extracts the first 3 orders only as they are the only one used in the lighting.\n\n@return The Spherical Polynomial data."}],"entryType":"function"}],"properties":[{"name":"FileFaces","documentation":"","type":"any","entryType":"property"}]},{"name":"HDRTools","documentation":"This groups tools to convert HDR texture to native colors array.","type":"typeof HDRTools","constructors":[{"parameters":[],"returnType":"HDRTools","documentation":""}],"entryType":"class","functions":[{"name":"Ldexp","documentation":"","type":"(mantissa: any, exponent: any) => any","functionBody":[{"parameters":[{"name":"mantissa","documentation":"","type":"any"},{"name":"exponent","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"Rgbe2float","documentation":"","type":"(float32array: any, red: any, green: any, blue: any, exponent: any, index: any) => any","functionBody":[{"parameters":[{"name":"float32array","documentation":"","type":"any"},{"name":"red","documentation":"","type":"any"},{"name":"green","documentation":"","type":"any"},{"name":"blue","documentation":"","type":"any"},{"name":"exponent","documentation":"","type":"any"},{"name":"index","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"readStringLine","documentation":"","type":"(uint8array: any, startIndex: any) => any","functionBody":[{"parameters":[{"name":"uint8array","documentation":"","type":"any"},{"name":"startIndex","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"RGBE_ReadHeader","documentation":"Reads header information from an RGBE texture stored in a native array.\nMore information on this format are available here:\nhttps://en.wikipedia.org/wiki/RGBE_image_format\n\n@return The header information.","type":"(uint8array: Uint8Array) => HDRInfo","functionBody":[{"parameters":[{"name":"uint8array","documentation":"The binary file stored in  native array.","type":"Uint8Array"}],"returnType":"HDRInfo","documentation":"Reads header information from an RGBE texture stored in a native array.\nMore information on this format are available here:\nhttps://en.wikipedia.org/wiki/RGBE_image_format\n\n@return The header information."}],"entryType":"function"},{"name":"GetCubeMapTextureData","documentation":"Returns the cubemap information (each faces texture data) extracted from an RGBE texture.\nThis RGBE texture needs to store the information as a panorama.\n\nMore information on this format are available here:\nhttps://en.wikipedia.org/wiki/RGBE_image_format\n\n@return The Cube Map information.","type":"(buffer: ArrayBuffer, size: number) => CubeMapInfo","functionBody":[{"parameters":[{"name":"buffer","documentation":"The binary file stored in an array buffer.","type":"ArrayBuffer"},{"name":"size","documentation":"The expected size of the extracted cubemap.","type":"number"}],"returnType":"CubeMapInfo","documentation":"Returns the cubemap information (each faces texture data) extracted from an RGBE texture.\nThis RGBE texture needs to store the information as a panorama.\n\nMore information on this format are available here:\nhttps://en.wikipedia.org/wiki/RGBE_image_format\n\n@return The Cube Map information."}],"entryType":"function"},{"name":"RGBE_ReadPixels","documentation":"Returns the pixels data extracted from an RGBE texture.\nThis pixels will be stored left to right up to down in the R G B order in one array.\n\nMore information on this format are available here:\nhttps://en.wikipedia.org/wiki/RGBE_image_format\n\n@return The pixels data in RGB right to left up to down order.","type":"(uint8array: Uint8Array, hdrInfo: HDRInfo) => Float32Array","functionBody":[{"parameters":[{"name":"uint8array","documentation":"The binary file stored in an array buffer.","type":"Uint8Array"},{"name":"hdrInfo","documentation":"The header information of the file.","type":"HDRInfo"}],"returnType":"Float32Array","documentation":"Returns the pixels data extracted from an RGBE texture.\nThis pixels will be stored left to right up to down in the R G B order in one array.\n\nMore information on this format are available here:\nhttps://en.wikipedia.org/wiki/RGBE_image_format\n\n@return The pixels data in RGB right to left up to down order."}],"entryType":"function"},{"name":"RGBE_ReadPixels_RLE","documentation":"","type":"(uint8array: any, hdrInfo: any) => any","functionBody":[{"parameters":[{"name":"uint8array","documentation":"","type":"any"},{"name":"hdrInfo","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[]},{"name":"PanoramaToCubeMapTools","documentation":"Helper class usefull to convert panorama picture to their cubemap representation in 6 faces.","type":"typeof PanoramaToCubeMapTools","constructors":[{"parameters":[],"returnType":"PanoramaToCubeMapTools","documentation":""}],"entryType":"class","functions":[{"name":"ConvertPanoramaToCubemap","documentation":"Converts a panorma stored in RGB right to left up to down format into a cubemap (6 faces).\n\n@return The cubemap data","type":"(float32Array: Float32Array, inputWidth: number, inputHeight: number, size: number) => CubeMapInfo","functionBody":[{"parameters":[{"name":"float32Array","documentation":"The source data.","type":"Float32Array"},{"name":"inputWidth","documentation":"The width of the input panorama.","type":"number"},{"name":"inputHeight","documentation":"","type":"number"},{"name":"size","documentation":"The willing size of the generated cubemap (each faces will be size * size pixels)","type":"number"}],"returnType":"CubeMapInfo","documentation":"Converts a panorma stored in RGB right to left up to down format into a cubemap (6 faces).\n\n@return The cubemap data"}],"entryType":"function"},{"name":"CreateCubemapTexture","documentation":"","type":"(texSize: any, faceData: any, float32Array: any, inputWidth: any, inputHeight: any) => any","functionBody":[{"parameters":[{"name":"texSize","documentation":"","type":"any"},{"name":"faceData","documentation":"","type":"any"},{"name":"float32Array","documentation":"","type":"any"},{"name":"inputWidth","documentation":"","type":"any"},{"name":"inputHeight","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"CalcProjectionSpherical","documentation":"","type":"(vDir: any, float32Array: any, inputWidth: any, inputHeight: any) => any","functionBody":[{"parameters":[{"name":"vDir","documentation":"","type":"any"},{"name":"float32Array","documentation":"","type":"any"},{"name":"inputWidth","documentation":"","type":"any"},{"name":"inputHeight","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"FACE_FRONT","documentation":"","type":"any","entryType":"property"},{"name":"FACE_BACK","documentation":"","type":"any","entryType":"property"},{"name":"FACE_RIGHT","documentation":"","type":"any","entryType":"property"},{"name":"FACE_LEFT","documentation":"","type":"any","entryType":"property"},{"name":"FACE_DOWN","documentation":"","type":"any","entryType":"property"},{"name":"FACE_UP","documentation":"","type":"any","entryType":"property"}]},{"name":"PMREMGenerator","documentation":"Helper class to PreProcess a cubemap in order to generate mipmap according to the level of blur\nrequired by the glossinees of a material.\n\nThis only supports the cosine drop power as well as Warp fixup generation method.\n\nThis is using the process from CubeMapGen described here:\nhttps://seblagarde.wordpress.com/2012/06/10/amd-cubemapgen-for-physically-based-rendering/","type":"typeof PMREMGenerator","constructors":[{"parameters":[{"name":"input","documentation":"The different faces data from the original cubemap in the order X+ X- Y+ Y- Z+ Z-","type":"ArrayBufferView[]"},{"name":"inputSize","documentation":"The size of the cubemap faces","type":"number"},{"name":"outputSize","documentation":"The size of the output cubemap faces","type":"number"},{"name":"maxNumMipLevels","documentation":"The max number of mip map to generate (0 means all)","type":"number"},{"name":"numChannels","documentation":"The number of channels stored in the cubemap (3 for RBGE for instance)","type":"number"},{"name":"isFloat","documentation":"Specifies if the input texture is in float or int (hdr is usually in float)","type":"boolean"},{"name":"specularPower","documentation":"The max specular level of the desired cubemap","type":"number"},{"name":"cosinePowerDropPerMip","documentation":"The amount of drop the specular power will follow on each mip","type":"number"},{"name":"excludeBase","documentation":"Specifies wether to process the level 0 (original level) or not","type":"boolean"},{"name":"fixup","documentation":"Specifies wether to apply the edge fixup algorythm or not","type":"boolean"}],"returnType":"PMREMGenerator","documentation":"Constructor of the generator."}],"entryType":"class","functions":[{"name":"filterCubeMap","documentation":"Launches the filter process and return the result.\n\n@return the filter cubemap in the form mip0 [faces1..6] .. mipN [faces1..6]","type":"() => ArrayBufferView[][]","functionBody":[{"parameters":[],"returnType":"ArrayBufferView[][]","documentation":"Launches the filter process and return the result.\n\n@return the filter cubemap in the form mip0 [faces1..6] .. mipN [faces1..6]"}],"entryType":"function"},{"name":"init","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"filterCubeMapMipChain","documentation":"","type":"() => any","functionBody":[{"parameters":[],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"getBaseFilterAngle","documentation":"","type":"(cosinePower: any) => any","functionBody":[{"parameters":[{"name":"cosinePower","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"precomputeFilterLookupTables","documentation":"","type":"(srcCubeMapWidth: any) => any","functionBody":[{"parameters":[{"name":"srcCubeMapWidth","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"buildNormalizerSolidAngleCubemap","documentation":"","type":"(size: any) => any","functionBody":[{"parameters":[{"name":"size","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"texelCoordToVect","documentation":"","type":"(faceIdx: any, u: any, v: any, size: any, fixup: any) => any","functionBody":[{"parameters":[{"name":"faceIdx","documentation":"","type":"any"},{"name":"u","documentation":"","type":"any"},{"name":"v","documentation":"","type":"any"},{"name":"size","documentation":"","type":"any"},{"name":"fixup","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"vectToTexelCoord","documentation":"","type":"(x: any, y: any, z: any, size: any) => any","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"any"},{"name":"y","documentation":"","type":"any"},{"name":"z","documentation":"","type":"any"},{"name":"size","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"areaElement","documentation":"","type":"(x: any, y: any) => any","functionBody":[{"parameters":[{"name":"x","documentation":"","type":"any"},{"name":"y","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"texelCoordSolidAngle","documentation":"","type":"(faceIdx: any, u: any, v: any, size: any) => any","functionBody":[{"parameters":[{"name":"faceIdx","documentation":"","type":"any"},{"name":"u","documentation":"","type":"any"},{"name":"v","documentation":"","type":"any"},{"name":"size","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"filterCubeSurfaces","documentation":"","type":"(srcCubeMap: any, srcSize: any, dstCubeMap: any, dstSize: any, filterConeAngle: any, specularPowe...","functionBody":[{"parameters":[{"name":"srcCubeMap","documentation":"","type":"any"},{"name":"srcSize","documentation":"","type":"any"},{"name":"dstCubeMap","documentation":"","type":"any"},{"name":"dstSize","documentation":"","type":"any"},{"name":"filterConeAngle","documentation":"","type":"any"},{"name":"specularPower","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"clearFilterExtents","documentation":"","type":"(filterExtents: any) => any","functionBody":[{"parameters":[{"name":"filterExtents","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"determineFilterExtents","documentation":"","type":"(centerTapDir: any, srcSize: any, bboxSize: any, filterExtents: any) => any","functionBody":[{"parameters":[{"name":"centerTapDir","documentation":"","type":"any"},{"name":"srcSize","documentation":"","type":"any"},{"name":"bboxSize","documentation":"","type":"any"},{"name":"filterExtents","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"processFilterExtents","documentation":"","type":"(centerTapDir: any, dotProdThresh: any, filterExtents: any, srcCubeMap: any, srcSize: any, specul...","functionBody":[{"parameters":[{"name":"centerTapDir","documentation":"","type":"any"},{"name":"dotProdThresh","documentation":"","type":"any"},{"name":"filterExtents","documentation":"","type":"any"},{"name":"srcCubeMap","documentation":"","type":"any"},{"name":"srcSize","documentation":"","type":"any"},{"name":"specularPower","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"},{"name":"fixupCubeEdges","documentation":"","type":"(cubeMap: any, cubeMapSize: any) => any","functionBody":[{"parameters":[{"name":"cubeMap","documentation":"","type":"any"},{"name":"cubeMapSize","documentation":"","type":"any"}],"returnType":"any","documentation":""}],"entryType":"function"}],"properties":[{"name":"input","documentation":"","type":"ArrayBufferView[]","entryType":"property"},{"name":"inputSize","documentation":"","type":"number","entryType":"property"},{"name":"outputSize","documentation":"","type":"number","entryType":"property"},{"name":"maxNumMipLevels","documentation":"","type":"number","entryType":"property"},{"name":"numChannels","documentation":"","type":"number","entryType":"property"},{"name":"isFloat","documentation":"","type":"boolean","entryType":"property"},{"name":"specularPower","documentation":"","type":"number","entryType":"property"},{"name":"cosinePowerDropPerMip","documentation":"","type":"number","entryType":"property"},{"name":"excludeBase","documentation":"","type":"boolean","entryType":"property"},{"name":"fixup","documentation":"","type":"boolean","entryType":"property"},{"name":"CP_MAX_MIPLEVELS","documentation":"","type":"any","entryType":"property"},{"name":"CP_UDIR","documentation":"","type":"any","entryType":"property"},{"name":"CP_VDIR","documentation":"","type":"any","entryType":"property"},{"name":"CP_FACEAXIS","documentation":"","type":"any","entryType":"property"},{"name":"CP_FACE_X_POS","documentation":"","type":"any","entryType":"property"},{"name":"CP_FACE_X_NEG","documentation":"","type":"any","entryType":"property"},{"name":"CP_FACE_Y_POS","documentation":"","type":"any","entryType":"property"},{"name":"CP_FACE_Y_NEG","documentation":"","type":"any","entryType":"property"},{"name":"CP_FACE_Z_POS","documentation":"","type":"any","entryType":"property"},{"name":"CP_FACE_Z_NEG","documentation":"","type":"any","entryType":"property"},{"name":"CP_EDGE_LEFT","documentation":"","type":"any","entryType":"property"},{"name":"CP_EDGE_RIGHT","documentation":"","type":"any","entryType":"property"},{"name":"CP_EDGE_TOP","documentation":"","type":"any","entryType":"property"},{"name":"CP_EDGE_BOTTOM","documentation":"","type":"any","entryType":"property"},{"name":"CP_CORNER_NNN","documentation":"","type":"any","entryType":"property"},{"name":"CP_CORNER_NNP","documentation":"","type":"any","entryType":"property"},{"name":"CP_CORNER_NPN","documentation":"","type":"any","entryType":"property"},{"name":"CP_CORNER_NPP","documentation":"","type":"any","entryType":"property"},{"name":"CP_CORNER_PNN","documentation":"","type":"any","entryType":"property"},{"name":"CP_CORNER_PNP","documentation":"","type":"any","entryType":"property"},{"name":"CP_CORNER_PPN","documentation":"","type":"any","entryType":"property"},{"name":"CP_CORNER_PPP","documentation":"","type":"any","entryType":"property"},{"name":"_vectorTemp","documentation":"","type":"any","entryType":"property"},{"name":"_sgFace2DMapping","documentation":"","type":"any","entryType":"property"},{"name":"_sgCubeNgh","documentation":"","type":"any","entryType":"property"},{"name":"_sgCubeEdgeList","documentation":"","type":"any","entryType":"property"},{"name":"_sgCubeCornerList","documentation":"","type":"any","entryType":"property"},{"name":"_outputSurface","documentation":"","type":"any","entryType":"property"},{"name":"_normCubeMap","documentation":"","type":"any","entryType":"property"},{"name":"_filterLUT","documentation":"","type":"any","entryType":"property"},{"name":"_numMipLevels","documentation":"","type":"any","entryType":"property"}]}]},{"name":"Earcut","documentation":"","type":"typeof Earcut","entryType":"module","classes":[]}]